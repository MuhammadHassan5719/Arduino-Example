/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.09.2024 22:24:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74400;
#else
constexpr int kTensorArenaSize = 73376;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 18842, -32036, -38760, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00019245878502260894, 0.00011646157508948818, 0.0001167272639577277, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 22,29,73,-47,-19,32,-7,16,-28,39,36,19,-3,-55,31,-28,-35,127,125,76,-78,-43,-12,-57,-69,65,-18,0,47,-21,-14,-5, 
  /* [1][0][][] */ 63,-39,-63,23,-13,127,-17,-5,120,-58,-3,-99,-64,110,36,-54,92,-83,-33,-90,-116,23,115,74,32,25,-4,-9,-66,-50,1,-23, 
  /* [2][0][][] */ -30,77,-74,82,91,-41,-27,113,94,37,127,-6,-108,-85,90,121,-80,-86,-37,-111,76,122,-41,-83,105,-45,-21,-112,-18,-75,80,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0055586574599146843, 0.0033636812586337328, 0.003371354890987277, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 745, 49, -582, -123, 165, 432, -409, 93, 192, -64, 106, 610, 156, 560, 305, -143, 414, 1124, 2688, -374, -207, -56, 700, 229, -240, -693, -505, -480, -195, -131, -759, -439, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2377883801236749e-05, 4.2445721192052588e-05, 3.9421935071004555e-05, 4.2695977754192427e-05, 4.1879404307110235e-05, 4.0450991946272552e-05, 3.8989037420833483e-05, 4.3252472096355632e-05, 4.2550371290417388e-05, 4.8780253564473242e-05, 3.947136428905651e-05, 5.0591821491252631e-05, 4.7245513997040689e-05, 4.235256346873939e-05, 3.9785907574696466e-05, 4.1541956306900829e-05, 4.0187183913076296e-05, 5.5206561228260398e-05, 7.0923742896411568e-05, 3.8380367186618969e-05, 3.8814632716821507e-05, 4.2142695747315884e-05, 4.3124317016918212e-05, 4.183222699793987e-05, 4.8685127694625407e-05, 3.9702175854472443e-05, 3.9984945033211261e-05, 3.8721525925211608e-05, 4.549609002424404e-05, 4.0178518247557804e-05, 3.9409158489434049e-05, 3.9998209103941917e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -23,-47,105,21,100,-3,-64,-77,73,-79,-83,1,64,21,-24,58,-44,-16,-65,-38,-54,-102,15,97,-123,24,82,-37,93,7,2,-62,87,-43,-75,66,-96,-84,-69,37,80,-78,-70,107,46,-101,116,-28,4,-32,-34,28,-53,-27,-83,100,35,74,127,-91,-66,90,-76,58,3,27,69,101,61,100,98,-88,108,-105,52,94,-103,21,-50,31,61,17,92,16,-48,-23,-66,74,42,91,0,-92,29,37,48,0, 
  /* [1][0][][] */ -71,51,-53,-9,-37,60,37,4,74,-112,-92,83,50,-20,10,61,70,-71,28,101,-38,15,49,5,30,5,-50,115,24,24,88,-84,54,84,-12,36,60,61,-4,-83,-57,13,-22,-96,-50,25,-45,-39,-42,-89,117,64,22,78,-81,-55,37,75,75,75,-39,86,-47,-63,-43,25,73,19,97,17,-1,7,-118,84,-41,42,86,-44,-26,78,-65,80,-62,-127,34,106,-54,-37,86,78,73,11,61,106,22,-5, 
  /* [2][0][][] */ 32,25,-73,82,-34,-69,72,83,-119,76,-49,112,75,-28,68,-127,-76,-40,34,38,-110,-26,90,5,-43,70,89,-5,-81,66,69,79,-81,-34,-108,-114,-94,90,96,-57,-124,-90,-14,-23,-99,107,-35,-91,100,23,82,-105,-61,46,17,1,-75,75,-80,-8,-46,42,-30,56,81,30,38,72,-107,45,-6,-84,20,-79,17,16,-69,-24,-10,-2,23,-104,-6,-50,-16,-109,-34,-52,77,106,-33,-10,-56,-91,-55,-69, 
  /* [3][0][][] */ 72,43,44,-50,-58,42,-104,49,70,28,69,-26,93,98,77,15,80,81,-56,6,120,-61,-46,-100,13,-100,-73,126,49,-49,75,-3,-39,-27,-6,3,-54,-38,53,53,-19,-82,-83,11,71,9,-28,-52,44,-72,60,31,96,57,51,-87,-87,-107,-90,-50,-81,39,-38,68,63,-17,-46,-31,-25,-61,6,98,23,-100,66,-60,39,105,115,-35,-81,-127,35,69,35,50,-39,-85,-49,75,-10,-87,98,-66,-87,11, 
  /* [4][0][][] */ 43,127,18,29,-31,-28,25,0,74,66,1,38,27,-29,-9,-63,-45,-34,-77,11,119,-58,97,24,8,-21,43,-24,-37,73,-88,-53,74,103,17,-82,-8,-17,-97,57,-60,-61,-55,-69,34,85,17,68,-10,-44,10,-40,-69,68,-114,17,34,-95,21,27,35,-59,-25,-74,-38,60,13,-49,36,-93,-97,-76,-64,10,105,46,73,-32,25,-14,17,-45,-111,-37,0,64,83,37,-82,-15,32,48,34,106,-81,-37, 
  /* [5][0][][] */ 102,-93,81,87,48,-106,38,64,118,-101,8,-64,33,104,44,39,62,70,-81,103,36,44,22,-24,-127,-49,-6,-85,33,33,25,-88,-26,14,-58,22,-105,-56,51,34,-81,-62,57,106,-33,11,50,-65,-111,112,11,-31,44,28,25,-20,111,58,-41,-34,30,-52,-6,-62,-26,107,-25,40,79,11,116,-55,-33,53,-16,-69,2,-38,13,80,111,31,31,97,-74,81,0,12,74,-119,119,99,-2,-1,69,-112, 
  /* [6][0][][] */ 12,-48,110,72,-89,-63,-7,55,-24,-86,-2,-93,79,50,106,-125,34,-8,4,98,-87,-123,100,55,-61,-86,-14,-62,-26,-113,43,-86,-95,-127,-51,-109,-11,35,-117,68,80,56,16,-23,-114,108,-92,-53,-85,13,-31,-70,55,-56,98,-30,1,-16,-67,105,-104,-5,67,-73,-55,61,94,-54,70,-11,-114,-12,52,-72,-100,-43,-81,-93,-72,-37,28,-27,37,-22,-78,-66,-45,-103,77,92,93,11,-54,-65,71,-27, 
  /* [7][0][][] */ 100,94,-22,-49,-60,95,-9,9,118,-2,-78,1,55,-70,43,75,20,-21,-13,99,58,51,12,71,-61,90,38,75,-64,127,-22,18,31,23,67,102,-76,76,4,-22,89,-63,83,74,34,-22,87,-89,5,-54,-87,-49,-10,97,-4,24,117,-80,23,-47,22,-9,69,-92,-51,-43,68,16,-93,19,52,79,76,19,71,47,-49,52,-68,56,90,-38,-35,-95,94,30,-96,107,90,11,69,64,-54,-20,-13,-67, 
  /* [8][0][][] */ 17,44,-30,-83,62,25,-59,-6,25,41,50,82,12,-34,-69,-59,-64,91,-71,18,38,-20,84,104,-110,91,52,85,-67,40,-81,109,95,-22,51,7,127,-11,-7,82,77,93,-79,-94,-11,-41,-8,103,7,-79,-51,-10,-49,9,-45,-98,56,108,-69,100,115,49,12,106,-22,-32,-15,99,-70,61,37,7,80,52,22,13,-44,102,88,78,41,65,-112,-94,31,38,70,-31,49,-32,-80,105,-62,-93,-48,36, 
  /* [9][0][][] */ -1,5,108,41,58,-79,-35,-127,30,22,-14,43,-25,-61,-89,-21,16,-28,-78,-60,-2,101,-77,-86,76,-27,-9,34,11,-48,-77,85,41,-7,23,-17,-62,21,-47,-42,12,-40,55,-91,66,44,-102,53,44,-15,-64,-43,68,-54,-41,97,54,-52,-2,1,-46,81,71,-49,-68,-2,85,29,-28,88,76,-95,-6,68,-88,-71,-29,-112,-35,105,34,45,59,13,-12,-99,35,-11,71,9,-26,80,74,20,25,-17, 
  /* [10][0][][] */ -69,113,105,-77,-10,97,115,38,53,24,33,-86,104,91,-32,20,-70,49,-111,-66,-7,49,72,-78,29,51,-111,-87,-44,111,-96,-94,93,100,125,85,-22,1,-20,38,-32,118,-103,-23,-107,-79,-6,-50,-50,-2,48,18,72,41,-83,-40,-88,-13,49,-40,12,75,106,50,127,-66,-89,-25,29,-19,-101,-64,86,57,-64,98,-6,68,89,38,85,-7,39,73,-84,66,102,-2,51,13,-14,-63,-58,-30,-56,-78, 
  /* [11][0][][] */ 74,41,-4,91,93,23,53,20,66,62,-47,74,-11,-67,11,-17,-48,-88,79,47,12,70,16,-87,-31,-75,-28,62,80,-3,20,-16,-74,-62,36,47,-38,105,-10,-76,-16,115,-45,-8,-45,-34,-82,-34,55,81,107,117,-51,-73,30,16,-35,-49,26,-54,-36,56,96,21,29,57,-21,28,66,46,-82,-58,33,127,-69,72,-47,45,-44,81,-72,-15,-33,22,50,-46,12,22,-47,42,21,-92,-72,-2,-61,24, 
  /* [12][0][][] */ 10,58,-42,-1,77,7,-29,27,-66,46,-8,17,-40,8,37,-59,-82,-29,-32,-67,25,-14,16,84,-28,-43,83,-87,87,9,-25,96,-72,-60,-39,10,-19,-45,-18,22,97,44,-105,-41,-16,-43,-38,103,-30,-97,-58,98,37,-2,-58,70,-16,-53,37,61,52,91,9,46,97,27,-34,95,44,72,35,59,63,127,-18,11,-19,31,-93,-80,-45,93,46,30,-33,44,50,123,-78,-97,75,32,82,-13,31,86, 
  /* [13][0][][] */ 115,-60,100,102,99,115,80,73,87,-79,20,-18,97,74,77,-36,-94,-44,-68,47,77,-34,112,-31,-45,54,21,21,-94,-77,84,47,49,110,-9,44,-66,-39,31,84,-57,61,-31,26,-31,21,19,-16,31,108,-36,-124,-92,39,83,-68,-38,41,-25,-66,-23,127,-95,9,-40,-46,-77,98,-21,7,110,14,-69,22,-59,-36,-102,79,79,-51,59,-97,100,18,-76,-75,88,99,-2,-39,-53,67,127,-61,63,-35, 
  /* [14][0][][] */ -46,-54,101,57,89,-26,3,-97,-41,-28,86,65,-13,-63,-78,-66,-68,-65,-1,21,-23,51,19,55,-116,-61,-12,62,-104,-67,-72,39,117,-6,-18,21,109,105,47,-91,9,-107,51,110,50,-127,80,-77,70,42,86,52,110,18,-34,12,-26,22,72,106,8,-74,-45,84,-78,14,85,-94,-73,-92,-77,101,20,72,72,-77,73,-99,80,49,55,-30,-127,-63,-87,-84,-96,126,126,6,80,-36,90,118,-27,47, 
  /* [15][0][][] */ 5,8,-15,61,90,-86,64,-86,51,-10,-62,-4,92,0,-91,-99,63,-11,-102,21,51,31,85,98,82,56,27,113,33,82,61,-115,2,-3,-62,7,-40,108,118,-62,21,116,-38,-18,27,-92,-56,-59,-4,-85,15,56,-78,-85,-59,-11,76,47,-30,102,-26,-72,17,110,-19,92,-62,-10,-52,18,33,-69,6,-15,64,-103,4,54,119,89,-67,51,-116,-79,-106,-31,-85,65,100,84,-118,-41,47,127,-103,101, 
  /* [16][0][][] */ -51,-14,102,-43,51,119,-45,51,61,64,-96,81,2,-38,-36,-54,118,97,65,79,115,68,-37,63,-37,71,-53,59,-113,10,50,29,-90,91,67,59,-36,37,-45,-47,25,-57,86,102,70,96,120,-25,-56,-87,-12,78,-41,121,63,53,27,103,60,20,106,126,1,57,52,27,-35,108,53,114,-8,7,46,82,70,87,-18,102,-106,-17,21,-86,72,25,13,103,105,-15,75,-1,-1,127,92,-58,-78,10, 
  /* [17][0][][] */ 17,-83,48,78,-24,-69,-35,-86,-3,-78,72,43,68,52,-98,60,30,14,98,89,-75,9,8,-61,40,48,-70,25,113,-30,6,69,-22,-15,24,23,-39,99,-49,-62,-55,2,-14,-21,5,60,31,-62,55,82,20,63,11,55,106,-45,-69,46,-38,-73,40,-66,96,94,-41,-56,47,-67,-71,-20,70,26,9,-63,-44,96,127,-35,13,-30,24,25,-43,1,-60,71,71,-23,24,65,-41,-104,-16,89,43,53, 
  /* [18][0][][] */ -49,21,75,5,3,-54,-25,0,-10,39,-34,-25,-11,57,33,-5,9,-35,127,16,71,23,26,-90,-18,-22,-7,46,83,3,53,46,28,1,-43,-32,-65,107,-6,-29,8,32,-32,-19,-77,93,-8,-7,15,40,36,-47,-38,-22,89,50,-4,3,8,-44,54,48,80,61,-11,-64,29,71,56,-71,-18,74,-48,30,-36,20,70,61,-6,-29,-7,68,45,16,86,19,73,45,-50,-98,25,33,47,10,48,108, 
  /* [19][0][][] */ 9,24,72,34,54,-82,89,92,77,-72,22,-16,-103,25,-60,56,72,-110,99,61,-27,66,-59,5,62,-85,22,-74,-101,-127,-69,40,78,-90,28,-8,19,-71,-56,-104,43,-120,-99,9,-92,25,66,-102,-29,28,-33,20,-35,26,5,-21,9,94,-2,-39,51,-57,109,63,-71,-9,-30,-9,-13,52,64,-48,-70,-125,-62,-82,-35,-111,11,101,54,-125,-43,81,-104,-10,-5,0,90,46,-8,57,-39,112,93,-51, 
  /* [20][0][][] */ -19,92,69,100,-93,88,19,53,-8,-1,-91,-2,-17,82,32,-65,-36,-50,-73,-25,16,-28,-75,-70,102,-85,-116,54,42,17,-56,106,92,33,-20,56,48,-18,-15,-112,-90,-8,-91,-111,-17,-47,-93,125,59,-127,-72,100,53,111,62,8,89,69,104,88,123,-68,-30,-24,-23,-79,-43,10,-87,-47,-89,68,-75,-80,30,25,122,77,108,115,84,12,70,-31,65,126,-19,108,27,127,28,52,0,58,-8,16, 
  /* [21][0][][] */ 80,101,78,-115,95,-80,74,25,12,-66,-61,13,6,38,-45,-75,-127,-48,4,-19,108,-34,78,-78,55,-88,-25,92,14,42,-14,-37,12,17,-83,-95,125,77,-97,-13,-8,9,34,1,-96,-100,-72,95,-69,-71,6,93,42,87,-121,18,-37,52,-29,112,65,-70,1,-7,83,37,-28,-69,-95,-2,42,71,30,-30,82,50,-99,-23,78,112,16,76,13,-100,31,-90,54,-55,-82,82,87,-97,-43,-42,47,-46, 
  /* [22][0][][] */ 43,-55,-55,-64,91,-38,113,68,-72,91,-53,-98,117,-92,-90,-55,61,92,-80,-42,91,-72,31,34,67,12,-84,96,-61,-57,-40,-82,51,70,26,23,6,-25,-38,-85,1,-16,28,102,57,-97,103,-26,-67,-47,1,-57,-48,-77,-19,38,4,-10,-15,-20,120,-53,-107,-95,-54,29,-89,-21,119,127,-3,12,-44,-13,74,-59,37,-46,57,83,112,-91,-63,-80,83,84,97,-43,-44,4,-45,70,47,8,-19,79, 
  /* [23][0][][] */ 77,-88,-8,56,91,-92,-10,-80,68,-53,86,59,28,-96,35,-26,105,1,-92,101,97,-87,92,-22,-19,7,94,12,42,39,73,-13,-39,56,24,32,76,-36,-102,35,-100,-25,6,-88,-50,-84,127,13,69,-84,-92,-66,51,-64,-59,88,-68,-2,76,45,-118,-74,-64,-40,28,47,-107,-79,70,8,125,-57,8,-50,-31,-99,32,-25,89,95,-56,-66,36,-100,86,2,104,-35,-96,29,110,6,115,-60,-36,50, 
  /* [24][0][][] */ -68,-5,-71,-77,-63,-102,-54,-59,66,92,73,14,95,50,-27,-90,-81,17,3,-52,84,-54,-37,-29,47,-29,62,73,86,85,-6,-70,7,6,43,33,-15,-91,62,14,-62,-83,83,22,18,-54,39,61,-117,-43,-1,35,67,77,29,-60,9,71,31,3,94,4,13,82,-73,88,-32,-80,-77,49,-58,-17,-31,9,89,67,56,-57,-66,-60,-61,-99,-78,-127,2,52,-17,-63,37,-74,-14,-51,-10,38,-85,1, 
  /* [25][0][][] */ -85,-70,-98,-23,78,-87,-113,65,33,-108,-55,7,65,-8,-114,-27,-75,62,37,-113,48,75,-25,-65,9,-49,-103,21,64,-101,29,94,83,-116,39,54,93,-68,-20,-21,-96,88,-113,-6,90,36,68,26,-100,90,-81,-10,32,-40,-67,7,-34,43,-117,53,101,28,38,34,-10,58,-26,-17,-108,-11,-24,-124,36,-124,66,10,52,73,3,4,31,31,-45,76,-84,-51,-117,-98,-32,-42,94,11,-127,-34,-32,-90, 
  /* [26][0][][] */ 45,-117,-33,-24,-104,-13,-20,-57,-115,-127,94,78,-85,-52,6,-26,102,4,-76,-77,5,71,84,7,57,55,-10,41,12,-4,-98,-7,-33,-66,-107,-104,-80,74,-70,78,-105,92,50,11,-77,73,-55,88,-26,27,-17,99,0,-59,-11,-113,93,41,41,24,-9,-100,60,-31,98,-24,-70,47,-94,55,80,82,67,-103,-103,5,46,-111,-106,1,-39,71,90,-60,72,-3,-53,-11,-88,102,3,9,-59,98,47,84, 
  /* [27][0][][] */ 4,6,-71,-110,-127,-77,-77,-22,36,92,30,-114,-35,49,74,-33,62,-23,55,-89,-101,4,-33,-29,-109,38,-113,-7,58,21,-40,-17,53,61,-98,-95,-91,-72,-118,85,-102,12,26,13,92,20,62,99,87,60,53,-75,-96,-94,-13,-41,95,-30,-116,-85,-59,-69,-40,47,33,-54,-120,98,41,7,-125,0,55,-57,-15,-94,44,-54,85,99,78,-35,113,-5,-79,-87,-38,29,-55,-8,-42,-59,48,10,80,49, 
  /* [28][0][][] */ 72,-14,77,38,-112,-47,-94,-42,-12,-100,45,63,-79,-81,1,96,84,91,-56,63,-31,15,-101,-85,-76,60,-63,-72,-64,-43,-1,-21,-122,5,57,51,48,-77,-25,32,77,33,-58,45,-85,-2,5,54,21,-62,93,-30,-72,12,59,23,31,-13,65,40,-23,-45,-66,2,51,52,-12,66,-69,28,-97,-42,53,80,-2,-78,-102,41,-78,33,-66,-82,127,-1,50,-98,49,-52,-101,-17,-29,-67,-33,48,28,-41, 
  /* [29][0][][] */ 51,40,54,-47,-87,14,-122,2,100,-14,-90,-87,99,-103,-44,-47,-89,100,52,-61,-67,-32,45,4,-19,8,-39,-41,-89,-11,102,-1,45,-2,-80,-53,-21,114,-16,83,43,101,-54,71,2,116,-55,-22,32,-2,55,-92,65,-106,127,45,-95,49,-64,99,-115,90,-85,-55,-61,-66,54,83,92,-93,36,-71,102,88,50,33,114,-47,-38,26,-7,-65,14,-49,55,120,41,78,-44,95,71,73,-92,20,6,82, 
  /* [30][0][][] */ 16,-64,-74,19,-103,14,-69,-13,103,-26,-4,-46,-110,4,46,4,-18,29,79,-117,27,-106,-120,4,-111,12,-81,112,-19,-107,-96,-3,-94,-80,-127,-64,14,-31,-6,24,89,-84,-19,91,88,-58,89,52,-70,57,13,-103,88,-53,-26,88,-82,-61,-82,-57,-111,-14,-77,-34,-114,-93,-104,77,-72,94,30,-44,-98,94,36,-98,-67,-78,-79,-69,16,9,-111,-24,-111,15,-113,94,-38,-119,60,45,-48,-17,3,-85, 
  /* [31][0][][] */ 76,-99,33,92,42,56,-64,-104,-36,-26,-83,-90,91,-125,-50,108,-61,-98,57,37,57,32,-40,96,39,-119,31,32,-72,-74,42,103,9,14,-96,-13,84,-38,-73,-115,51,-75,-33,24,-3,-52,-46,18,58,23,82,-33,-120,-62,-80,18,-120,61,-4,107,-38,-9,84,-79,59,104,-46,-79,68,-125,-127,1,-101,-51,-3,6,-62,-60,39,81,-80,-42,52,70,52,86,-101,13,9,-63,-87,-60,15,110,-20,-28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019813249818980694, 0.0019844966009259224, 0.0018431232310831547, 0.0019961970392614603, 0.0019580191001296043, 0.0018912354717031121, 0.0018228837288916111, 0.0020222151651978493, 0.0019893893040716648, 0.0022806597407907248, 0.001845434308052063, 0.0023653572425246239, 0.0022089048288762569, 0.0019801410380750895, 0.0018601402407512069, 0.0019422421464696527, 0.001878901501186192, 0.0025811137165874243, 0.0033159509766846895, 0.0017944261198863387, 0.0018147295340895653, 0.0019703290890902281, 0.0020162235014140606, 0.0019558134954422712, 0.0022762122098356485, 0.0018562255427241325, 0.0018694460159167647, 0.0018103764159604907, 0.0021271128207445145, 0.0018784963758662343, 0.0018425259040668607, 0.0018700662767514586, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1569, -186, 3299, 5461, 4718, -2908, 3470, -1341, -2111, -842, 6433, -3312, 5739, 7312, 1787, 2824, -647, -322, -2321, 6634, 2303, -644, 2121, -271, -1065, 3393, 1319, 2108, 5006, 1870, 4465, 1221, 2073, 6803, 4496, 3319, -652, 4234, 2677, -3750, -406, 1674, -65, 2035, -1346, 643, -1211, 866, -7405, 1560, 1044, -2978, 6359, -896, 3755, 1370, 1151, 2794, -877, -2681, 297, 1685, 512, 3695, 4594, 4441, 3389, 4773, 3815, -940, 3265, 6537, 3852, -2070, 4844, 7744, 852, -3622, 650, 1288, 8360, 2296, -336, -2061, 975, 940, 1957, -2005, 4160, -491, 4676, 1465, 359, -3980, -38, 2643, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00013463593495544046, 0.00025688990717753768, 0.00017842528177425265, 0.00014353737060446292, 0.00013893668074160814, 0.00014401978114619851, 0.00016113732999656349, 0.00017982214922085404, 0.0001887107064248994, 0.00020438860519789159, 9.8917989816982299e-05, 0.00013987136480864137, 9.8138720204588026e-05, 8.2508951891213655e-05, 0.00015512415848206729, 0.00014377724437508732, 0.00018252452719025314, 0.00018870984786190093, 0.00012553393025882542, 9.3453629233408719e-05, 0.00018687792180571705, 0.0002276062878081575, 0.0001618990208953619, 0.00018333170737605542, 0.00019686343148350716, 0.00018335790082346648, 0.00019047809473704547, 0.0001679373235674575, 0.0001447217509848997, 0.00020681037858594209, 0.00011276187433395535, 0.0001968429860426113, 0.00014227234350983053, 9.294457413488999e-05, 0.00014399447536561638, 0.0001465976529289037, 0.00014854033361189067, 0.00011246385838603601, 0.00012061446614097804, 0.00013769774523098022, 0.0001294945104746148, 0.00014531271881423891, 0.00020465985289774835, 0.0001478089252486825, 0.00015238934429362416, 0.00012141903425799683, 0.00018622660718392581, 0.00014938748790882528, 9.4642782642040402e-05, 0.0001745684421621263, 0.0002151674561901018, 0.00014889761223457754, 0.00011083116987720132, 0.00020107724412810057, 0.00012450569192878902, 0.00018074152467306703, 0.00014170592476148158, 0.00014942491543479264, 0.00020439212676137686, 0.00011395447654649615, 0.00018400250701233745, 0.0001500575162936002, 0.00022900503245182335, 0.00017592907533980906, 0.00013861969637218863, 9.8729287856258452e-05, 0.0001113364050979726, 0.00015292750322259963, 0.00017343882063869387, 0.00014661940804217011, 0.00015704921679571271, 0.00010710401693359017, 0.00011816719052148983, 0.00011575291864573956, 0.00014469503366854042, 0.00010546515841269866, 0.00014607601042371243, 0.0001661717687966302, 0.00017941495752893388, 0.00016073173901531845, 0.00010396308789495379, 0.00013161492825020105, 0.00017583392036613077, 0.00018946202180813998, 0.00018339954840485007, 0.00013552993186749518, 0.00015183424693532288, 0.00016931050049606711, 0.00015069906658027321, 0.00017524667782709002, 0.00012610158591996878, 0.00017736548034008592, 0.00020308871171437204, 0.0001092450474970974, 0.00022515103046316653, 0.00011750799603760242, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -12,73,-84,4,42,-39,91,63,-46,0,34,-94,65,127,-53,28, 
  /* [1][0][][] */ -28,13,-56,-22,-25,47,18,-127,24,-36,-22,-50,-7,-44,-49,-2, 
  /* [2][0][][] */ -29,-30,22,61,20,47,-98,127,-25,3,69,-63,-19,-65,-52,70, 
  /* [3][0][][] */ 97,-88,98,-10,6,-22,-40,127,-20,76,56,62,-5,58,5,-10, 
  /* [4][0][][] */ -45,-28,-20,27,-82,23,-21,-110,-18,-23,35,-26,26,71,97,127, 
  /* [5][0][][] */ 127,13,-29,-33,-83,17,38,82,14,-12,77,105,122,32,-97,2, 
  /* [6][0][][] */ -6,-72,-84,-68,-105,10,1,-38,-57,-50,-43,22,82,54,127,-8, 
  /* [7][0][][] */ -53,34,-13,-74,16,-56,-65,17,-84,48,-52,-55,-127,-24,16,87, 
  /* [8][0][][] */ 33,37,82,7,52,35,67,-1,74,-11,20,-2,-127,-32,-76,11, 
  /* [9][0][][] */ -38,66,30,-35,-33,-12,26,-15,-42,54,-45,17,40,127,24,24, 
  /* [10][0][][] */ 56,40,-46,36,-44,-5,59,-44,-67,-38,-51,-119,-127,-61,-9,106, 
  /* [11][0][][] */ 43,0,61,18,-27,-26,15,121,-96,26,-45,-6,-13,-8,67,127, 
  /* [12][0][][] */ -77,-30,-9,0,6,18,127,45,-71,32,-12,-29,-24,82,-58,115, 
  /* [13][0][][] */ -25,27,26,74,80,88,115,88,-34,116,-127,-105,54,34,-115,-46, 
  /* [14][0][][] */ -100,119,17,-31,12,-21,60,-6,-35,45,127,5,-103,42,-24,41, 
  /* [15][0][][] */ 8,-5,-127,-38,102,-45,-95,-32,-29,-25,-13,-50,4,-69,-53,38, 
  /* [16][0][][] */ 108,-27,0,-21,24,-26,50,-19,-42,3,127,33,55,10,-39,21, 
  /* [17][0][][] */ 7,4,-24,-87,9,-60,127,-106,13,-11,-42,18,41,88,4,59, 
  /* [18][0][][] */ 46,127,-32,-43,69,-88,-53,-72,-63,117,-40,18,-11,54,-3,-52, 
  /* [19][0][][] */ -89,-127,110,-117,36,-120,43,-44,57,39,85,102,20,-7,57,-33, 
  /* [20][0][][] */ -28,81,53,6,10,15,26,-23,58,-4,91,-35,-127,-18,-80,0, 
  /* [21][0][][] */ -55,35,14,34,66,16,54,59,-127,52,-44,33,-1,-11,-42,-48, 
  /* [22][0][][] */ 9,-89,34,-4,26,-127,113,-2,28,-53,-37,-75,35,-78,-66,-37, 
  /* [23][0][][] */ -61,-92,40,39,17,-10,32,-38,7,-34,56,-6,-7,82,64,127, 
  /* [24][0][][] */ 4,2,2,84,33,23,-60,-127,63,19,-37,18,7,-11,-17,-28, 
  /* [25][0][][] */ -15,26,13,-52,-32,1,15,-23,-17,50,-36,-18,30,127,12,15, 
  /* [26][0][][] */ -67,72,16,11,27,-84,-1,-34,17,23,2,53,-4,12,-87,127, 
  /* [27][0][][] */ -35,-127,-58,15,-71,99,-6,-64,7,-28,47,-32,30,-65,-98,-23, 
  /* [28][0][][] */ -23,8,34,104,28,10,-41,-127,-109,43,91,-11,81,4,-29,-42, 
  /* [29][0][][] */ -127,107,-36,-16,-43,29,-116,-81,-44,-30,-16,-8,13,-71,-110,60, 
  /* [30][0][][] */ 72,94,-47,67,-94,-99,-78,-18,-22,15,22,-107,127,54,-11,97, 
  /* [31][0][][] */ 127,38,-51,-1,-54,23,88,16,-59,-21,53,50,50,2,-13,-5, 
  /* [32][0][][] */ -52,-25,127,18,-37,100,79,16,-31,-13,-23,11,9,67,71,32, 
  /* [33][0][][] */ -20,16,-80,-58,-33,38,127,29,0,-12,23,-77,79,121,-48,54, 
  /* [34][0][][] */ -108,-38,82,17,11,-46,104,-5,-127,28,33,-53,42,44,-52,-23, 
  /* [35][0][][] */ -11,15,-62,19,-73,127,-25,-10,-26,108,2,73,-67,71,9,34, 
  /* [36][0][][] */ -25,-103,127,-51,-80,28,-51,-21,9,22,-70,89,6,-118,-53,57, 
  /* [37][0][][] */ 75,-17,54,-16,103,-71,-59,33,-55,127,-64,5,-73,-54,100,-35, 
  /* [38][0][][] */ 39,52,14,-105,-36,-41,-112,45,-90,72,-118,-57,-64,-127,-112,58, 
  /* [39][0][][] */ -91,11,-75,-44,-74,-88,72,9,-127,-31,34,91,24,1,1,56, 
  /* [40][0][][] */ 127,58,-8,-91,-109,59,30,-34,-66,-41,-57,-122,34,73,44,42, 
  /* [41][0][][] */ 79,-103,-86,-49,-6,-6,-70,-17,70,-13,5,-53,127,-99,70,-48, 
  /* [42][0][][] */ -23,-100,-44,127,-7,-87,-97,27,-10,-20,9,53,-104,93,-89,13, 
  /* [43][0][][] */ -82,-38,-46,-127,-47,-1,2,75,31,-116,-30,30,-19,-36,-28,102, 
  /* [44][0][][] */ -47,14,17,-57,-38,-23,43,127,82,-83,70,79,98,60,-19,10, 
  /* [45][0][][] */ 36,87,-71,98,127,-90,-54,-78,96,-64,58,-47,-8,8,-54,46, 
  /* [46][0][][] */ -6,-32,7,-25,106,-27,35,14,4,113,-21,-127,28,70,-49,79, 
  /* [47][0][][] */ 70,-47,-40,-9,64,-2,-44,-69,-3,120,-34,21,-16,-127,-80,17, 
  /* [48][0][][] */ 9,17,-13,-127,-16,-46,119,-126,-2,-2,-51,30,42,68,-23,40, 
  /* [49][0][][] */ -17,127,-65,24,43,-43,54,40,-15,36,25,-80,-32,65,127,-101, 
  /* [50][0][][] */ 14,46,-21,-1,-127,-1,-73,-63,49,70,26,29,-36,-41,-2,36, 
  /* [51][0][][] */ 127,-53,-72,-30,-69,105,-89,-52,59,-22,-55,56,-37,-87,-15,55, 
  /* [52][0][][] */ -44,-59,38,105,-60,-94,-127,-27,-50,-57,-54,-81,23,-89,3,80, 
  /* [53][0][][] */ -2,91,52,-101,-6,127,74,-29,-14,-11,-30,-42,77,-116,-1,24, 
  /* [54][0][][] */ 31,117,8,-21,9,-85,-119,41,15,-18,-56,127,91,78,21,42, 
  /* [55][0][][] */ -26,-1,56,30,56,-38,96,79,-70,-8,14,14,127,47,-26,-5, 
  /* [56][0][][] */ 99,5,14,39,-57,127,-44,-65,-34,50,-92,-12,-58,94,-16,37, 
  /* [57][0][][] */ -62,-50,-69,-56,-90,-95,59,-12,-127,-26,52,41,24,34,-7,61, 
  /* [58][0][][] */ 59,-55,52,33,1,-66,-17,26,7,-23,-127,-31,28,-27,-25,49, 
  /* [59][0][][] */ 60,-2,-127,97,-5,56,80,-25,-88,-54,11,-115,-114,-62,22,95, 
  /* [60][0][][] */ -16,18,-26,13,-34,-29,-19,21,-42,-88,67,126,-50,-127,-46,10, 
  /* [61][0][][] */ -24,33,90,-93,-63,59,-9,113,-16,-82,53,64,90,3,25,127, 
  /* [62][0][][] */ 70,47,-26,-127,-35,21,17,-35,-17,34,-47,40,25,-24,-88,-70, 
  /* [63][0][][] */ -21,-37,-6,-6,-84,-59,-49,4,-66,-11,-43,-34,127,-9,41,-9, 
  /* [64][0][][] */ 35,0,-12,61,-92,-48,-30,-108,72,127,33,-5,34,-54,-46,105, 
  /* [65][0][][] */ -40,0,-18,-29,-81,84,22,-32,49,-121,94,-81,63,74,-127,72, 
  /* [66][0][][] */ -103,109,-81,-63,53,-28,-121,-73,-79,127,88,22,-85,-65,56,38, 
  /* [67][0][][] */ 3,-35,-124,-127,73,74,14,-27,-27,-4,52,-29,27,53,23,62, 
  /* [68][0][][] */ 62,19,-6,-50,-44,22,23,45,-59,52,127,-11,-7,-11,-100,12, 
  /* [69][0][][] */ 80,-105,35,-70,17,-123,-28,127,-2,58,88,90,-23,95,-26,-6, 
  /* [70][0][][] */ 57,-12,109,19,100,-27,127,12,47,18,-63,23,-71,79,-71,46, 
  /* [71][0][][] */ -3,20,78,-55,-127,-63,13,5,-21,-11,8,-99,-69,-9,9,25, 
  /* [72][0][][] */ -68,-98,18,-96,58,-2,7,38,-69,13,-127,-29,48,99,-62,118, 
  /* [73][0][][] */ 16,12,39,-2,127,-98,-43,10,-33,95,-81,37,-88,-51,126,-11, 
  /* [74][0][][] */ -118,2,-127,-48,39,-23,-35,15,-78,0,-110,-49,-36,-71,-36,71, 
  /* [75][0][][] */ 78,-24,41,-29,5,16,-127,-26,-4,-89,51,1,3,-31,2,-19, 
  /* [76][0][][] */ 5,-6,-26,127,50,101,93,-53,76,-127,70,114,49,-91,-52,16, 
  /* [77][0][][] */ -37,-34,127,-17,23,-29,-10,-105,25,20,27,68,35,43,3,11, 
  /* [78][0][][] */ -59,5,-4,-20,-13,-29,27,-19,14,-10,2,-99,-86,-82,-127,-40, 
  /* [79][0][][] */ -127,-87,-41,38,88,45,-8,15,10,24,-36,28,-42,-97,-79,1, 
  /* [80][0][][] */ -8,-127,37,96,-38,-24,-91,87,-18,19,71,-7,-86,2,-32,81, 
  /* [81][0][][] */ 93,54,-7,118,4,46,17,127,12,12,93,58,117,9,71,-33, 
  /* [82][0][][] */ -50,-2,15,-44,45,-116,-98,-70,4,61,-43,-46,-39,127,-82,-30, 
  /* [83][0][][] */ 100,-10,79,-20,-27,-10,-127,-19,16,-104,5,-30,-10,-4,22,-48, 
  /* [84][0][][] */ 19,-56,-83,21,127,35,38,26,-102,29,-90,-18,29,-23,-70,11, 
  /* [85][0][][] */ 1,86,52,-52,93,-5,57,-114,127,-55,39,-26,111,-106,28,14, 
  /* [86][0][][] */ 127,-30,125,42,14,-59,85,45,-56,-60,-83,-48,31,29,-76,21, 
  /* [87][0][][] */ 0,12,17,-78,76,-27,-42,20,38,-34,82,-44,-87,-127,5,21, 
  /* [88][0][][] */ -65,-35,29,7,11,34,-57,-39,-13,12,-72,-127,-37,-43,-20,-11, 
  /* [89][0][][] */ -65,14,5,-65,11,3,-127,13,84,28,-70,-12,-7,-85,-37,-25, 
  /* [90][0][][] */ -23,-17,-36,-75,127,27,-46,38,53,57,23,-28,27,12,-84,-18, 
  /* [91][0][][] */ -28,-43,10,17,-19,-19,-1,58,-27,-44,47,-29,-12,65,14,127, 
  /* [92][0][][] */ -20,60,-5,-26,-18,43,-71,46,-35,-23,68,-5,-38,127,46,36, 
  /* [93][0][][] */ 5,104,-72,-71,80,97,-114,7,78,71,100,82,-127,5,-47,67, 
  /* [94][0][][] */ 47,71,103,16,-127,-46,20,0,24,-23,42,-13,-60,-22,36,-29, 
  /* [95][0][][] */ -6,48,15,16,127,-13,-109,87,19,-3,-74,110,-3,5,111,-54, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.001758653437718749, 0.0033555699046701193, 0.0023306424263864756, 0.0018749265000224113, 0.0018148310482501984, 0.0018812278285622597, 0.0021048223134130239, 0.0023488886654376984, 0.0024649936240166426, 0.0026697828434407711, 0.0012920952867716551, 0.0018270399887114763, 0.0012819162802770734, 0.0010777557035908103, 0.0020262764301151037, 0.0018780598184093833, 0.0023841878864914179, 0.0024649824481457472, 0.0016397603321820498, 0.0012207182589918375, 0.0024410532787442207, 0.0029730589594691992, 0.0021147716324776411, 0.0023947316221892834, 0.0025714868679642677, 0.0023950736504048109, 0.0024880797136574984, 0.0021936458069831133, 0.0018903971649706364, 0.0027014168445020914, 0.0014729280956089497, 0.0025712198112159967, 0.0018584023928269744, 0.0012140688486397266, 0.001880897325463593, 0.0019149007275700569, 0.0019402765901759267, 0.0014690352836623788, 0.001575500937178731, 0.0017986476887017488, 0.0016914946027100086, 0.0018981165485456586, 0.0026733260601758957, 0.0019307228503748775, 0.0019905534572899342, 0.0015860104467719793, 0.0024325456470251083, 0.0019513423321768641, 0.0012362513225525618, 0.0022802632302045822, 0.0028105792589485645, 0.0019449435640126467, 0.0014477086951956153, 0.0026265289634466171, 0.0016263292636722326, 0.0023608978372067213, 0.0018510036170482635, 0.0019518313929438591, 0.0026698289439082146, 0.0014885062118992209, 0.0024034937378019094, 0.0019600945524871349, 0.0029913296457380056, 0.0022980363573879004, 0.0018106905044987798, 0.0012896304251626134, 0.0014543081633746624, 0.0019975830800831318, 0.0022655078209936619, 0.0019151850137859583, 0.0020514221396297216, 0.0013990235747769475, 0.0015435338718816638, 0.0015119980089366436, 0.001890048268251121, 0.0013776163104921579, 0.0019080869387835264, 0.0021705834660679102, 0.0023435698822140694, 0.0020995242521166801, 0.0013579957885667682, 0.001719192136079073, 0.0022967932745814323, 0.0024748074356466532, 0.00239561777561903, 0.0017703310586512089, 0.0019833026453852654, 0.0022115826141089201, 0.001968474593013525, 0.0022891226690262556, 0.0016471752896904945, 0.0023167990148067474, 0.0026528032030910254, 0.0014269902603700757, 0.0029409877024590969, 0.0015349233290180564, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 2031, 7205, -936, -575, -5910, 10317, 5210, 1167, 15848, -8729, -9769, 2043, -17503, 9259, -906, 15617, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.4965505367144942e-05, 8.3047678344883025e-05, 4.3157178879482672e-05, 7.1265363658312708e-05, 7.7241878898348659e-05, 9.1713052825070918e-05, 6.5573396568652242e-05, 5.9842641348950565e-05, 0.0001038226910168305, 7.6240408816374838e-05, 7.4255978688597679e-05, 7.2021975938696414e-05, 8.8755346951074898e-05, 8.0438003351446241e-05, 0.00010150023445021361, 0.00010475160524947569, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -111,63,45,-42,-66,-31,-85,-4,-24,29,22,-41,47,51,21,-37,6,0,127,23,37,-77,126,86,65,35,24,52,-81,-124,-78,23,-47,-35,34,33,-19,60,1,62,-2,1,-95,31,-105,-30,-4,89,2,30,-66,-24,16,-34,28,-67,-122,20,-2,116,99,26,19,0,-39,-93,-53,60,-48,-49,13,14,-17,27,-94,-55,-37,11,-36,7,-57,100,103,-88,-6,74,34,76,26,-11,-3,-66,-27,-46,-53,20, 
  /* [1][0][][] */ 37,19,4,-44,-64,-19,-19,6,1,33,88,-48,16,10,-77,-25,-13,-9,-46,41,-4,-84,15,52,7,-46,6,-26,66,-94,117,-60,64,47,-30,52,19,82,-22,-11,35,24,-11,1,7,76,-127,-54,-43,-31,-13,-24,52,-57,-44,51,21,16,-21,12,33,38,-3,-94,-4,-34,-61,0,15,13,-85,8,-74,-4,18,-75,17,12,33,-66,-15,-20,-79,-42,20,-34,-13,20,-75,3,-43,18,22,67,-46,59, 
  /* [2][0][][] */ 95,-37,21,30,34,-85,78,20,13,-26,-27,-1,-81,-41,19,-35,-113,-46,-44,31,30,-45,-71,48,-5,-75,-7,-14,-40,63,-68,127,-68,120,-31,26,-10,-24,-6,-10,-106,79,78,31,-86,-1,-25,-29,34,-3,-36,-49,72,-20,-32,61,43,-1,41,-24,-5,50,-49,15,65,35,-17,-7,22,63,-41,8,55,49,74,29,43,-72,69,53,89,-21,-71,42,-75,11,20,73,9,7,-36,44,-42,46,-9,42, 
  /* [3][0][][] */ 7,-7,-35,19,23,-28,-8,-58,-12,93,72,63,32,-5,-67,50,1,-32,55,14,10,127,7,-45,17,22,2,8,83,-46,72,-16,-14,57,-17,-37,21,64,32,24,-91,-32,-39,32,-28,46,17,0,-12,-40,-12,-27,52,-96,-23,-57,3,111,-26,5,6,-18,-25,-1,29,36,-34,12,-3,17,6,-60,-58,-32,29,-1,22,16,-27,-49,-32,1,-75,6,-18,-48,45,-35,0,31,36,-37,58,39,-36,72, 
  /* [4][0][][] */ 32,34,-57,18,43,9,-54,21,-13,93,122,-16,-1,13,-10,-57,0,-9,-46,46,44,-59,47,86,-63,23,-127,40,-51,-56,28,1,-69,-53,7,68,5,46,31,37,-28,-46,56,-14,-20,17,-27,52,-42,67,10,16,68,-46,-75,29,57,-10,15,4,66,-10,36,-6,-59,20,-46,37,-54,46,-50,62,29,-48,-57,-65,37,-44,-4,13,-37,110,-85,1,-27,28,25,-39,63,20,30,-4,-48,-29,32,8, 
  /* [5][0][][] */ -84,7,63,22,56,-23,63,-25,-26,29,-2,-17,34,-21,2,-25,-9,-26,58,26,-127,-14,-96,47,-46,-29,39,5,67,-69,-48,68,58,126,-16,19,1,0,25,-21,-34,89,74,-28,24,83,43,1,-20,21,-22,46,3,-36,39,-92,16,-70,-72,-71,36,90,-54,-11,92,-32,-97,-96,-60,-8,-58,-34,-41,-5,-5,-38,9,-30,-45,-50,111,-37,10,-84,-93,40,35,-33,-80,26,19,8,-28,51,-13,85, 
  /* [6][0][][] */ 33,-1,-66,21,-37,-95,100,87,-78,44,-42,66,-127,-82,66,30,-7,-50,-30,-12,-2,-11,-40,-59,-65,54,58,26,11,13,83,-65,7,-1,14,-58,25,6,45,55,5,21,-46,-37,-10,-71,-68,25,28,-125,-20,72,31,16,-25,-64,73,29,9,-18,-111,55,-101,1,18,31,-1,57,21,5,6,-38,-17,20,77,23,59,-37,45,-53,-1,-49,-59,72,13,-73,26,18,-29,62,36,37,-20,-14,-32,97, 
  /* [7][0][][] */ 40,114,-42,-75,-29,-15,45,13,-64,27,-68,-64,-48,11,10,-31,-51,-37,-48,43,8,121,28,30,-13,4,20,27,32,40,90,-52,65,17,-25,23,-1,7,30,41,-67,6,16,-60,5,-64,68,-31,62,-102,-97,-38,-35,3,-10,-12,39,17,-103,1,3,127,19,-38,-32,-7,-28,49,-45,-36,-100,47,37,101,-50,42,-35,38,20,-60,-7,-49,94,-76,63,-26,-30,17,13,80,-74,28,65,-57,-35,8, 
  /* [8][0][][] */ -7,71,-57,61,-34,-29,-93,23,-91,-22,17,10,-32,46,31,102,1,-60,7,26,34,1,-19,-4,-22,78,8,27,-6,-7,-53,-12,-22,-46,-27,-76,-39,36,41,-4,12,-47,34,11,-36,-23,8,-19,-30,-4,57,71,-2,-34,-81,102,-35,29,0,-28,-37,-6,12,63,-30,-71,-57,-20,-36,31,18,17,-25,-62,-127,-25,-55,34,-76,-40,-31,8,-67,-27,-15,-11,36,35,5,68,-66,-12,-84,-112,10,-54, 
  /* [9][0][][] */ -19,22,-92,43,-15,-43,66,57,26,59,7,100,-15,-7,14,127,20,19,79,19,27,7,22,-92,-27,10,29,0,4,3,51,60,-27,-11,-10,-115,11,-20,-27,-14,-9,19,37,-12,-21,13,11,17,44,108,12,-12,-47,-100,-5,2,1,-10,79,-8,-44,54,-33,-32,83,-20,-33,25,-63,25,32,29,-19,96,-21,-29,-34,29,-40,-21,49,-16,55,-12,29,-13,-8,-42,-62,22,-2,-6,75,43,-41,-11, 
  /* [10][0][][] */ 72,23,-46,-22,-32,-21,64,4,17,-26,-35,-10,-79,-31,-3,-16,-69,-28,2,6,54,18,34,-4,-38,87,34,0,-58,-77,-14,-17,49,-28,36,24,60,-50,86,127,12,-38,3,8,-44,-95,-11,43,53,59,-67,-42,-5,12,-4,41,36,-45,63,61,0,50,-60,-28,-9,-59,23,81,22,-35,-11,61,117,47,6,-74,40,-62,55,8,-23,28,58,18,-30,2,10,52,-24,-12,38,37,42,38,-24,4, 
  /* [11][0][][] */ -38,-16,15,-85,15,-30,-34,-58,80,-21,38,-15,12,2,-11,8,-60,-9,65,11,-35,11,-82,-87,37,24,-24,46,29,-45,50,-29,31,12,18,10,-95,42,-115,55,-71,74,-57,70,-5,7,-9,-58,53,-28,-74,-66,28,15,69,-68,-21,-37,19,-16,-1,-64,-2,-127,3,-97,77,107,126,34,53,4,-51,0,56,-30,103,47,34,36,32,2,-17,70,70,40,11,2,-75,-51,1,2,55,46,60,77, 
  /* [12][0][][] */ 40,-17,-17,-43,18,81,-20,22,54,64,30,44,23,52,5,1,-50,33,14,45,127,-14,46,-62,29,18,-50,-49,-27,83,15,18,33,-2,15,-29,25,12,-27,-13,18,-17,36,66,-27,39,-4,-8,-37,40,-7,15,-5,-41,3,17,-39,61,12,62,49,-79,37,-89,-7,57,-12,-17,10,-34,43,27,-7,19,-10,39,-3,38,-66,-12,-14,38,113,13,5,91,-15,-41,51,12,-60,30,61,5,-19,-77, 
  /* [13][0][][] */ -2,57,-11,-58,-31,-3,8,-27,0,-46,-71,-73,50,-117,-45,-91,-23,-31,-94,-38,-77,-40,44,96,-40,16,100,12,-3,-47,66,17,-9,-12,-120,127,-29,-32,52,-65,109,10,-5,26,-20,-114,62,-37,94,-35,-41,19,50,-5,-15,70,84,-45,-41,-3,51,61,-11,-83,-14,25,-9,60,-69,-52,-66,25,-37,37,-55,-89,-76,-20,44,98,13,57,74,-79,65,42,13,12,6,-14,1,2,-51,-24,-5,-1, 
  /* [14][0][][] */ -3,33,-90,-39,89,83,-86,-9,60,-28,97,-1,22,-24,-51,-60,-66,25,44,127,14,-39,-11,15,19,29,-9,73,10,9,-16,12,68,1,-49,7,-37,54,61,38,62,7,19,22,-18,-52,44,-55,49,-15,-9,-29,72,1,-48,25,15,75,-82,-1,3,-60,-21,-103,9,-64,-37,11,-68,60,-31,43,-12,-17,-19,-28,53,-25,-44,-41,34,13,11,-21,-13,52,2,-2,-38,65,65,-5,-4,-39,-32,-59, 
  /* [15][0][][] */ -69,-32,52,-61,9,-15,-23,-75,-26,-4,-50,61,-18,-28,46,71,-99,-23,-13,-82,21,-14,21,-80,37,2,31,-64,-70,-125,-68,3,-46,30,63,-76,9,-37,39,-51,-23,0,40,-25,-8,-21,71,94,-50,-37,22,-50,-48,64,7,-60,-85,-32,83,0,-36,30,-107,25,-64,22,11,23,31,-99,88,-31,85,-44,-37,-48,5,-6,47,33,-5,61,73,41,5,-29,-127,12,8,-54,-70,46,42,-49,-23,52, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0019110338762402534, 0.0035295262932777405, 0.0018341800896450877, 0.0030287778936326504, 0.0032827798277139664, 0.0038978047668933868, 0.00278686941601336, 0.0025433122646063566, 0.0044124643318355083, 0.0032402174547314644, 0.0031558789778500795, 0.0030609339009970427, 0.0037721022963523865, 0.0034186150878667831, 0.0043137599714100361, 0.0044519430957734585, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 2140, 315, -4392, -5820, -2318, 2683, -383, 641, -2105, -1977, 11799, -4112, -578, 10436, 9528, -4744, 15158, 3928, -4193, -1137, 1204, 689, 945, -1710, 361, -2976, -857, -3793, 484, -7743, 918, 635, 7456, -2904, 1276, -4, 1136, -1604, -181, 8240, 342, -770, 673, -3341, 11433, 22149, -28, 16292, -3897, 13466, 6624, -4504, -720, -216, 973, 8726, -1431, 10, 14541, 4416, 9368, 9826, 10978, -8444, -851, -1729, -1840, 3511, -2860, -3596, 1974, 338, 14680, 371, -1196, 10127, -645, -336, 8691, -2866, 981, 12487, -442, 956, 14517, -1720, -4562, -3624, -2301, -5722, 11240, 482, 3552, -1235, -2212, -3263, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00020042974210809916, 0.00022708969481755048, 0.00011614073446253315, 0.00010944152745651081, 0.00024270222638733685, 0.0002046391018666327, 0.00028461680631153286, 0.00023580803826916963, 0.00016888682148419321, 0.00018682052905205637, 0.00013959922944195569, 0.00018898457346949726, 0.00025214935885742307, 0.00013953467714600265, 0.00013798882719129324, 0.00017026595014613122, 0.00010513351298868656, 0.00024370748724322766, 0.00022989722492638975, 0.00012072880781488493, 0.00021572211699094623, 0.00033602045732550323, 0.00015171222912613302, 0.00024116996792145073, 0.00065609364537522197, 0.00019495721790008247, 0.00022465725487563759, 0.000158051130711101, 0.00016860506730154157, 9.8830561910290271e-05, 0.00027909845812246203, 0.0002425818529445678, 0.00021710606233682483, 0.00015224998060148209, 0.0002479423419572413, 0.00038365143700502813, 0.00020315431174822152, 0.0003423154994379729, 0.00031948246760293841, 0.00016019017493817955, 0.00018309056758880615, 0.00022824470943305641, 0.00022527766122948378, 0.00018900874420069158, 0.00012996169971302152, 7.8874058090150356e-05, 0.00021105320774950087, 7.5179777923040092e-05, 0.00022450626420322806, 0.00011078112584073097, 0.00011064204591093585, 0.00011808052659034729, 0.00021418528922367841, 0.00016835937276482582, 0.00026277953293174505, 0.00016979614156298339, 0.00019046156376134604, 0.00020740415493492037, 0.00012680274085141718, 0.00011860572703881189, 0.0001487775007262826, 0.0001995927159441635, 0.00018213248404208571, 0.00012402214633766562, 0.00017431702872272581, 0.0003860068682115525, 0.00029402010841295123, 0.0002553967060521245, 0.00016177786164917052, 0.00016839925956446677, 0.00018401551642455161, 0.00012181766214780509, 0.00011033012560801581, 0.00021789962192997336, 0.00032369777909480035, 0.00013024733925703913, 0.00016918427718337625, 0.00021705594554077834, 0.00014708389062434435, 0.00020717144070658833, 0.00021438987459987402, 9.7001029644161463e-05, 0.00022030873515177518, 0.00015653041191399097, 9.3595946964342147e-05, 0.0001971032761503011, 0.00012352154590189457, 0.00018430469208396971, 0.00039008533349260688, 0.00017119687981903553, 0.000115673836262431, 0.00034451691317372024, 0.00016628246521577239, 0.00028172900783829391, 0.00014636323612648994, 0.00029923478723503649, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 18,100,1,86,-34,-1,47,41,89,-72,-52,51,-24,-18,14,-11,-127,7,29,80,32,64,81,98,38,-48,-45,6,-28,32,29,-24,-24,2,-53,127,-3,59,7,-46,17,-30,20,46,-63,-110,18,-91,-9,-79,-77,19,-15,56,-18,-11,-74,-72,-82,-127,-112,5,-103,15,-29,40,84,-58,-33,35,58,-6,-56,26,37,-47,2,-40,-94,55,-12,-84,76,-30,-6,-34,-24,67,-64,-16,-52,20,78,-14,74,-4, -53,-55,-12,109,-14,117,-8,8,80,48,-106,58,-33,-55,-101,110,-102,53,39,78,127,8,112,127,40,-25,16,24,30,127,-11,-127,48,122,-18,80,50,127,-18,-127,127,-3,109,107,-113,-101,127,-92,1,-127,-127,-36,-44,127,-22,-127,20,3,-127,-35,-66,-127,-20,112,-16,70,127,-35,-8,127,127,-2,-62,41,-38,-127,25,-64,-9,127,-2,-12,127,-65,-27,-43,125,83,102,111,-102,-6,126,-32,127,32, 15,-78,23,26,7,-17,-5,39,61,64,-51,100,-21,54,-28,-38,-55,12,23,67,34,48,47,72,30,-100,30,40,21,57,-7,-53,-12,-93,-44,92,-25,67,8,-4,0,42,-1,15,-103,-74,-10,-59,69,-99,62,1,40,18,8,-6,47,-84,-23,-84,-127,39,-99,8,66,35,11,-21,-23,52,33,28,-41,-23,-7,-25,10,-12,-127,23,20,-104,47,0,-41,-32,1,-8,-74,-20,9,28,4,42,12,-4, 
  /* [0][1][][] */ 72,-1,55,127,12,-69,123,38,-13,-127,-44,123,-3,-127,-82,18,-73,-44,85,28,-101,-2,-125,-49,-17,57,-127,127,-122,58,125,70,8,77,16,127,-114,72,-2,-23,80,-127,24,127,-127,-65,2,-111,-39,-49,-103,21,79,-44,60,-16,-127,-10,-56,24,-64,-99,-59,29,-99,-30,74,-64,-55,36,-55,-106,-121,34,127,-95,58,63,-61,-36,127,-127,-34,127,-64,8,-31,127,9,44,-54,19,-1,-80,51,-19, -127,6,-31,93,-64,-127,-127,-127,68,23,-2,15,-78,-93,-59,127,-116,-127,127,127,29,-127,-127,90,-127,127,9,103,-86,-39,-127,45,-127,109,127,-38,15,80,127,-97,-48,36,3,44,-13,-126,-86,-127,12,-48,-106,127,94,14,45,-54,16,37,72,18,-19,-51,-127,127,5,-127,52,127,5,87,-125,-74,-106,15,-95,-100,127,127,105,-48,-121,47,-90,93,-122,-43,127,116,127,127,-127,-127,-127,-49,61,127, 54,-1,101,39,11,-32,14,29,-36,105,-69,127,-4,-8,-127,36,38,-33,36,29,-101,5,-90,-96,-7,8,124,18,127,108,31,-112,-16,-127,-14,92,-127,1,-40,-31,-14,90,-9,92,-20,-98,-24,-82,127,-103,-16,-3,54,-61,-127,39,86,3,-83,60,-89,-57,-9,39,127,-24,-28,-13,-72,22,-40,-36,-127,-127,-7,-62,-11,-13,-88,-32,-88,-80,-15,126,-85,21,9,-20,-21,-39,-11,41,-36,127,-15,-17, 
  /* [0][2][][] */ 13,-127,59,-38,22,20,30,33,-42,-66,-71,-29,39,-57,-42,34,-34,6,13,32,-15,30,14,-13,14,92,2,-12,-26,10,-6,23,-37,-5,-43,36,39,4,-17,-37,-2,27,-11,-24,-30,-68,-6,3,-13,-6,-25,63,105,-13,-44,-1,-3,-8,-16,43,-45,23,14,-3,-24,51,-95,-38,47,9,18,99,-41,34,14,46,-38,-37,-30,-5,6,-59,-22,-44,-59,46,-39,-2,-74,96,-9,20,-27,10,-27,-20, -64,-8,127,-7,127,81,-21,-11,-127,16,-127,-51,127,-35,-45,26,-15,35,0,-15,-11,-1,57,10,65,-31,-18,44,-33,84,-18,-16,-38,49,-13,-18,52,93,7,-108,-25,1,-127,47,-15,-127,-32,-24,-11,-127,-58,107,127,-63,-37,-76,11,127,-59,25,103,-104,48,72,-31,42,-70,8,127,-8,-1,127,-57,34,-11,-47,-26,-86,-86,-5,-21,-52,-26,-71,-18,127,55,7,78,55,12,3,-39,7,-24,-12, 17,95,113,-52,8,-8,-26,17,-9,35,-61,22,29,-11,-18,38,-43,-10,15,39,-40,23,-9,-56,17,62,24,17,37,1,-47,-79,-34,-10,-36,-34,32,-13,-26,-19,-10,-20,6,5,-82,-89,-17,-10,26,29,77,11,31,-29,12,-4,10,0,1,75,-69,19,-2,0,22,47,-62,6,32,-2,9,92,2,-18,-1,4,-24,-24,-28,-8,2,-95,-32,-21,-127,22,-20,-36,-86,67,-7,22,-40,14,-63,-28, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0085182636976242065, 0.0096513116732239723, 0.0049359812401235104, 0.0046512647531926632, 0.01031484454870224, 0.0086971614509820938, 0.012096214108169079, 0.010021841153502464, 0.0071776900440454483, 0.0079398723319172859, 0.0059329671785235405, 0.0080318441614508629, 0.010716347023844719, 0.0059302235022187233, 0.0058645252138376236, 0.0072363028302788734, 0.004468174185603857, 0.01035756804049015, 0.0097706317901611328, 0.0051309741102159023, 0.0091681899502873421, 0.014280868694186211, 0.0064477697014808655, 0.010249723680317402, 0.027883980423212051, 0.0082856817170977592, 0.009547933004796505, 0.0067171729169785976, 0.0071657150983810425, 0.0042002988047897816, 0.011861684732139111, 0.010309728793799877, 0.0092270076274871826, 0.006470623891800642, 0.010537548922002316, 0.016305185854434967, 0.0086340578272938728, 0.01454840786755085, 0.013578005135059357, 0.0068080821074545383, 0.0077813491225242615, 0.009700399823486805, 0.0095743006095290184, 0.0080328714102506638, 0.0055233719758689404, 0.0033521472942084074, 0.0089697614312171936, 0.0031951405107975006, 0.0095415161922574043, 0.0047081978991627693, 0.0047022867947816849, 0.0050184223800897598, 0.0091028744354844093, 0.0071552731096744537, 0.011168129742145538, 0.0072163357399404049, 0.0080946162343025208, 0.0088146766647696495, 0.0053891162388026714, 0.005040743388235569, 0.0063230437226593494, 0.0084826899692416191, 0.0077406303025782108, 0.0052709411829710007, 0.0074084736406803131, 0.016405291855335236, 0.012495853938162327, 0.010854359716176987, 0.0068755592219531536, 0.0071569681167602539, 0.0078206593170762062, 0.0051772505976259708, 0.0046890303492546082, 0.0092607336118817329, 0.013757155276834965, 0.0055355117656290531, 0.0071903318166732788, 0.009224877692759037, 0.0062510650604963303, 0.0088047860190272331, 0.0091115692630410194, 0.0041225436143577099, 0.0093631213530898094, 0.0066525423899292946, 0.0039778277277946472, 0.0083768889307975769, 0.0052496655844151974, 0.0078329490497708321, 0.01657862588763237, 0.0072758672758936882, 0.0049161380156874657, 0.014641968533396721, 0.0070670046843588352, 0.011973482556641102, 0.0062204375863075256, 0.012717477977275848, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7729, 3303, 995, -715, 4219, 12304, 9396, 1600, -196, 10398, 1586, -3947, 2924, 2604, 518, -451, 3121, 8971, -1269, -210, 5858, 11184, 9015, -2937, -3847, -1436, 19021, -147, 2132, 1264, 10019, -1900, 9822, 2794, 4660, -4667, 984, -4839, 188, 3234, 3046, 1176, 1505, -1287, 1465, 1461, 2858, 4299, 2496, 2617, 5952, 4224, -4193, 2057, 1339, 2249, 1646, 1814, 8512, 2119, -1179, 5307, 3842, 5113, 4225, 6927, -3459, 3611, 6331, -407, 4963, 1677, 2122, 3950, 4398, 2252, -48, 1918, 3703, 3103, 3232, 3561, 6446, 721, 3268, 3328, 278, -1073, 12008, -491, 497, -1092, 15291, 3295, 182, -481, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00010327991185477003, 0.00011194457329111174, 0.00022308020561467856, 0.00019262543355580419, 0.00015965744387358427, 6.8988905695732683e-05, 9.3083537649363279e-05, 0.00014508672757074237, 0.00015293188334908336, 7.3554343543946743e-05, 0.00014047391596250236, 0.00010460220073582605, 0.00016965271788649261, 0.00018929605721496046, 0.00013847186346538365, 0.00015011860523372889, 0.00017578998813405633, 8.4200903074815869e-05, 0.00011127619654871523, 0.00014573709631804377, 0.00011460606037871912, 7.443346839863807e-05, 9.1710178821813315e-05, 0.00010889577970374376, 0.00015065025945659727, 0.00013126466365065426, 4.7610767069272697e-05, 0.00015245686518028378, 0.00014521622506435961, 0.00016246380982920527, 8.6786370957270265e-05, 0.00015630114648956805, 7.5900017691310495e-05, 0.0001609997998457402, 0.00014496076619252563, 0.00013261221465654671, 0.00016080711793620139, 0.00012520598829723895, 0.00016174517804756761, 0.00013432916603051126, 0.00015897309640422463, 0.00020329805556684732, 0.00023600818531122059, 0.00020799912454094738, 0.00018048750644084066, 0.00020462711108848453, 0.00018132536206394434, 0.00013183381815906614, 0.00019870957476086915, 0.00016819077427498996, 0.00011272341362200677, 0.00010310213110642508, 0.00012458929268177599, 0.0001731095981085673, 0.00016941606008913368, 0.00016206642612814903, 0.00019125262042507529, 0.00014260430180002004, 9.5532268460374326e-05, 0.00010830743849510327, 0.00017067840963136405, 0.00011526860907906666, 0.00016219663666561246, 0.00012617585889529437, 0.0001342522882623598, 9.7838608780875802e-05, 0.00017722249322105199, 0.00012797622184734792, 0.00010372659016866237, 0.00022045864898245782, 0.00014174924581311643, 0.00013692118227481842, 0.00018393600475974381, 0.00012140307080699131, 0.0001143524277722463, 0.00013116325135342777, 0.00019026335212402046, 0.00020498894446063787, 0.00010994014155585319, 0.00017091911286115646, 0.00015151144179981202, 0.0001183114291052334, 0.00010935649333987385, 0.00012112994591007009, 0.00010626327275531366, 0.00017643882893025875, 0.00018224243831355125, 0.00024973417748697102, 7.3536204581614584e-05, 0.00016139287617988884, 0.00023277242144104093, 0.00017151035717688501, 6.1686150729656219e-05, 0.00012752909970004112, 0.00017755500448402017, 0.00012400257401168346, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -41,46,-2,-8,-6,-40,-60,-14,50,-43,33,-38,76,-73,17,-127, 
  /* [1][0][][] */ -127,42,-83,-67,-44,20,10,65,-9,-28,97,-28,35,123,15,14, 
  /* [2][0][][] */ -29,16,-47,15,-7,-20,6,-32,-72,127,30,6,26,19,-28,58, 
  /* [3][0][][] */ -51,-61,-10,-40,-103,33,-60,-124,-22,34,34,-87,-50,-56,-127,-51, 
  /* [4][0][][] */ 50,4,-17,13,-48,-1,-127,26,11,68,9,58,-8,18,-50,-76, 
  /* [5][0][][] */ -117,103,-87,-32,89,-68,-14,-125,102,-61,22,-44,34,-104,-127,-101, 
  /* [6][0][][] */ -43,-54,-11,26,-82,48,29,-3,-21,-41,120,-40,-10,-20,-127,8, 
  /* [7][0][][] */ -16,113,119,-71,78,108,-11,-19,46,97,-127,-34,91,3,-3,79, 
  /* [8][0][][] */ -32,5,54,-17,29,39,127,96,-48,-28,-94,-88,11,41,-79,-79, 
  /* [9][0][][] */ 14,35,123,28,-117,-30,-127,-99,80,24,123,11,-44,-114,75,-45, 
  /* [10][0][][] */ -46,-125,-20,-109,-127,71,23,33,-37,-37,15,64,-47,44,-79,-6, 
  /* [11][0][][] */ 86,-55,23,109,-109,-13,85,7,111,127,-84,40,34,-77,-37,125, 
  /* [12][0][][] */ -50,-29,127,-14,62,-7,5,41,68,-18,48,61,-75,22,-87,25, 
  /* [13][0][][] */ -12,-19,34,21,28,29,127,38,-95,2,-2,5,-8,82,56,-43, 
  /* [14][0][][] */ 123,-108,117,-9,75,127,115,101,120,97,77,34,72,-28,-6,-67, 
  /* [15][0][][] */ -16,127,24,-52,34,99,-54,50,-70,-17,-36,-7,-45,107,-16,-48, 
  /* [16][0][][] */ -59,46,115,-61,19,56,16,-3,14,34,-16,55,94,-3,101,127, 
  /* [17][0][][] */ -7,115,76,-99,35,-19,27,-81,-87,47,-33,55,-105,-13,127,-27, 
  /* [18][0][][] */ -93,21,-39,-68,86,109,-61,-66,30,101,127,59,-24,73,-63,-1, 
  /* [19][0][][] */ 31,96,94,90,72,-33,-46,22,-50,105,76,127,85,78,-61,41, 
  /* [20][0][][] */ 67,-18,20,99,-50,10,-56,76,-47,-20,-127,-19,66,-62,30,-27, 
  /* [21][0][][] */ -96,-100,-22,108,-47,17,-127,101,-5,16,21,-6,-50,44,-69,12, 
  /* [22][0][][] */ 9,17,-64,-33,127,-15,-10,40,36,59,44,70,12,45,2,30, 
  /* [23][0][][] */ -82,21,-26,9,-14,40,127,100,13,126,-15,-45,-11,34,-52,-7, 
  /* [24][0][][] */ 23,-63,57,-3,127,34,65,-41,71,45,30,31,-71,11,-24,-22, 
  /* [25][0][][] */ 127,-40,88,32,15,-12,-57,93,83,-22,-47,20,111,-67,119,44, 
  /* [26][0][][] */ 107,55,121,92,83,3,-65,-49,-33,30,-10,127,13,-89,27,-62, 
  /* [27][0][][] */ -27,23,-62,4,-27,90,19,-90,20,-91,93,20,25,-19,78,127, 
  /* [28][0][][] */ -65,5,-56,-79,41,-80,-19,7,-50,127,-53,33,-9,39,-36,50, 
  /* [29][0][][] */ 51,88,-72,34,32,98,-35,-17,28,67,16,72,-127,20,-34,40, 
  /* [30][0][][] */ -22,87,-98,-77,51,-42,16,-3,-67,71,-79,4,4,51,-13,127, 
  /* [31][0][][] */ 37,-127,93,13,92,-111,-95,10,-7,0,25,-14,-94,66,39,117, 
  /* [32][0][][] */ -44,72,-32,78,-90,67,20,60,38,-127,36,-75,72,36,57,34, 
  /* [33][0][][] */ -96,-8,42,100,-6,25,-69,13,-35,-88,55,-29,-7,-7,24,127, 
  /* [34][0][][] */ -17,13,-104,-100,66,-32,-18,101,8,4,-1,-23,-47,-20,-4,127, 
  /* [35][0][][] */ 77,-17,28,-20,12,29,-90,-18,-35,-127,-42,36,-8,-18,33,-20, 
  /* [36][0][][] */ 3,10,-103,-29,25,127,-1,38,-16,14,53,9,-6,16,-70,31, 
  /* [37][0][][] */ 39,9,53,-49,31,-127,32,-12,-118,56,-86,-18,3,29,92,34, 
  /* [38][0][][] */ -43,112,48,-41,45,34,55,-83,-2,7,-127,41,-41,-80,-81,16, 
  /* [39][0][][] */ 81,34,-125,-103,0,-28,25,-81,-11,2,-12,-24,43,14,-127,-88, 
  /* [40][0][][] */ -38,10,-76,-96,-25,-39,30,-127,-16,-16,24,-1,31,83,28,92, 
  /* [41][0][][] */ -32,-88,-2,127,-12,-21,-82,-39,-9,-53,47,-67,-86,-33,14,10, 
  /* [42][0][][] */ 21,94,-33,-127,13,20,2,-18,60,-14,-38,7,58,-24,-21,14, 
  /* [43][0][][] */ 14,50,-8,30,127,28,17,23,8,17,27,-93,-73,-13,-21,-11, 
  /* [44][0][][] */ 93,4,46,35,-30,-12,-30,39,53,-36,51,3,127,16,-57,-42, 
  /* [45][0][][] */ 9,-65,-54,38,-38,-74,12,59,69,-9,24,14,-59,127,3,-22, 
  /* [46][0][][] */ 16,-54,46,45,-2,-26,-69,41,26,-47,39,-20,38,87,46,127, 
  /* [47][0][][] */ -52,-40,36,81,-9,10,54,14,34,-57,-127,-44,42,-28,-92,54, 
  /* [48][0][][] */ -90,50,10,-21,9,58,-4,-127,32,-45,17,-71,36,-84,-61,6, 
  /* [49][0][][] */ -69,0,26,-40,3,-3,103,127,-26,-12,1,27,-59,26,-46,23, 
  /* [50][0][][] */ 68,15,-83,27,24,-127,-49,8,-56,49,-34,11,-1,-90,-79,-37, 
  /* [51][0][][] */ -79,62,-66,127,-64,79,-71,-70,-112,-84,-21,-88,14,42,9,110, 
  /* [52][0][][] */ -127,-7,10,-17,23,60,69,27,33,-96,-12,-41,-95,-62,-118,-12, 
  /* [53][0][][] */ -75,-102,-37,-127,-32,3,10,81,46,-57,-60,29,-18,10,64,83, 
  /* [54][0][][] */ -31,-49,34,-2,-64,74,68,-25,-15,-99,71,33,-10,-3,-127,33, 
  /* [55][0][][] */ -4,-20,-60,42,80,-36,63,87,-100,-75,-127,-41,93,-45,0,31, 
  /* [56][0][][] */ 23,-63,-93,-28,-127,20,-113,41,-9,-1,19,23,121,-6,61,34, 
  /* [57][0][][] */ -70,16,52,-23,127,61,66,55,-34,51,-10,-21,-89,41,-122,11, 
  /* [58][0][][] */ 30,-7,8,-35,43,-18,-75,-84,60,-127,-79,22,-82,-64,-27,43, 
  /* [59][0][][] */ -116,-58,-14,45,-15,127,-102,-50,72,112,-118,-39,-48,8,-56,32, 
  /* [60][0][][] */ 7,-72,15,40,-127,-49,6,24,9,86,-19,62,1,-51,36,33, 
  /* [61][0][][] */ 37,27,-102,-6,-70,-23,-127,-112,-20,0,39,109,65,-35,102,80, 
  /* [62][0][][] */ 30,-26,56,-28,-11,5,14,83,-43,127,5,69,25,22,73,85, 
  /* [63][0][][] */ 8,-123,-17,-10,-74,24,61,-26,-33,-36,-2,-39,-16,127,108,34, 
  /* [64][0][][] */ -3,31,-127,-32,18,81,37,-11,-30,-81,17,-17,81,-41,-95,90, 
  /* [65][0][][] */ -16,-18,23,18,33,-2,97,68,-22,17,-127,-117,8,54,-77,25, 
  /* [66][0][][] */ -47,-127,-17,-70,-34,-78,30,1,-19,-37,16,60,-44,-40,-35,32, 
  /* [67][0][][] */ -51,-75,-52,-12,-64,105,-1,-127,-43,-1,-69,-95,4,-41,-83,27, 
  /* [68][0][][] */ 108,28,44,29,-77,27,-52,-41,-83,-127,-35,-30,73,-41,55,-40, 
  /* [69][0][][] */ 20,-23,52,-8,-20,-7,-53,62,-28,127,-34,-2,35,66,69,-8, 
  /* [70][0][][] */ 41,-4,-28,36,-127,48,10,-100,80,104,21,61,49,-23,-33,10, 
  /* [71][0][][] */ 97,-45,118,107,-107,-35,54,-44,127,8,-40,-5,16,-33,33,48, 
  /* [72][0][][] */ -8,-43,48,60,50,-13,-127,79,56,10,23,7,-53,-50,-59,79, 
  /* [73][0][][] */ 118,40,60,-127,49,-19,-38,61,-76,89,-79,-26,3,-68,31,-35, 
  /* [74][0][][] */ 105,-2,64,71,-127,-41,20,-11,-84,-63,3,-68,27,-110,6,3, 
  /* [75][0][][] */ 115,127,-46,50,71,19,-56,-68,-1,-11,18,99,-109,27,63,81, 
  /* [76][0][][] */ -61,-33,7,-44,-70,-16,91,-7,-53,17,105,36,-30,-127,-16,78, 
  /* [77][0][][] */ -30,127,-28,16,-52,-63,16,38,15,-38,7,69,-32,27,10,76, 
  /* [78][0][][] */ 125,63,-49,53,-103,41,-127,-41,-7,-12,-79,-6,39,-125,36,93, 
  /* [79][0][][] */ -36,-42,93,57,-43,-82,-15,-15,-21,-14,60,12,-41,127,-48,97, 
  /* [80][0][][] */ 82,107,11,-123,-21,41,102,-36,22,28,-28,20,127,-76,3,-12, 
  /* [81][0][][] */ 26,-66,32,-123,104,58,-21,127,87,41,-28,-32,-3,13,-68,-99, 
  /* [82][0][][] */ 104,35,10,2,127,-79,46,53,-14,56,-12,36,-30,-19,25,-83, 
  /* [83][0][][] */ -21,127,42,30,103,80,123,106,-26,30,-63,-94,-94,108,-48,-100, 
  /* [84][0][][] */ 10,-84,11,101,-1,-121,-114,29,-125,105,-98,-1,-127,97,-11,-95, 
  /* [85][0][][] */ -74,85,7,1,17,-18,-51,-46,-22,10,-1,-71,-127,-44,-80,61, 
  /* [86][0][][] */ -39,78,86,127,39,-31,37,38,-17,8,-31,-65,26,96,-105,-90, 
  /* [87][0][][] */ -19,54,127,-35,-80,-18,25,20,32,-15,13,43,-45,33,-8,3, 
  /* [88][0][][] */ -47,-63,-93,-7,25,41,16,26,-12,-33,-127,-99,97,-26,-6,37, 
  /* [89][0][][] */ 32,3,19,-125,8,-63,-70,68,127,-6,19,-100,0,-20,51,-83, 
  /* [90][0][][] */ -2,72,19,2,-43,24,44,112,4,-61,16,127,40,18,-11,72, 
  /* [91][0][][] */ -40,-18,-24,62,73,59,-17,-80,-52,33,-20,-3,-101,-127,-69,-9, 
  /* [92][0][][] */ -39,104,-14,-24,-127,-22,-96,72,-97,74,106,114,-10,-7,95,13, 
  /* [93][0][][] */ 116,35,102,73,-127,-64,28,42,-30,-86,-18,-57,36,-44,8,-10, 
  /* [94][0][][] */ -18,-127,7,-94,8,57,-28,6,81,-18,5,66,4,43,-52,38, 
  /* [95][0][][] */ -34,-40,-28,-61,117,127,-30,29,72,43,-78,50,-47,124,-68,36, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0015782446134835482, 0.0017106513259932399, 0.0034089409746229649, 0.0029435544274747372, 0.002439762931317091, 0.0010542356176301837, 0.0014224314363673329, 0.0022171044256538153, 0.0023369879927486181, 0.0011240012245252728, 0.0021466149482876062, 0.0015984508208930492, 0.0025925030931830406, 0.0028926774393767118, 0.0021160210017114878, 0.0022939976770430803, 0.0026862879749387503, 0.0012866937322542071, 0.0017004376277327538, 0.0022270428016781807, 0.001751322066411376, 0.0011374353198334575, 0.0014014447806403041, 0.0016640619141981006, 0.0023021220695227385, 0.0020058860536664724, 0.0007275512907654047, 0.0023297290317714214, 0.0022190832532942295, 0.0024826475419104099, 0.0013262028805911541, 0.0023884745314717293, 0.0011598459677770734, 0.0024602757766842842, 0.0022151793818920851, 0.0020264782942831516, 0.0024573314003646374, 0.0019133019959554076, 0.0024716660846024752, 0.0020527155138552189, 0.0024293051101267338, 0.0031066453084349632, 0.0036064963787794113, 0.0031784833408892155, 0.0027580719906836748, 0.0031269548926502466, 0.0027708753477782011, 0.0020145834423601627, 0.0030365276616066694, 0.0025701627600938082, 0.0017225529300048947, 0.001575527829118073, 0.0019038782920688391, 0.0026453284081071615, 0.0025888865347951651, 0.0024765750858932734, 0.0029225761536508799, 0.0021791697945445776, 0.0014598510460928082, 0.00165507139172405, 0.0026081767864525318, 0.0017614467069506645, 0.0024785648565739393, 0.0019281229469925165, 0.0020515406504273415, 0.0014950947370380163, 0.0027081784792244434, 0.0019556346815079451, 0.0015850703930482268, 0.0033688803669065237, 0.0021661035716533661, 0.0020923246629536152, 0.0028107692487537861, 0.0018551888642832637, 0.0017474462511017919, 0.0020043363329023123, 0.0029074589256197214, 0.0031324841547757387, 0.0016800210578367114, 0.0026118550449609756, 0.0023152818903326988, 0.0018079447327181697, 0.0016711022472009063, 0.0018510151421651244, 0.0016238340176641941, 0.0026962030678987503, 0.0027848894242197275, 0.0038162467535585165, 0.0011237240396440029, 0.0024662823416292667, 0.0035570499021559954, 0.0026208900380879641, 0.00094264053041115403, 0.0019488021498546004, 0.0027132597751915455, 0.0018949124496430159, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -25796, -5071, 718, -12213, 7440, -4350, 22372, -11631, 9536, -4751, 10170, 6955, -9158, -28357, -5956, 6718, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.0588968305382878e-05, 6.9889305450487882e-05, 6.7450331698637456e-05, 6.9002191594336182e-05, 8.9016240963246673e-05, 0.00013791777018923312, 6.5465079387649894e-05, 6.6002714447677135e-05, 0.00010952147567877546, 9.8708303994499147e-05, 9.2974907602183521e-05, 7.289210770977661e-05, 8.1293947005178779e-05, 0.0001097266431315802, 6.1832019127905369e-05, 8.6041218310128897e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 11,32,4,22,-43,-86,-11,8,-18,-58,22,-4,60,-73,54,41,-77,-38,40,28,85,27,-64,27,-7,73,127,97,-4,85,74,-22,-3,-1,6,7,47,28,6,1,119,6,20,-48,-16,17,10,-43,23,-39,87,-28,-74,10,49,10,3,-45,-5,40,-9,56,-59,-19,11,24,49,33,-7,-52,-5,37,27,27,0,18,58,1,32,26,-6,29,12,38,-51,16,0,66,18,14,-97,-28,18,4,119,85, 
  /* [1][0][][] */ 18,33,-50,-8,-21,-50,83,-49,-50,-18,-28,-30,-10,-37,8,-29,-20,-14,-31,5,-20,-85,102,-8,-15,5,1,63,-56,16,-29,30,-29,44,20,31,-19,52,-53,84,40,7,-15,-47,44,-31,-2,30,-83,-18,51,-113,-40,49,56,48,34,26,-56,26,-34,26,1,-9,36,45,65,5,-38,-127,2,22,31,49,-21,32,-39,-6,73,-21,48,-21,41,-46,-17,-43,-1,9,-20,-37,25,-1,42,-68,-30,66, 
  /* [2][0][][] */ 3,-15,3,-21,89,43,-48,40,-44,30,26,-38,40,-5,13,28,35,-20,-127,-5,-18,-38,-23,30,-2,-7,-31,10,-39,-15,-5,62,-18,-32,9,21,-47,28,-19,-25,62,5,20,48,7,69,-3,-14,-75,11,-20,9,-32,30,13,-52,30,22,46,15,-29,-16,-22,40,33,0,-41,-6,9,7,-28,-18,10,54,34,63,-45,-14,-25,-43,22,33,52,-7,-1,-45,-12,-40,-25,-30,4,59,-3,-20,85,-14, 
  /* [3][0][][] */ 14,-27,-31,-100,-6,-29,108,-10,39,127,-83,-18,17,-28,-36,63,72,21,-29,41,-31,17,28,25,-39,74,30,3,-49,-8,-52,76,1,-10,45,-1,19,-43,-9,56,25,11,-33,0,63,-34,14,40,27,-33,28,-34,95,41,33,-15,-2,-14,-12,-33,-16,52,53,-7,-19,-3,83,-26,-37,-38,-50,45,30,-67,-6,-69,12,-40,104,-5,-3,-54,-41,-32,-21,-43,79,58,-43,42,-54,-4,3,-83,-14,27, 
  /* [4][0][][] */ -19,75,34,30,-24,-5,-47,-12,27,-39,18,-20,31,38,-25,39,0,-42,-19,-41,19,-35,-60,38,-41,-30,-9,27,-51,127,-41,-14,5,-26,1,-12,64,51,-32,17,43,6,7,-45,-55,15,59,-29,9,-27,-42,-21,-76,31,54,19,10,78,-23,31,-24,-52,-16,6,68,40,-85,-5,16,-15,12,-72,-15,69,46,71,-19,45,-67,50,18,61,26,-49,41,-55,-17,-63,-38,-51,-49,10,-20,-15,36,-22, 
  /* [5][0][][] */ -3,-19,42,-31,14,-8,-8,-10,28,12,-24,-11,-20,-33,31,-18,-26,-4,-61,-67,-17,24,-25,9,15,-53,61,-33,1,44,-2,82,2,-104,27,-15,-54,-36,-57,-6,-62,-6,-31,26,-6,10,-82,23,-21,23,49,6,20,-81,5,18,-22,-84,25,-69,50,18,25,61,-55,-15,119,-36,-9,-19,11,32,-2,26,36,17,-20,-38,127,29,-36,-5,-46,12,31,52,12,86,7,-42,-6,-12,24,-26,-37,14, 
  /* [6][0][][] */ 34,-62,61,17,-19,117,-46,-98,-31,-94,-82,47,16,14,-38,63,6,36,14,-54,-89,-20,-96,-65,4,-53,1,59,-127,31,-10,-39,38,68,-31,-17,-5,-37,36,-17,-76,41,47,-16,22,31,-98,-14,64,29,-80,-103,75,12,-36,-10,25,-14,24,-22,-10,-54,32,-9,47,-82,-58,-39,-71,35,-12,-79,-50,-88,25,-85,82,5,-57,35,-45,81,39,-91,62,-46,-34,11,-79,65,-71,87,38,-48,63,-95, 
  /* [7][0][][] */ 3,2,-60,80,-52,-16,21,-5,-88,-15,80,48,13,-47,-26,-49,-6,7,3,19,-74,-32,-52,-49,70,53,7,69,-19,16,21,8,-67,-127,5,124,4,6,-12,21,1,-19,18,-66,22,65,68,80,-8,46,-46,-17,23,-44,30,-57,-26,56,-94,4,54,6,9,-46,86,-39,105,1,-49,-14,74,-21,-29,-33,-83,-20,51,-17,97,-24,-11,-22,-64,-22,43,42,-95,47,-22,17,0,50,56,-6,80,-2, 
  /* [8][0][][] */ -22,-56,7,3,16,-21,18,-2,4,-12,44,59,25,43,-74,-3,70,-9,24,13,-16,-70,-37,-22,-13,-33,76,8,-4,55,17,-19,-30,7,15,21,-64,-8,18,-27,13,46,17,-29,22,13,15,-15,34,17,49,13,-14,16,-41,12,-2,120,-58,-13,-31,-57,-65,-22,-86,-20,-21,4,-6,-7,44,-19,-17,-127,38,-105,4,14,-58,25,-39,4,11,88,72,-60,-45,57,-29,89,-1,-19,-48,-13,2,-59, 
  /* [9][0][][] */ -48,-32,-23,8,6,26,9,52,-57,21,49,60,-20,37,38,-25,-19,24,-24,-35,-2,36,-7,20,-33,20,6,31,33,2,21,-2,-3,-28,12,65,-20,4,23,-1,-19,-32,11,-4,4,43,8,32,-45,-9,-7,24,120,6,-8,-11,6,-26,17,26,-30,-4,68,6,-2,21,52,7,31,-20,-33,47,5,-127,-31,-107,-49,-17,30,-9,8,18,-15,-46,44,9,-39,-8,4,99,36,22,46,33,4,16, 
  /* [10][0][][] */ 23,39,9,20,-32,-2,-60,-19,74,-1,-24,14,25,16,-11,-59,-29,4,33,18,15,-30,-14,-54,14,-17,-92,34,-41,47,1,10,7,33,-27,20,27,-4,0,4,51,-9,52,-51,-35,5,17,15,14,15,3,-41,-26,1,1,27,-7,21,-17,-5,-16,-9,1,8,9,5,-86,-30,-48,-16,50,-36,-11,26,15,12,69,0,-92,24,-12,30,7,5,-1,15,-67,-127,-25,28,15,30,44,-42,16,44, 
  /* [11][0][][] */ 22,-44,8,30,-90,18,-4,21,90,-9,-3,-41,24,29,9,-3,-14,59,10,-37,13,22,8,-43,39,28,70,7,22,-67,-26,38,-1,127,-114,28,28,-18,80,21,-38,47,-21,6,-53,22,-17,-10,50,-24,-21,-37,-18,1,-75,81,-23,6,-17,-7,19,39,3,-72,2,-27,-127,-86,-8,-54,-97,5,71,12,-18,-22,43,86,-126,-15,-4,-21,-22,6,-18,3,64,76,32,-40,0,18,-41,26,101,58, 
  /* [12][0][][] */ 9,31,-51,-28,-14,-46,0,43,63,-22,39,-2,-4,-23,4,19,30,-46,-24,30,14,64,23,61,-31,-42,-127,-7,69,-23,32,7,-16,-72,78,16,48,-6,-7,25,3,-67,4,26,41,6,39,-1,-76,8,-50,75,68,-11,30,-84,15,32,-39,-25,3,66,83,4,-2,1,20,41,112,20,32,39,-9,-32,-26,-18,-25,-51,32,-55,34,-50,34,-33,4,16,17,-111,-3,42,-37,33,5,68,16,59, 
  /* [13][0][][] */ -4,23,-68,30,4,10,-14,18,31,52,-37,24,-32,-18,61,-63,24,54,59,15,-30,-52,-15,-4,33,49,-9,33,-6,27,59,-34,-15,52,-22,45,27,-48,-38,-41,-9,-15,25,20,54,45,-39,40,-39,48,-8,-27,-21,-34,60,29,6,-42,-15,-18,27,4,6,-37,8,92,126,49,26,14,-55,-33,32,40,-80,51,31,-62,127,-41,-20,-37,32,-2,34,59,-44,-19,-24,-17,21,67,35,17,59,62, 
  /* [14][0][][] */ -4,59,14,46,-116,-64,9,56,-64,-2,107,13,-88,-11,71,1,-25,40,-79,51,-21,10,-114,12,-59,-8,-57,-120,20,9,29,96,-63,46,10,-12,-4,-71,7,-44,49,-38,45,-39,-16,76,-72,43,-26,-52,102,7,-18,21,-44,21,-75,51,-2,59,43,77,2,48,29,-32,-4,-61,49,71,77,34,-56,36,18,-10,49,-5,33,17,-62,127,10,-125,99,-2,21,9,-119,-7,-13,25,-34,1,48,61, 
  /* [15][0][][] */ 81,-37,31,27,31,14,-12,5,4,13,-42,-23,57,78,19,-33,-17,22,-72,25,-5,-43,4,5,54,-30,95,20,40,-36,-56,45,51,39,-9,-96,49,60,68,37,67,38,4,30,-43,-127,25,-50,-21,-11,-25,-5,-3,-56,-34,58,-6,4,-9,18,-5,-73,-20,21,20,25,-65,33,-2,-5,-3,-20,-16,-110,-47,-100,-21,17,-111,32,69,-31,67,33,-56,-4,-19,-17,24,97,20,-53,-31,-19,34,-22, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0038500311784446239, 0.0029702954925596714, 0.002866639057174325, 0.0029325929936021566, 0.0037831901572644711, 0.0058615049347281456, 0.0027822658885270357, 0.0028051151894032955, 0.0046546626836061478, 0.0041951029561460018, 0.0039514335803687572, 0.0030979143921285868, 0.0034549925476312637, 0.0046633821912109852, 0.0026278607547283173, 0.0036567517090588808, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11295, 327, -4824, 11966, -3785, -1515, -601, -1389, 4940, -3785, 833, -4070, 8200, -2414, -2134, -6668, 1420, -1766, -8207, -2808, -133, -614, -5493, 544, 59, 6927, -10775, -1445, -130, -3578, -681, -1135, 8748, 632, -3840, 945, -80, 10780, 2203, 1432, -234, 2298, -80, 5655, 1588, 550, 13243, 4023, -6502, -12, -3138, -2106, -1872, -4413, 942, 2863, -110, 6357, 108, 2631, -1313, -1719, -1796, 8030, 7749, -2059, 16177, 4917, -2962, -1664, 8833, -2704, -614, 2685, -1622, 1251, 20054, 5908, 10628, 6509, 11796, -781, 7145, 11833, -1098, -3653, 15729, -7851, 6742, -1982, -7169, -2135, -591, 55, 12038, -371, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010664462024578825, 0.00029896371415816247, 0.00018416733655612916, 0.0001170023315353319, 0.00025926670059561729, 0.00043041197932325304, 0.00012426827743183821, 0.00024029630003497005, 0.0002172050008084625, 0.00030049070483073592, 0.0002826342242769897, 0.00021222003852017224, 0.00010264026059303433, 0.00020383270748425275, 0.00025283690774813294, 0.00017087599553633481, 0.00019664793217089027, 0.00022924131189938635, 0.00014912082406226546, 0.00044277601409703493, 0.00034631832386367023, 0.00024836126249283552, 0.00013499478518497199, 0.00015970977256074548, 0.0017568108160048723, 0.00018226122483611107, 0.0002167190978070721, 0.00023256796703208238, 0.0003392377111595124, 0.00016601315292064101, 0.00016513254377059639, 0.00032853623270057142, 0.00011765785166062415, 0.00072287610964849591, 0.00022151542361825705, 0.0001822824269765988, 0.00033571975654922426, 0.00010308164200978354, 0.00028694269713014364, 0.00018432190699968487, 0.00057637121062725782, 0.00026952545158565044, 0.00024064321769401431, 0.00018313618784304708, 0.0001871386484708637, 0.00025080793420784175, 0.00011498099047457799, 0.00022111127327661961, 0.00014179208665154874, 0.00035910890437662601, 0.00027035796665586531, 0.00019194651395082474, 0.0001625394361326471, 0.00020545307779684663, 0.00023423020320478827, 0.00023109331959858537, 0.00011615603580139577, 0.0002823829127009958, 0.00032733270199969411, 0.00031017640139907598, 0.00025345323956571519, 0.000317240075673908, 0.00013870670227333903, 0.00012730841990560293, 0.0002917361562140286, 0.00042580856825225055, 9.6077936177607626e-05, 0.00016125658294185996, 0.0002372604503761977, 0.00035830296110361814, 0.00016090832650661469, 0.00022075082233641297, 0.00036772209568880498, 0.00016261123528238386, 0.00018475836259312928, 0.00021484376338776201, 7.5878793722949922e-05, 0.00014943737187422812, 0.00012625889212358743, 0.00016785133630037308, 0.00010073035809909925, 0.00029763896600343287, 0.000112548703327775, 0.00020234166004229337, 9.9170363682787865e-05, 0.00023082157713361084, 0.00011697995796566829, 0.00021885824389755726, 0.00018422788707539439, 0.00022097922919783741, 0.000130583590362221, 0.00019739952404052019, 0.00025771910441108048, 0.00015952040848787874, 0.00013655530347023159, 0.00023627604241482913, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -78,-22,5,-83,106,-1,45,-17,-19,18,-18,-14,-19,11,-14,-9,-16,16,-21,-10,-26,41,-1,59,-5,-10,-15,-18,27,-7,33,1,15,-6,20,-51,-3,-86,-18,48,4,6,18,-8,-27,45,-100,-43,-7,17,-9,70,-49,13,17,-21,6,-33,10,-16,0,-3,10,-43,-35,-23,-33,-35,-5,47,16,30,85,-17,-19,-14,-32,2,127,2,-110,-8,-127,-8,-40,3,-26,22,-97,-8,17,-39,-1,41,-15,-14, -41,35,42,-127,-23,3,127,-46,-17,-7,-38,20,-51,-25,-72,90,-8,97,73,-3,-24,127,64,127,27,-12,60,60,127,59,127,-54,-52,-23,-64,-34,-31,-88,127,10,-31,-70,-28,-28,70,-36,-71,-9,59,3,20,127,-94,58,-108,-16,-79,-25,-1,28,-14,-127,-127,-27,-53,8,6,-53,8,38,-17,127,-104,-24,-3,-39,-85,-127,9,-127,-65,3,49,-106,112,88,-105,39,-127,12,19,-12,11,127,-30,-108, -79,-12,-15,-51,86,17,38,-24,-38,24,-18,22,5,-11,10,-35,-15,17,-6,-15,-31,19,-1,45,-2,-37,19,-72,20,12,29,0,32,-10,5,71,-1,-61,-30,99,-8,29,9,12,-22,-31,-75,-39,-11,4,-6,41,14,17,-6,-22,71,-45,17,-31,7,-3,-53,-10,-46,-20,127,-25,16,34,-1,20,38,-16,-20,9,-63,27,-33,3,-118,-6,-123,-19,7,-25,-70,5,-61,-24,25,50,-1,37,-6,-13, 
  /* [0][1][][] */ -117,-6,43,-37,33,109,-30,-25,-6,-9,-25,-11,-116,35,15,127,-23,52,95,24,18,-12,127,-24,34,16,58,22,-15,-10,10,-11,-127,-19,60,-23,9,-65,-60,-127,-5,-3,98,-56,-90,127,-127,-114,93,58,23,-32,-117,105,62,-28,16,-37,38,-30,14,0,106,-38,-31,18,-28,-86,-10,-8,-126,25,127,127,-10,-86,-127,-56,-65,-65,-74,-12,-45,-85,32,31,-123,60,-80,127,72,-70,127,18,-48,2, 65,127,127,111,-127,-127,102,-45,127,127,-69,-39,-127,127,-17,96,127,-127,127,127,127,-77,99,-125,-127,-127,127,127,-114,127,-22,127,-71,127,127,-96,127,64,0,-7,127,-3,-127,-127,127,-28,104,127,127,-127,127,-125,102,127,-127,127,-127,127,-127,127,-100,111,101,-127,127,127,-16,127,-96,-127,-4,-95,5,123,127,76,-13,-114,93,-119,66,127,127,118,127,78,-120,127,-38,61,-36,1,-92,-30,-127,-18, -127,-33,33,-87,4,80,-30,9,-46,-6,0,127,-121,19,30,81,-38,63,68,12,-2,-12,87,-15,33,18,27,-24,-8,7,7,-8,-68,-36,57,127,19,-78,-67,-23,-33,26,30,-41,-83,-63,-71,-119,83,54,-11,-10,127,28,88,-39,109,-39,59,-38,5,-23,-112,-69,-59,7,-52,-98,-11,-6,-127,13,94,-103,-7,127,-109,-33,-60,25,-113,-6,-99,-107,-20,27,-127,50,-29,-58,127,127,-47,-10,-72,-4, 
  /* [0][2][][] */ -5,-49,-23,-40,79,6,-4,39,-11,-4,32,-24,51,-8,-4,-21,-10,-4,-61,-17,-12,-12,18,-45,5,-14,-9,-25,-13,-10,-21,27,11,-4,20,-50,-14,-63,-16,-5,-21,31,27,10,2,2,-83,-15,-68,23,-27,3,10,-65,33,-21,12,-30,11,-37,17,32,-13,-46,-28,-29,101,38,31,26,-26,-7,-36,-18,-23,-36,-15,85,-34,6,-13,-16,-85,-53,-11,10,51,7,-4,10,9,-29,-6,-8,16,0, -15,-66,27,-95,-19,0,33,127,-66,54,127,-8,-28,8,127,27,-8,-37,73,-31,-39,-42,91,-11,13,12,44,23,-12,14,-114,-36,31,-31,-76,-17,-93,-127,25,-30,-25,-127,-28,88,7,-35,-95,1,25,-14,-13,-5,71,-8,-40,-56,-52,-64,53,-47,127,40,106,-28,-60,-49,-23,-18,127,49,-70,-1,11,-20,16,-22,-35,-14,0,71,-127,-20,-67,-127,80,-127,-15,16,-41,4,36,8,17,-120,-16,127, 7,1,-14,14,56,1,17,40,-28,3,15,40,65,-11,16,-38,-26,24,-12,-31,-14,7,19,-19,4,-16,3,-51,9,9,-30,17,28,-10,16,8,-17,-70,-18,32,-42,-9,7,14,-3,-6,-67,11,-45,9,-19,-4,10,-65,32,-17,56,-23,18,-27,19,19,-3,-50,-18,-20,-23,63,29,20,-33,-14,-43,-46,-12,-14,-83,60,86,47,-7,-1,-90,-10,-34,16,18,-1,37,-5,14,11,-6,-2,3,-3, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0045323963277041912, 0.012705957517027855, 0.0078271115198731422, 0.0049725989811122417, 0.011018835008144379, 0.018292509019374847, 0.0052814017981290817, 0.010212592780590057, 0.0092312125489115715, 0.012770854867994785, 0.012011954560875893, 0.009019351564347744, 0.0043622110970318317, 0.0086628897115588188, 0.010745568200945854, 0.0072622299194335938, 0.0083575369790196419, 0.0097427554428577423, 0.0063376347534358501, 0.018817979842424393, 0.014718528836965561, 0.010555353946983814, 0.0057372781448066235, 0.0067876651883125305, 0.074664458632469177, 0.0077461018227040768, 0.0092105614021420479, 0.0098841385915875435, 0.014417602680623531, 0.007055558729916811, 0.0070181330665946007, 0.013962789438664913, 0.0050004585646092892, 0.030722234398126602, 0.0094144055619835854, 0.0077470028772950172, 0.014268089085817337, 0.0043809697963297367, 0.012195064686238766, 0.0078336810693144798, 0.024495774880051613, 0.011454830877482891, 0.010227336548268795, 0.0077832876704633236, 0.0079533923417329788, 0.010659337043762207, 0.0048866919241845608, 0.0093972291797399521, 0.0060261636972427368, 0.015262127853929996, 0.011490212753415108, 0.008157726377248764, 0.0069079259410500526, 0.0087317554280161858, 0.009954783134162426, 0.0098214661702513695, 0.004936631303280592, 0.012001273222267628, 0.013911639340221882, 0.013182496652007103, 0.010771762579679489, 0.013482702895998955, 0.0058950348757207394, 0.0054106074385344982, 0.012398786842823029, 0.018096864223480225, 0.0040833121165633202, 0.0068534044548869133, 0.010083569213747978, 0.015227875672280788, 0.0068386038765311241, 0.0093819098547101021, 0.015628188848495483, 0.0069109774194657803, 0.0078522302210330963, 0.0091308597475290298, 0.0032248485367745161, 0.006351088173687458, 0.0053660026751458645, 0.0071336817927658558, 0.0042810402810573578, 0.012649656273424625, 0.0047833197750151157, 0.0085995206609368324, 0.0042147403582930565, 0.0098099168390035629, 0.0049716481007635593, 0.0093014752492308617, 0.0078296847641468048, 0.0093916170299053192, 0.0055498024448752403, 0.0083894794806838036, 0.010953061282634735, 0.0067796171642839909, 0.0058036004193127155, 0.010041731409728527, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1616, 8886, 489, 1508, 8441, 14127, -327, 2120, 10403, -1541, 12944, 6040, 1808, 498, 4299, 145, 2983, 7105, -443, 11044, 1762, 8752, -1627, 1059, -13631, 1700, 3512, 2695, 7407, 2038, 3991, 4444, 2423, 22411, 3421, 3903, 4787, 3857, 3310, 3045, 23275, 1545, 2366, 2428, 3057, 6983, 10449, 13514, 1732, -646, 1188, 6141, 2788, -3620, 10663, 49, 1572, 28341, 1900, 1724, 3688, 14801, 4084, -382, 35745, 7726, 1744, 5047, 4740, 3802, 2057, 664, -4282, 4318, 2882, 4589, 554, 9566, 4372, 6556, 3290, 840, 3909, 13905, -400, 10713, 8494, 2358, -1146, 2802, 1081, 15217, 3739, 3535, 5378, 6883, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0002414854388916865, 9.8013209935743362e-05, 0.00025144315441139042, 0.00027532034437172115, 9.0119450760539621e-05, 6.9677429564762861e-05, 0.00020847746054641902, 0.000125590551760979, 7.9807796282693744e-05, 0.00013646420848090202, 5.9758360293926671e-05, 9.1839407104998827e-05, 0.00017634368850849569, 0.00036962557351216674, 0.00012244698882568628, 0.00017071259208023548, 0.00019453595450613648, 8.7650769273750484e-05, 0.00015428326150868088, 8.0249345046468079e-05, 0.00019293547666165978, 8.3568658737931401e-05, 0.00015576703299302608, 0.00016251159831881523, 5.5820517445681617e-05, 0.00014587439363822341, 0.00016835154383443296, 0.00013881827180739492, 0.0001219627883983776, 0.0001687711919657886, 0.00012883931049145758, 0.00012589724792633206, 0.0001575419883010909, 4.3146737880306318e-05, 0.00015272067685145885, 0.00015818391693755984, 0.00011996331886621192, 0.0001254888775292784, 0.00012439992860890925, 0.00012863389565609396, 4.3236617784714326e-05, 0.00019214453641325235, 0.0001529692963231355, 0.00012623937800526619, 0.0001264100574189797, 0.00010437862511025742, 7.2946982982102782e-05, 6.7089764343108982e-05, 0.00017368995759170502, 0.00022238494420889765, 0.00032906062551774085, 0.00011000543599948287, 0.00017431341984774917, 9.8769363830797374e-05, 7.2824004746507853e-05, 0.00035434204619377851, 0.0001882399374153465, 3.4858036087825894e-05, 0.00012234043970238417, 0.0001621998380869627, 0.0001288145431317389, 6.2887054809834808e-05, 0.00015066536434460431, 0.00022011224064044654, 2.9353968784562312e-05, 0.00010147853754460812, 0.00023165436869021505, 0.00011337809701217338, 0.00015642111247871071, 0.00012284684635233134, 0.00024804953136481345, 0.00013623046106658876, 0.00013652379857376218, 0.00013846872025169432, 0.00015827131574042141, 0.00015611980052199215, 0.00018301293312106282, 8.0705845903139561e-05, 0.00014024590200278908, 0.00013472401769831777, 0.00012692541349679232, 0.00018382241250947118, 0.0001291272637899965, 6.0833364841528237e-05, 0.00010273404041072354, 7.1180576924234629e-05, 8.6717693193349987e-05, 0.00020106688316445798, 0.00017797289183363318, 0.00019904115470126271, 0.00017805385868996382, 5.8536639699013904e-05, 0.00013902297359891236, 0.00012123530905228108, 0.00010655663936631754, 9.8110489489044994e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 49,25,-2,70,-127,-34,96,43,60,105,-52,54,-3,16,23,105, 
  /* [1][0][][] */ -21,-5,-56,25,127,73,-24,-3,-6,27,-59,33,-34,81,-47,-47, 
  /* [2][0][][] */ -33,66,69,-17,67,89,3,36,32,-6,44,-10,50,-127,-24,7, 
  /* [3][0][][] */ 127,-38,-4,3,12,47,-9,11,34,16,-33,-28,-38,56,-41,64, 
  /* [4][0][][] */ -12,-6,25,50,-121,-1,-116,7,-10,45,-47,-96,-17,20,-98,127, 
  /* [5][0][][] */ -77,-14,37,31,127,28,8,18,-53,14,-39,-5,-57,34,-79,-39, 
  /* [6][0][][] */ -127,19,-41,27,-10,-69,86,6,4,-34,-54,42,6,14,-56,9, 
  /* [7][0][][] */ -56,113,59,-104,69,96,127,33,60,-6,2,65,102,52,-50,10, 
  /* [8][0][][] */ -58,-16,-38,37,-54,79,-27,-65,33,-38,72,28,127,74,-112,20, 
  /* [9][0][][] */ -16,-127,-39,102,-80,-84,-10,98,64,52,21,72,-92,8,6,-57, 
  /* [10][0][][] */ -27,-24,-56,36,-104,103,64,-101,17,-54,36,-5,66,127,-43,89, 
  /* [11][0][][] */ -33,-120,-49,7,-18,78,26,-21,74,45,62,-94,-1,127,-111,90, 
  /* [12][0][][] */ -6,-63,-61,97,-79,-127,12,42,58,59,-39,92,25,-53,-35,-15, 
  /* [13][0][][] */ -57,-14,-37,-1,-19,-4,28,29,-7,127,-2,-25,47,29,13,-11, 
  /* [14][0][][] */ -127,-9,-31,-72,-13,114,-27,-101,93,-58,91,-4,103,-52,-107,-51, 
  /* [15][0][][] */ -9,-127,83,-39,-46,-33,8,55,19,-49,-70,-28,70,-31,-24,-42, 
  /* [16][0][][] */ -22,0,5,-51,17,39,-2,-16,50,-127,55,-24,-6,8,-79,-72, 
  /* [17][0][][] */ -20,10,19,-52,70,-11,-75,18,90,-24,9,86,111,-59,-64,-127, 
  /* [18][0][][] */ 48,-12,-15,-124,-4,-45,127,-41,37,55,-18,45,-3,89,-9,-117, 
  /* [19][0][][] */ -50,-35,-10,-72,-89,37,-25,-14,30,-13,12,-127,-2,-9,-42,-26, 
  /* [20][0][][] */ 36,46,62,-88,62,-12,-55,88,-124,-127,20,-83,-46,104,-30,-14, 
  /* [21][0][][] */ -11,-64,-77,3,80,56,101,63,-60,-127,-26,-3,68,-83,-36,49, 
  /* [22][0][][] */ 83,-3,81,-24,13,18,71,13,36,127,31,40,10,1,96,-5, 
  /* [23][0][][] */ -79,-28,6,73,101,44,54,-13,-28,11,-40,-75,27,68,18,127, 
  /* [24][0][][] */ 30,-14,47,35,23,-105,26,-70,30,123,-127,70,-13,-82,62,-94, 
  /* [25][0][][] */ 127,-13,84,108,43,-27,-24,51,-123,96,36,-42,-18,73,59,-7, 
  /* [26][0][][] */ -23,26,3,44,-59,115,-19,49,-64,-39,-77,40,4,33,43,-127, 
  /* [27][0][][] */ 30,1,-4,-51,-41,15,-89,0,-93,-15,-70,-53,-81,37,-28,127, 
  /* [28][0][][] */ -51,13,7,12,20,-37,-127,-2,-17,-31,2,-2,9,-53,-60,-38, 
  /* [29][0][][] */ -24,-107,-20,89,-27,12,122,9,74,60,-127,51,17,-25,-64,72, 
  /* [30][0][][] */ 52,-59,-72,43,-127,6,54,-26,-3,-2,19,-17,-22,52,-18,68, 
  /* [31][0][][] */ -127,-22,5,75,-41,-11,-40,14,-23,-58,5,-26,-17,-46,-20,70, 
  /* [32][0][][] */ -127,-103,-120,-2,-106,-44,-5,-39,124,79,-72,-87,40,48,28,-14, 
  /* [33][0][][] */ -39,2,-74,27,-127,-69,44,-15,-113,25,-63,-83,-29,107,53,83, 
  /* [34][0][][] */ 21,38,-14,27,-40,-68,40,48,13,-127,-36,51,-43,40,25,94, 
  /* [35][0][][] */ 21,-13,-51,4,-127,-26,60,-39,8,63,-29,-9,-4,96,65,67, 
  /* [36][0][][] */ -30,-17,-75,47,127,-4,44,88,-90,35,-106,-125,8,27,2,70, 
  /* [37][0][][] */ -125,84,0,-61,26,-127,-54,-26,-44,-40,-30,29,39,-113,43,-107, 
  /* [38][0][][] */ -2,106,0,-54,-93,-43,-119,-28,-60,-69,6,23,-127,-107,69,19, 
  /* [39][0][][] */ -28,-57,4,57,-3,75,92,-30,-32,31,25,-42,-13,96,77,127, 
  /* [40][0][][] */ 90,73,78,75,-125,-10,-9,26,-70,69,9,-73,-127,3,123,61, 
  /* [41][0][][] */ -15,-2,14,42,-74,102,-15,32,-28,43,-96,23,14,29,44,-127, 
  /* [42][0][][] */ -13,-110,42,-59,110,34,67,7,-24,-127,-116,-30,8,-19,21,56, 
  /* [43][0][][] */ -33,-104,-29,-20,107,46,-29,60,-48,-36,-127,-82,112,-20,-51,46, 
  /* [44][0][][] */ -73,-86,-91,-127,42,79,71,2,-1,-105,-55,72,-42,23,54,59, 
  /* [45][0][][] */ 4,-73,-60,-18,-127,37,-29,-94,79,-54,26,-48,21,34,-43,67, 
  /* [46][0][][] */ 63,-62,3,-8,82,-100,-23,117,6,-40,50,70,-38,-60,71,-127, 
  /* [47][0][][] */ -117,-66,-22,58,-27,27,36,57,9,127,82,89,-42,116,4,93, 
  /* [48][0][][] */ 49,-17,-71,-85,51,-66,-10,52,48,-58,-14,35,-57,1,-38,-127, 
  /* [49][0][][] */ 64,63,27,36,-19,-9,33,50,-21,127,-41,27,-51,-74,88,65, 
  /* [50][0][][] */ 13,-14,4,-2,-127,-18,4,-47,44,13,8,46,-14,-41,21,-5, 
  /* [51][0][][] */ 57,16,-11,-127,-36,100,61,-69,25,3,-1,-59,59,56,-31,10, 
  /* [52][0][][] */ 11,-13,3,-92,65,-91,-28,-21,50,4,127,-42,36,7,-25,82, 
  /* [53][0][][] */ -71,-112,52,-27,-47,-127,12,-99,-17,105,-104,87,-20,-5,48,-77, 
  /* [54][0][][] */ 57,64,52,-17,-127,-63,-113,-125,-7,36,49,104,-99,-37,89,-17, 
  /* [55][0][][] */ -1,0,-8,61,-24,8,10,-8,8,127,-1,47,-7,5,2,42, 
  /* [56][0][][] */ 59,-102,-56,64,-56,48,-2,72,127,12,45,60,-30,-21,33,45, 
  /* [57][0][][] */ 86,47,127,-72,74,15,-29,2,109,-44,23,88,68,-76,58,-71, 
  /* [58][0][][] */ 66,-61,13,-66,57,11,-8,127,34,104,-19,70,52,59,65,-2, 
  /* [59][0][][] */ -40,35,20,-50,2,-32,-19,4,10,25,-82,-79,-127,-53,35,-2, 
  /* [60][0][][] */ 17,-29,68,-12,-10,-7,12,-54,36,127,-19,61,-16,-21,-14,-23, 
  /* [61][0][][] */ 49,34,39,-69,-107,-127,-12,-19,-58,-32,-49,-4,-86,-51,83,122, 
  /* [62][0][][] */ -11,82,-44,35,-68,127,-45,16,-58,3,-49,20,-38,26,76,-81, 
  /* [63][0][][] */ 6,-17,-73,-127,-33,-42,56,-6,0,-81,-13,11,-39,49,39,-30, 
  /* [64][0][][] */ -71,32,-1,-78,40,-57,53,98,-127,-35,-79,-40,-27,118,72,93, 
  /* [65][0][][] */ -52,-30,-35,1,50,45,-55,-68,-110,-38,-20,-34,-99,127,-32,30, 
  /* [66][0][][] */ -17,46,-13,31,-43,127,-5,20,-56,3,-26,32,-14,51,37,-61, 
  /* [67][0][][] */ 6,-18,-49,-45,11,-68,80,-127,4,23,35,123,-68,-38,-3,-113, 
  /* [68][0][][] */ -3,-127,-11,54,0,8,7,54,21,48,30,7,-58,34,-1,-3, 
  /* [69][0][][] */ -16,61,45,-127,42,21,-47,71,13,85,1,38,5,-67,7,-71, 
  /* [70][0][][] */ 38,32,49,-37,74,10,-85,-35,-127,-93,-7,22,-18,37,-99,-7, 
  /* [71][0][][] */ -4,-29,72,18,83,-75,37,29,-113,97,-126,-42,16,127,-21,72, 
  /* [72][0][][] */ -5,-2,50,29,-72,-53,-121,-49,-35,61,-31,35,8,127,-127,4, 
  /* [73][0][][] */ 6,-47,-25,-43,64,-113,18,-40,75,103,103,-6,24,-30,-90,127, 
  /* [74][0][][] */ 19,10,-34,112,-84,-16,96,34,75,72,34,127,123,31,-60,22, 
  /* [75][0][][] */ -23,26,-27,34,-26,127,-39,25,-23,46,-51,56,-20,56,21,-75, 
  /* [76][0][][] */ -43,106,-58,34,-104,-7,-16,20,65,40,-42,-16,51,-43,-127,30, 
  /* [77][0][][] */ 102,127,-89,117,67,74,84,44,28,4,88,-39,88,36,64,22, 
  /* [78][0][][] */ 0,-42,-9,-41,53,-91,53,-40,36,10,127,-27,11,6,-34,127, 
  /* [79][0][][] */ -53,57,-3,27,4,-24,-34,-5,-127,-5,56,7,102,37,-77,-31, 
  /* [80][0][][] */ -69,66,80,-22,60,39,-25,-126,-68,85,-79,-68,-55,-127,26,75, 
  /* [81][0][][] */ 104,71,-28,9,36,-24,72,107,-107,119,-64,-39,-38,1,107,127, 
  /* [82][0][][] */ 26,127,-23,-87,-24,-31,83,-94,45,32,-32,45,62,7,23,-37, 
  /* [83][0][][] */ -10,-43,36,40,17,27,-34,-118,69,-20,94,35,60,-51,-51,-127, 
  /* [84][0][][] */ -127,-92,-52,-32,-16,103,108,11,90,63,110,101,70,80,-76,2, 
  /* [85][0][][] */ 93,16,95,-101,91,2,-7,90,13,127,-50,29,-34,77,118,-2, 
  /* [86][0][][] */ -84,77,-52,-11,34,127,13,20,102,52,126,-51,-20,67,-25,-22, 
  /* [87][0][][] */ 11,-53,22,-38,37,-127,22,-27,39,-11,64,-35,33,-35,-37,68, 
  /* [88][0][][] */ -80,36,56,-31,93,-11,38,-8,-44,-73,104,-71,85,117,111,-127, 
  /* [89][0][][] */ -29,42,-14,21,-32,127,-18,35,-51,13,-43,19,-13,68,30,-74, 
  /* [90][0][][] */ 65,-70,34,35,127,9,45,42,-5,-106,-115,-20,-18,-25,-45,40, 
  /* [91][0][][] */ -2,57,-59,-26,27,-56,-101,54,-100,10,-90,-127,-118,-80,-49,25, 
  /* [92][0][][] */ 62,81,81,30,-127,-100,22,7,-27,47,-40,-32,-27,-78,23,-1, 
  /* [93][0][][] */ -2,-127,-107,81,-47,-69,-50,82,78,79,9,71,-64,61,-22,-42, 
  /* [94][0][][] */ 106,21,82,2,25,-67,4,61,10,80,28,78,0,39,127,5, 
  /* [95][0][][] */ -88,-13,6,-41,108,8,59,75,-62,-27,-127,-103,3,3,-38,63, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0049723046831786633, 0.0020181403961032629, 0.0051773390732705593, 0.0056689819321036339, 0.0018556040013208985, 0.001434692763723433, 0.0042926538735628128, 0.0025859714951366186, 0.0016432820120826364, 0.0028098654001951218, 0.0012304541887715459, 0.0018910188227891922, 0.003631003899499774, 0.0076107732020318508, 0.0025212441105395555, 0.0035150565672665834, 0.0040055913850665092, 0.0018047726480290294, 0.0031767687760293484, 0.0016523736994713545, 0.0039726370014250278, 0.0017207199707627296, 0.0032073201145976782, 0.0033461940474808216, 0.0011493720812723041, 0.0030036258976906538, 0.0034664415288716555, 0.0028583367820829153, 0.0025112740695476532, 0.0034750823397189379, 0.0026528651360422373, 0.0025922865606844425, 0.0032438675407320261, 0.00088841264368966222, 0.0031445943750441074, 0.0032570851035416126, 0.0024701040238142014, 0.0025838781148195267, 0.0025614560581743717, 0.0026486355345696211, 0.00089026335626840591, 0.003956350963562727, 0.0031497133895754814, 0.002599331084638834, 0.0026028456632047892, 0.0021492075175046921, 0.0015020144637674093, 0.001381411449983716, 0.0035763620398938656, 0.0045790160074830055, 0.0067755207419395447, 0.0022650663740932941, 0.003589199623093009, 0.0020337100140750408, 0.0014994823141023517, 0.0072960779070854187, 0.0038759533781558275, 0.00071774417301639915, 0.0025190501473844051, 0.0033397749066352844, 0.0026523550041019917, 0.0012948755174875259, 0.0031022743787616491, 0.0045322198420763016, 0.00060441275127232075, 0.0020894932094961405, 0.0047698779962956905, 0.0023345111403614283, 0.0032207879703491926, 0.0025294772349298, 0.0051074624061584473, 0.0028050525579601526, 0.0028110924176871777, 0.0028511395212262869, 0.0032588846515864134, 0.0032145839650183916, 0.0037683267146348953, 0.0016617733053863049, 0.002887732582166791, 0.0027740341611206532, 0.0026134569197893143, 0.0037849943619221449, 0.0026587941683828831, 0.0012525890488177538, 0.0021153446286916733, 0.0014656432904303074, 0.001785560161806643, 0.0041400664485991001, 0.0036645499058067799, 0.004098355770111084, 0.0036662169732153416, 0.001205298351123929, 0.0028625517152249813, 0.0024962949100881815, 0.0021940539591014385, 0.0020201434381306171, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -7492, 11002, -19164, 251, 11496, -15091, -39899, -7521, -6732, 7630, -18756, -9679, 2158, -11709, -3661, -1215, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013064929225947708, 0.0001478456542827189, 0.00016420705651398748, 0.00015702935343142599, 9.4536037067882717e-05, 0.00013774896797258407, 8.5156323621049523e-05, 0.00014900634414516389, 8.6446729255840182e-05, 7.5447365816216916e-05, 0.00017938607197720557, 0.00010235018271487206, 0.00010303279850631952, 7.8731514804530889e-05, 0.00012839578266721219, 0.00011249003728153184, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 31,36,19,-31,74,72,-36,62,-9,119,12,52,-37,50,-10,49,28,96,66,-82,-71,75,-3,68,63,51,36,52,-66,-50,6,103,-41,-2,-77,71,64,-127,-45,11,12,-33,67,1,-25,-62,-62,-20, 
  /* [1][0][][] */ -40,4,-79,-46,12,99,-63,27,-3,-33,-42,33,55,-28,-29,-22,-30,-34,-9,20,-70,45,-106,-51,-49,-49,52,69,-30,-26,46,-42,6,-67,-41,57,19,-56,127,-39,-23,25,-52,-11,26,49,44,24, 
  /* [2][0][][] */ -3,6,52,-27,-23,-76,17,12,93,85,-70,12,105,-49,127,79,-66,-28,-39,26,85,-74,-34,-91,3,-29,27,-71,35,46,-47,18,22,-23,46,48,-58,15,13,-29,15,32,56,-16,15,-75,97,-60, 
  /* [3][0][][] */ 40,-2,-24,-21,24,106,25,-8,46,-43,29,-11,-45,7,13,53,-31,-63,48,-127,0,-13,-26,-13,-44,86,120,62,-16,-40,31,48,50,-39,85,39,-34,-57,9,31,22,11,-17,6,20,29,-11,-35, 
  /* [4][0][][] */ 123,0,14,-62,105,83,38,13,83,-27,-114,30,49,-42,15,-18,-109,-123,-35,-91,-36,35,-43,-26,-71,123,-85,127,-72,-54,42,87,54,-55,26,-27,-10,15,-47,45,-39,-7,5,47,-56,93,-18,-32, 
  /* [5][0][][] */ -8,-4,-56,1,-19,60,15,-32,59,56,35,87,51,-13,29,-5,-36,127,-28,34,10,5,-69,-22,30,4,-65,-38,-14,29,13,-21,-36,7,36,14,-45,6,-78,9,81,-21,24,45,-14,8,-39,37, 
  /* [6][0][][] */ 52,22,22,61,11,-32,93,-49,9,61,127,103,44,46,-52,50,44,-50,-103,94,64,-55,-56,60,-84,86,93,-4,105,49,-26,-13,112,-58,-110,-16,91,23,7,-5,14,60,57,-41,76,125,41,6, 
  /* [7][0][][] */ -95,-17,-29,21,-60,-51,27,37,79,112,-59,-75,-99,6,-7,-20,-85,100,6,127,-60,44,15,45,-21,-103,-36,-86,26,42,-6,10,-22,13,17,-29,7,-57,117,6,14,45,12,-10,53,68,-37,-1, 
  /* [8][0][][] */ -10,-86,54,-63,66,-55,77,-33,-31,-116,22,8,-29,12,38,23,4,2,-32,99,7,52,-12,27,65,-3,-73,-32,-127,-24,-63,-112,11,-67,-8,103,10,33,115,16,11,-7,75,119,1,-67,-43,86, 
  /* [9][0][][] */ 13,-46,16,-69,29,86,-39,42,19,-37,-37,-24,15,-36,114,-8,-4,-104,53,43,-64,32,53,-34,-19,-85,-23,72,45,63,-44,-19,-57,22,-4,127,-28,-51,-46,-34,-23,3,26,111,39,78,-72,7, 
  /* [10][0][][] */ -9,26,-19,-6,22,25,-59,-47,37,38,62,-3,-29,-6,51,-53,-61,127,1,46,-2,-6,14,28,-43,51,0,88,41,12,-36,-6,81,12,-10,22,-9,-45,-42,32,-79,6,30,-19,31,46,29,41, 
  /* [11][0][][] */ -13,40,-16,35,22,46,8,13,38,7,-127,-79,62,25,4,-37,-11,16,-40,-52,-11,2,112,8,47,0,-28,23,0,19,-18,54,29,-5,-44,3,46,71,87,18,31,-22,59,9,-55,-18,74,1, 
  /* [12][0][][] */ -62,13,41,20,-56,-64,5,10,-35,-36,-127,14,74,-92,26,33,52,100,87,-126,-26,45,-38,-79,2,-17,36,-28,7,16,-11,82,74,61,33,-22,-50,-23,31,4,-31,15,68,-3,45,-13,-26,-23, 
  /* [13][0][][] */ -53,-115,-39,-96,13,20,60,16,-116,21,115,-54,60,41,127,5,109,24,1,-88,72,-80,104,-5,-71,-1,-27,8,-44,-90,-97,14,48,-18,-66,41,22,-53,66,-82,1,56,65,46,61,-24,93,-67, 
  /* [14][0][][] */ 76,15,-49,6,-37,11,-83,-30,-29,55,57,47,-16,-65,16,-40,49,-122,27,17,85,-61,30,-1,-7,124,-94,-2,-50,-31,-95,2,127,42,94,-26,-78,11,-29,66,-10,-53,107,-31,-60,-54,-54,54, 
  /* [15][0][][] */ -77,7,44,14,91,3,2,29,6,81,-22,58,59,-17,-37,-15,7,36,-1,-30,30,-51,-58,-54,48,-63,-35,66,-34,8,15,1,-66,4,127,-15,-91,8,61,-26,-47,-13,13,-2,-33,-33,-11,2, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0055525950156152248, 0.0062834401614964008, 0.0069788000546395779, 0.0066737476736307144, 0.0040177814662456512, 0.0058543309569358826, 0.0036191437393426895, 0.0063327695243060589, 0.0036739860661327839, 0.0032065131235867739, 0.0076239081099629402, 0.0043498827144503593, 0.0043788938783109188, 0.0033460892736911774, 0.0054568205960094929, 0.0047808266244828701, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15092, -109, 21626, 419, 14390, -1854, 41751, 222, 10269, 40549, 368, 22586, 1684, 12711, 35838, 19319, 422, -2353, 1470, 34924, -1551, 20665, -551, 14099, 16563, 29110, 213, -3079, -3586, 14909, 19148, -1414, 428, 596, -1182, 19721, 11342, 28687, 3318, 21383, 20089, 490, 1098, 13977, -1399, -592, 46533, 34632, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.7365813669748604e-05, 0.00011872215691255406, 5.9864101785933599e-05, 9.7928459581453353e-05, 0.00010418472811579704, 0.00010078497143695131, 4.7332716349046677e-05, 0.00021282027591951191, 9.1755406174343079e-05, 5.4822303354740143e-05, 6.85995037201792e-05, 0.00010127795394510031, 6.5234969952143729e-05, 0.00010518902126932517, 5.3147792641539127e-05, 0.00012168415560154244, 8.7553227785974741e-05, 8.9606801338959485e-05, 0.00021957233548164368, 6.9984729634597898e-05, 8.0506164522375911e-05, 6.8087458203081042e-05, 0.00010580582602415234, 0.00012404019071254879, 6.6607513872440904e-05, 8.0048375821206719e-05, 7.5042640673927963e-05, 5.9380832681199536e-05, 0.00021088810171931982, 9.0489447757136077e-05, 7.2723225457593799e-05, 0.00022512867872137576, 0.00013582815881818533, 0.00019246290321461856, 0.0001015234665828757, 7.5618932896759361e-05, 0.0001037866750266403, 6.1451864894479513e-05, 7.8036930062808096e-05, 0.0001077463457477279, 6.7810615291818976e-05, 0.00018795361393131316, 0.00017677988216746598, 9.9897988548036665e-05, 0.00015848931798245758, 6.5518419432919472e-05, 4.1982220864156261e-05, 4.861165871261619e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -127,35,-124,94,-77,62,-73,65,-87,-89,58,-42,94,-71,-21,-59,82,69,102,-102,96,-127,67,-57,-98,-20,62,125,-104,-71,-118,127,98,-94,54,-127,-72,-127,103,-29,-1,-83,80,-85,124,90,-49,-77, -112,41,-86,127,-51,120,-67,33,-111,-109,81,-74,93,-127,-29,-87,97,108,113,-127,127,-91,89,-127,-114,-48,60,113,47,-114,-126,78,127,-127,79,-118,-96,-84,103,-55,-74,95,116,-54,-25,113,-77,-89, -58,37,-18,28,-34,70,-64,55,-73,-56,40,-36,56,-66,-13,-7,61,50,83,-43,44,-43,35,-48,-80,-35,18,37,90,-28,-89,52,81,-78,44,-87,-33,-15,36,-51,-71,-38,48,-28,-84,60,-9,-81, 
  /* [0][1][][] */ -107,102,-74,124,-60,103,-122,33,-84,-115,93,-89,103,-98,-106,-87,121,90,-32,-55,103,-116,96,-78,-116,-80,98,110,-127,-69,-109,108,112,40,84,-114,-126,-121,107,-66,-97,-127,107,-113,127,82,-116,-103, -89,127,-127,123,-127,127,-127,91,-127,-127,127,-127,127,-122,-127,-127,127,127,-29,-75,114,-93,127,-99,-127,-127,127,127,14,-127,-127,80,112,30,127,-126,-127,-82,127,-127,-127,120,127,-59,-77,127,-119,-118, -74,77,-124,32,-85,49,-109,125,-63,-52,52,-40,47,-57,-81,-27,56,52,-16,-8,50,-71,30,-42,-93,-79,32,69,113,-41,-32,70,54,9,64,-76,-54,-13,60,-62,-44,-80,34,-40,-93,77,-92,-127, 
  /* [0][2][][] */ -39,53,-3,60,-29,63,-56,30,-71,-57,44,-56,74,-62,-49,-21,96,29,-83,-20,42,-48,52,-45,-67,-33,33,5,-60,-21,-23,49,39,39,57,-69,-54,-60,31,-101,-72,-34,75,-126,86,51,-88,-98, -67,67,-87,74,-77,54,-60,63,-70,-82,66,-71,87,-91,-45,-25,87,43,-127,-17,56,-63,46,-60,-64,-42,42,27,37,-76,-3,80,18,59,53,-50,-51,-83,37,-106,-44,100,71,-127,-15,88,-127,-95, -66,30,-77,33,-45,20,-49,127,-25,-12,31,-24,15,-37,-54,25,36,22,-60,-23,39,-32,31,-24,-3,-20,20,10,80,-34,34,109,8,48,24,-10,-20,-12,23,-48,16,-14,3,-37,-37,54,-89,-94, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003713047131896019, 0.005045691505074501, 0.0025442242622375488, 0.0041619595140218735, 0.0044278507120907307, 0.0042833611369132996, 0.0020116404630243778, 0.0090448614209890366, 0.0038996047805994749, 0.0023299478925764561, 0.002915478777140379, 0.004304313100874424, 0.0027724863030016422, 0.004470533225685358, 0.0022587811108678579, 0.005171576514840126, 0.0037210120353847742, 0.0038082888349890709, 0.0093318242579698563, 0.0029743509367108345, 0.0034215119667351246, 0.0028937167953699827, 0.0044967476278543472, 0.0052717081271111965, 0.0028308192268013954, 0.0034020559396594763, 0.0031893122941255569, 0.0025236853398382664, 0.008962743915617466, 0.0038458013441413641, 0.0030907371547073126, 0.0095679685473442078, 0.0057726968079805374, 0.0081796729937195778, 0.0043147471733391285, 0.0032138046808540821, 0.0044109337031841278, 0.0026117041707038879, 0.0033165693748742342, 0.004579219501465559, 0.0028819511644542217, 0.0079880282282829285, 0.0075131449848413467, 0.0042456644587218761, 0.0067357961088418961, 0.0027845327276736498, 0.0017842443194240332, 0.0020659954752773046, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2231, -1724, 668, -2558, 3514, -1022, 4800, -4210, 893, 682, 2265, 4023, 446, -353, 516, 4865, -2169, 3660, 7276, 1275, -964, 2842, -655, 5680, 2195, 2845, 1475, -1238, 10704, -362, 2658, -1528, -1509, 4630, -852, 2222, 1704, 1648, 302, 6638, 1827, 13715, -4236, 1881, 9663, -200, 3061, 3827, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00018015058594755828, 0.00021516899869311601, 0.00029581470880657434, 0.00017838315397966653, 0.00020975482766516507, 0.00019687626627273858, 0.00015067918866407126, 0.00012925064947921783, 0.00024775840574875474, 0.00027059292187914252, 0.00019762721785809845, 0.00017695891438052058, 0.00027632591081783175, 0.00028856346034444869, 0.00024876598035916686, 0.00017524760914966464, 0.00021409128385130316, 0.00020171856158412993, 0.00012981319741811603, 0.00024571805261075497, 0.00023372589203063399, 0.00018680485663935542, 0.00019043097563553602, 0.00014056057261768728, 0.0001832974812714383, 0.00016679949476383626, 0.00021794834174215794, 0.00024560731253586709, 8.8709020928945392e-05, 0.00027691025752574205, 0.00017917194054462016, 0.00017641436716075987, 0.00015747066936455667, 0.00016266253078356385, 0.00020873863832093775, 0.00020980784029234201, 0.00025319727137684822, 0.00019958952907472849, 0.00019124223035760224, 0.00013208884047344327, 0.00027843588031828403, 6.978079181862995e-05, 0.00012833668733946979, 0.00022706514573656023, 9.3979884695727378e-05, 0.00020439687068574131, 0.00019864314526785165, 0.00015778627130202949, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 72,45,127,-49,69,98,-100,-51, 
  /* [1][0][][] */ 8,-84,-127,9,59,39,24,8, 
  /* [2][0][][] */ -127,-1,-52,-14,50,20,-68,-43, 
  /* [3][0][][] */ 31,65,127,-77,-16,-108,-16,0, 
  /* [4][0][][] */ -127,16,-40,-23,52,19,-46,-55, 
  /* [5][0][][] */ -88,34,-62,-13,12,42,-84,-127, 
  /* [6][0][][] */ -34,-127,-115,40,93,8,12,38, 
  /* [7][0][][] */ -74,-127,-102,-83,-81,-49,11,105, 
  /* [8][0][][] */ 86,40,-17,-12,95,-86,-127,13, 
  /* [9][0][][] */ -32,49,-55,84,-63,-37,127,-33, 
  /* [10][0][][] */ -26,127,37,61,119,-25,-16,57, 
  /* [11][0][][] */ -83,-27,-21,-4,-95,97,127,0, 
  /* [12][0][][] */ 65,25,-127,22,-13,-33,-57,-14, 
  /* [13][0][][] */ 72,-37,-72,6,26,-127,-31,-32, 
  /* [14][0][][] */ 9,-79,68,18,127,-124,-41,15, 
  /* [15][0][][] */ -40,-37,-12,127,59,62,-66,11, 
  /* [16][0][][] */ 104,45,-32,17,69,-109,-127,-13, 
  /* [17][0][][] */ 56,127,55,82,36,63,22,-86, 
  /* [18][0][][] */ 40,7,0,8,127,-10,11,-16, 
  /* [19][0][][] */ 4,127,21,14,-115,13,35,-28, 
  /* [20][0][][] */ -34,17,62,-127,22,24,-24,108, 
  /* [21][0][][] */ -35,64,55,-127,33,44,-9,118, 
  /* [22][0][][] */ -66,-63,-84,19,-127,95,109,-24, 
  /* [23][0][][] */ 114,53,-127,1,21,-52,-87,-11, 
  /* [24][0][][] */ -68,48,16,2,-15,71,-121,127, 
  /* [25][0][][] */ -95,-56,-127,2,-62,-74,60,95, 
  /* [26][0][][] */ 57,8,-24,-40,127,-28,118,-35, 
  /* [27][0][][] */ 127,-72,22,97,5,30,-12,95, 
  /* [28][0][][] */ 23,86,64,-21,127,-27,17,-31, 
  /* [29][0][][] */ -18,-10,-35,-43,-56,19,127,-34, 
  /* [30][0][][] */ 36,-127,-70,-63,-107,-14,12,-62, 
  /* [31][0][][] */ 5,21,-5,-5,-127,12,-26,-7, 
  /* [32][0][][] */ 44,-60,-48,84,-5,-81,108,-127, 
  /* [33][0][][] */ 61,127,40,46,74,-4,-38,-16, 
  /* [34][0][][] */ -121,-47,127,-23,-19,114,95,15, 
  /* [35][0][][] */ -41,57,127,-16,-63,-75,-27,32, 
  /* [36][0][][] */ -81,8,86,-19,-18,127,58,25, 
  /* [37][0][][] */ -24,-72,-8,-127,-45,-81,86,51, 
  /* [38][0][][] */ 46,-6,98,-55,48,67,-127,12, 
  /* [39][0][][] */ -15,99,-127,-31,-28,-11,-10,78, 
  /* [40][0][][] */ 73,-47,16,43,12,0,5,127, 
  /* [41][0][][] */ -35,123,127,9,10,83,-85,26, 
  /* [42][0][][] */ 68,-119,-119,-8,-127,10,1,-102, 
  /* [43][0][][] */ -9,-62,42,-71,127,-50,-8,37, 
  /* [44][0][][] */ 5,127,119,16,17,31,-74,2, 
  /* [45][0][][] */ -30,49,22,84,-107,49,-127,14, 
  /* [46][0][][] */ -42,-37,59,36,-127,-118,-15,-11, 
  /* [47][0][][] */ -26,78,45,-127,-116,56,-24,88, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022879980970174074, 0.002732748631387949, 0.0037569876294583082, 0.0022655508946627378, 0.0026639860589057207, 0.0025004222989082336, 0.0019136974588036537, 0.001641544746235013, 0.0031466495711356401, 0.0034366589970886707, 0.0025099597405642271, 0.0022474625147879124, 0.0035094704944640398, 0.0036648933310061693, 0.0031594464089721441, 0.0022257280070334673, 0.002719061216339469, 0.0025619217194616795, 0.0016486893873661757, 0.0031207362189888954, 0.0029684300534427166, 0.0023725104983896017, 0.0024185639340430498, 0.0017851862357929349, 0.0023279653396457434, 0.0021184328943490982, 0.0027680476196110249, 0.0031193296890705824, 0.0011266467627137899, 0.0035168919712305069, 0.0022755688987672329, 0.0022405465133488178, 0.0019999523647129536, 0.002065891632810235, 0.0026510800234973431, 0.0026646594051271677, 0.0032157257664948702, 0.0025348819326609373, 0.0024288673885166645, 0.0016775911208242178, 0.0035362683702260256, 0.00088624929776415229, 0.0016299370909109712, 0.0028838354628533125, 0.0011935892980545759, 0.0025959375780075788, 0.0025228625163435936, 0.0020039607770740986, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2338, 3217, 21734, -5236, 6637, -15913, 1879, -13143, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.585326915839687e-05, 0.00011023769911844283, 0.00017534798826090991, 0.00011019923840649426, 0.00013848990784026682, 0.00014140343409962952, 7.8301985922735184e-05, 8.8494860392529517e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-48,-1,-71,17,-10,93,104,-109,-72,-17,6,-50,-8,-65,57,-95,17,34,127,71,-19,6,91,82,87,31,-6,-84,-48,-82,-47,-64,106,42,-50,18,-23,85,-13,9,-3,4,-95,56,-49,-52,-61, 
  /* [1][0][][] */ -25,46,-26,-29,-76,72,-16,-55,-41,76,-7,22,51,38,-56,-6,-31,-115,79,-60,123,13,-70,19,66,-2,-85,58,40,-4,64,31,-35,-11,9,-11,0,110,-31,-20,50,36,-18,12,127,16,-39,63, 
  /* [2][0][][] */ -28,-33,100,5,77,-41,-1,17,-29,-1,-10,45,13,-43,-45,-127,-48,-88,-32,10,-97,29,-38,-30,-44,21,-7,-47,-38,13,-35,-13,1,-7,21,-7,32,-33,-51,13,34,-33,20,-44,-36,-31,-57,-44, 
  /* [3][0][][] */ 31,6,77,3,31,-28,39,83,-56,-25,48,-13,-67,60,-18,86,59,26,-28,36,-109,-63,127,-16,13,5,-42,-44,-44,65,120,-47,-13,-119,-21,41,-28,-73,-21,65,-78,-73,64,11,-92,-81,45,-7, 
  /* [4][0][][] */ 19,-26,72,-45,1,-10,-3,7,-61,-14,-26,18,54,-74,36,-106,36,55,-5,-44,12,27,10,23,12,3,42,-22,39,36,-127,-21,-25,-20,8,9,55,-2,29,10,-41,-23,-88,21,-9,-101,2,37, 
  /* [5][0][][] */ 24,-45,66,16,24,27,33,-2,-84,-6,-45,35,29,9,17,-39,94,73,-3,-8,78,-46,127,-86,-14,48,7,33,14,17,-32,-45,-13,-45,-31,12,49,31,59,10,-75,22,36,31,51,-23,68,-3, 
  /* [6][0][][] */ -38,37,-127,79,53,17,35,22,-22,-5,64,-78,-83,-19,-23,41,-112,21,-5,94,26,39,-83,-77,-11,-14,36,78,-42,-45,-39,6,38,71,-47,-22,-8,1,83,-1,72,56,-105,-44,-43,106,-54,-31, 
  /* [7][0][][] */ 31,80,-109,33,-3,46,118,59,44,66,-120,-3,-49,-3,-72,-81,26,40,98,93,81,7,127,27,92,94,-59,120,-83,39,-7,-76,39,-83,-21,25,9,81,-58,98,-49,50,-24,-96,71,4,69,-47, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.004073763731867075, 0.0046851020306348801, 0.0074522895738482475, 0.0046834675595164299, 0.0058858208358287811, 0.0060096457600593567, 0.0033278344199061394, 0.0037610314320772886, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1578, 5860, -377, -1260, 1261, -942, 2749, 1954, -6196, 407, -4889, -25, -145, -1303, -3714, 5126, 6219, 2930, -181, -4317, -6822, 983, 14166, -5134, 1452, -508, 6293, -6317, -1354, -467, -9296, 9457, 4302, -130, 1956, -257, -9, -524, 12615, -736, 6973, -2056, 3028, 6476, -1929, 13868, -1089, 91, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00024191792181227356, 0.000162627620738931, 0.00074969226261600852, 0.00022053670545574278, 0.00020278539159335196, 0.00024771620519459248, 0.00018820833065547049, 0.00026727924705483019, 0.00012515451817307621, 0.0002272734564030543, 0.00026047709980048239, 0.00090010237181559205, 0.00037579442141577601, 0.00042586622294038534, 0.00029850227292627096, 0.00060504855355247855, 0.00017446976562496275, 7.1852293331176043e-05, 0.00018522169557400048, 0.00027045485330745578, 0.0002512433857191354, 0.00023081162362359464, 0.00010207331797573715, 0.00034218153450638056, 0.00016890208644326776, 0.00033152330433949828, 0.00047912891022861004, 0.00021537994325626642, 0.00023946577857714146, 0.00032958603696897626, 0.00011946775339310989, 0.00011451866157585755, 0.00017123557336162776, 0.00022351976076606661, 0.00016737382975406945, 0.00025523363729007542, 0.0014771034475415945, 0.0002652826951816678, 0.00013356957060750574, 0.00016823627811390907, 0.00018271472072228789, 0.00013294394011609256, 0.00032972934423014522, 0.00018213603470940143, 0.00029607350006699562, 6.4228588598780334e-05, 8.8914850493893027e-05, 0.00015657268522772938, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 13,-33,9,17,-25,-105,-46,37,-10,-4,-19,7,43,3,-7,-6,102,5,39,4,3,-17,-54,24,-22,-9,-10,-25,-49,85,-1,-106,57,-10,-41,-46,-12,-44,1,6,-24,60,-1,-22,-9,68,127,-10, -127,-84,-22,127,-78,70,-101,127,21,20,-5,-7,47,22,-1,-46,-26,50,10,4,20,124,16,127,99,-32,-54,33,66,-123,-2,-71,75,-14,-26,-127,24,19,-55,-35,-127,-15,-127,-106,33,58,36,108, 6,11,10,15,-35,42,29,34,34,-34,-10,7,-7,-4,5,-5,-54,31,-64,-33,-5,-32,127,27,-62,4,2,23,20,50,11,-9,-3,-27,-29,73,12,9,13,74,25,-47,28,-42,-6,43,-6,-21, 
  /* [0][1][][] */ -11,-11,-30,6,31,-127,124,-93,8,7,21,36,127,28,7,-36,-11,-28,39,52,63,-67,39,20,-88,127,-74,-14,127,-101,44,-127,-42,16,-71,14,7,-80,-60,9,106,127,14,-127,-62,-56,-8,88, 103,-127,127,4,127,63,-73,-46,21,127,127,-127,-103,127,127,127,127,127,99,127,127,98,3,9,98,-108,-127,83,29,127,127,-10,-127,127,127,120,-127,127,-127,-127,31,31,-117,-38,127,-127,-22,84, 37,45,-44,7,-56,123,-127,82,127,-88,10,66,-25,13,24,-63,14,24,-127,23,10,-127,-24,2,71,-15,-22,127,-65,-39,11,-20,-31,11,98,-26,42,0,-6,-88,104,-12,45,44,-57,106,99,-84, 
  /* [0][2][][] */ -10,50,5,-31,5,-108,-11,-17,16,-8,13,2,-17,-11,4,-4,-44,2,22,-37,3,-10,80,-13,-127,7,42,-10,7,-2,16,22,9,2,-57,41,-2,-16,3,55,-34,11,19,5,-12,22,-28,12, 38,0,-35,-37,32,-8,117,-109,93,-45,0,0,-82,-22,-13,-65,-17,71,-15,29,16,20,-26,-40,-81,58,74,-1,-90,11,-20,-23,-14,4,-27,-1,57,-26,-14,108,-116,2,-6,51,44,63,-11,-127, 0,50,1,-14,-19,-14,-12,-73,5,-30,-17,3,27,-13,-1,16,48,28,-32,-15,-15,-25,-46,-13,41,-22,21,6,-7,3,-4,15,23,-21,-20,-58,-3,16,19,28,-14,-6,22,16,-15,35,52,-55, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010281511582434177, 0.0069116740487515926, 0.031861919909715652, 0.0093728099018335342, 0.0086183790117502213, 0.010527938604354858, 0.0079988539218902588, 0.011359367519617081, 0.0053190668113529682, 0.0096591217443346977, 0.011070276610553265, 0.038254350423812866, 0.015971262007951736, 0.018099313601851463, 0.012686346657574177, 0.025714563205838203, 0.007414964959025383, 0.0030537224374711514, 0.007871922105550766, 0.011494331061840057, 0.010677843354642391, 0.0098094940185546875, 0.0043381159193813801, 0.014542714692652225, 0.007178338710218668, 0.014089739881455898, 0.020362978801131248, 0.0091536473482847214, 0.010177295655012131, 0.014007406309247017, 0.0050773792900145054, 0.0048670428805053234, 0.0072775119915604591, 0.0094995899125933647, 0.0071133873425424099, 0.010847429744899273, 0.062776893377304077, 0.011274514719843864, 0.005676706787198782, 0.0071500414051115513, 0.0077653755433857441, 0.0056501175276935101, 0.014013497158885002, 0.0077407811768352985, 0.01258312352001667, 0.0027297148481011391, 0.0037788811605423689, 0.0066543389111757278, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3017, 4128, 13131, 2157, 2500, -1896, 4947, 18936, 4615, -1038, 4513, -1726, 15250, -1687, 2338, 46196, -411, 1843, 63, 2698, 4276, 4351, 375, 36033, 7566, 3480, 21418, 1601, 3971, 4636, 972, 1056, 1078, 1633, -374, 465, -2535, -656, 4549, 3041, 6644, 3059, 6204, 5547, 4088, 2522, 2087, 7800, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00019176834030076861, 0.0002016627840930596, 7.5381780334282666e-05, 0.0001560593955218792, 0.00020282740297261626, 0.00021093238319735974, 0.0001566940190969035, 5.309829066391103e-05, 0.00014480900426860899, 0.00019384095503482968, 0.00018552631081547588, 0.00022267656459007412, 6.3140425481833518e-05, 0.000222262620809488, 0.00021253792510833591, 2.5769175408640876e-05, 0.00029327525408007205, 0.00019487323879729956, 0.00023183338635135442, 0.00022874196292832494, 0.00016467475506942719, 0.00016885813965927809, 0.00034311306080780923, 3.1663264962844551e-05, 0.00011643386824289337, 0.00017301716434303671, 4.8564208555035293e-05, 0.00021948870562482625, 0.00018162008200306445, 0.00016272958600893617, 0.00032713674590922892, 0.00037812427035532892, 0.00020122417481616139, 0.00022670565522275865, 0.00023512891493737698, 0.00022937546600587666, 0.000215888925595209, 0.00021117784490343183, 0.00014153865049593151, 0.0001725332549540326, 0.00012127853551646695, 0.00017153972294181585, 0.00014230060332920402, 0.00015329677262343466, 0.00016856272122822702, 0.00023755876463837922, 0.0003395841340534389, 0.00011074724898207933, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 72,127,-75,-76,18,84,9,46, 
  /* [1][0][][] */ 47,-71,52,-127,-69,76,-84,-45, 
  /* [2][0][][] */ -39,127,120,51,88,-1,38,3, 
  /* [3][0][][] */ 108,42,-95,78,-13,-112,-127,-42, 
  /* [4][0][][] */ -50,52,36,-69,-51,113,127,65, 
  /* [5][0][][] */ 7,80,-127,-60,28,76,14,-28, 
  /* [6][0][][] */ -2,127,90,53,75,14,18,-78, 
  /* [7][0][][] */ 127,-20,-29,22,8,4,87,16, 
  /* [8][0][][] */ 66,106,44,80,127,60,104,-85, 
  /* [9][0][][] */ 29,118,-127,-76,5,86,-16,61, 
  /* [10][0][][] */ -74,-42,29,-56,-1,-15,-44,127, 
  /* [11][0][][] */ 17,-106,-127,-2,19,-10,31,-10, 
  /* [12][0][][] */ -18,-127,-101,-53,-115,24,-37,33, 
  /* [13][0][][] */ -8,13,-95,92,-127,-17,2,-13, 
  /* [14][0][][] */ -56,-39,-127,-4,40,-8,-19,-67, 
  /* [15][0][][] */ 18,-107,-127,33,-127,-48,-58,-14, 
  /* [16][0][][] */ 127,-52,-19,63,-87,23,23,111, 
  /* [17][0][][] */ -21,109,127,-31,-49,-9,-24,-34, 
  /* [18][0][][] */ -4,-127,56,76,-4,-82,36,-78, 
  /* [19][0][][] */ 127,-46,-54,42,-88,10,44,92, 
  /* [20][0][][] */ -27,-127,75,74,-21,-95,-9,-72, 
  /* [21][0][][] */ 0,-48,-9,-37,127,-17,27,24, 
  /* [22][0][][] */ -127,22,-69,58,48,36,-86,-114, 
  /* [23][0][][] */ -95,-59,77,11,-101,127,126,-48, 
  /* [24][0][][] */ -7,64,-27,-54,-23,127,117,1, 
  /* [25][0][][] */ -39,-90,-127,-40,-49,-7,-17,-39, 
  /* [26][0][][] */ -6,64,-26,127,-96,24,-59,-12, 
  /* [27][0][][] */ 18,-127,29,78,6,-55,6,-122, 
  /* [28][0][][] */ 14,127,54,51,96,0,29,-52, 
  /* [29][0][][] */ 91,43,-32,-27,34,-127,-81,20, 
  /* [30][0][][] */ 27,-13,30,-127,33,-28,19,-23, 
  /* [31][0][][] */ 48,-45,13,77,-15,21,4,127, 
  /* [32][0][][] */ -127,-75,-12,-68,-76,100,93,117, 
  /* [33][0][][] */ -43,35,49,-51,35,127,-100,82, 
  /* [34][0][][] */ 35,127,-63,-49,-3,39,-59,50, 
  /* [35][0][][] */ 2,-127,46,49,-20,-51,49,-80, 
  /* [36][0][][] */ 6,-27,-66,-4,-127,-59,-23,9, 
  /* [37][0][][] */ -48,-127,75,103,-48,-103,-21,-45, 
  /* [38][0][][] */ -72,31,69,-78,-127,-100,-74,92, 
  /* [39][0][][] */ 64,-127,110,50,0,-82,-2,-75, 
  /* [40][0][][] */ -3,45,15,48,-127,-28,-64,17, 
  /* [41][0][][] */ 94,124,-97,-127,67,36,8,11, 
  /* [42][0][][] */ -18,-36,-14,11,127,20,47,21, 
  /* [43][0][][] */ 127,14,83,17,-68,-28,66,108, 
  /* [44][0][][] */ 54,46,-22,-1,27,-93,-127,27, 
  /* [45][0][][] */ 56,5,17,16,79,-127,11,-64, 
  /* [46][0][][] */ 56,-33,-16,127,37,61,26,74, 
  /* [47][0][][] */ -85,-86,61,77,-53,19,127,-70, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030612393748015165, 0.0032191865611821413, 0.0012033355887979269, 0.002491209888830781, 0.0032377776224166155, 0.0033671590499579906, 0.0025013403501361609, 0.00084761949256062508, 0.0023116173688322306, 0.0030943250749260187, 0.0029615964740514755, 0.0035546340513974428, 0.0010079242056235671, 0.0035480260848999023, 0.003392788814380765, 0.00041135889478027821, 0.0046816160902380943, 0.0031108036637306213, 0.0037008062936365604, 0.0036514573730528355, 0.0026287385262548923, 0.0026955190114676952, 0.0054771876893937588, 0.00050544750411063433, 0.001858658972196281, 0.0027619102038443089, 0.00077524094376713037, 0.0035037456545978785, 0.0028992404695600271, 0.0025976875331252813, 0.0052221543155610561, 0.0060360794886946678, 0.0032121848780661821, 0.0036189511884003878, 0.0037534136790782213, 0.0036615701392292976, 0.0034462814219295979, 0.0033710775896906853, 0.0022594120819121599, 0.0027541855815798044, 0.0019359954167157412, 0.0027383256237953901, 0.0022715751547366381, 0.0024471094366163015, 0.0026908030267804861, 0.0037922018673270941, 0.0054208547808229923, 0.0017678822623565793, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7387, 16261, -4142, 8489, -1868, 3746, -12071, -18453, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021832423226442188, 0.00011019239900633693, 0.00013801308523397893, 0.00012756152136716992, 0.00016044470248743892, 0.00015138601884245872, 0.00017544327420182526, 0.00012618930486496538, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-9,31,13,-37,-9,11,5,-44,-4,-69,-55,-25,-63,-8,-31,46,-42,39,40,-19,30,-42,18,-3,-38,56,-14,-3,-26,16,12,84,37,37,-127,18,-2,-11,-33,7,-13,46,53,36,6,27,6, 
  /* [1][0][][] */ 8,41,71,-32,-20,54,-42,-36,2,29,-11,-94,7,106,-20,59,-26,30,-22,-61,8,-82,-47,36,-84,-13,-6,-117,-36,-15,32,-64,50,89,-45,10,124,-33,4,57,-37,42,-90,-33,127,-19,-44,-40, 
  /* [2][0][][] */ 0,-22,-63,18,-8,44,30,4,-2,46,-2,24,60,-89,17,-67,32,-84,27,37,-21,53,-11,25,-19,53,-24,-69,12,-2,22,-75,-52,-83,34,-17,104,26,-7,-59,1,29,82,37,127,14,14,22, 
  /* [3][0][][] */ -8,22,-73,40,13,-34,-72,-102,14,-17,-40,6,2,21,32,78,-8,16,-49,24,3,-100,31,-57,-78,-11,127,-10,-49,-7,-68,21,1,-80,16,-16,-26,-42,-23,109,-47,-31,-1,14,34,0,-42,41, 
  /* [4][0][][] */ -25,-45,-7,10,32,-29,-9,-8,31,-30,55,-78,5,31,10,2,-8,-24,16,-8,-6,-54,3,-17,14,-12,39,43,33,27,-15,23,-17,-4,0,4,-67,87,42,-19,40,-19,-24,-19,-72,17,127,9, 
  /* [5][0][][] */ 47,-19,8,20,26,-37,32,-127,25,-28,-14,122,-80,69,22,-70,2,-89,5,7,-37,61,-31,-51,-57,76,-29,5,-24,42,-46,-36,32,57,31,-1,-45,-10,-40,-39,21,-44,-53,-4,-34,53,87,27, 
  /* [6][0][][] */ 48,-25,16,-5,-36,-18,-34,20,-43,1,-43,127,-42,-37,-4,54,16,42,18,39,35,-83,-19,14,27,41,-63,6,13,-40,11,37,2,13,-20,1,8,2,1,-7,-1,-16,40,58,-2,-37,72,-12, 
  /* [7][0][][] */ -28,2,-7,63,29,34,1,29,19,0,77,-10,122,107,71,48,45,51,-4,2,30,-17,-91,-30,18,-6,-27,63,34,-27,-27,-16,37,5,42,-100,-74,42,42,56,-35,34,84,127,-60,-28,-110,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0092787798494100571, 0.0046831769868731499, 0.0058655561879277229, 0.0054213646799325943, 0.0068188998848199844, 0.0064339055679738522, 0.0074563389644026756, 0.005363045260310173, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13316, 4731, 5124, -525, 820, -2307, 27, 26717, -123, 465, 4347, 58869, -903, 616, 412, 11660, -1499, 14624, 1100, 8703, 10062, 39, 4706, -10695, 11100, 481, 402, 12145, -4864, -2232, -8682, 13058, 5420, 3297, -447, 3785, -8445, 10704, -2589, 18605, -2316, -65, 2276, -8, -906, -1578, 1114, -1100, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.7237756815738976e-05, 0.00011524323781486601, 0.00016266830789390951, 0.00012423402222339064, 0.00071479857433587313, 0.00013314890384208411, 0.00012094643898308277, 0.00010908957483479753, 0.00012558500748127699, 6.3528961618430912e-05, 7.9448996984865516e-05, 5.7182904129149392e-05, 8.7665255705360323e-05, 7.3365146818105131e-05, 0.00023286406940314919, 0.00016082089859992266, 0.00010750298679340631, 0.00032893946627154946, 0.00010998413927154616, 0.00014349089178722352, 0.00010333779209759086, 0.00042267009848728776, 0.00013493090227711946, 0.00023257164866663516, 0.00013974025205243379, 0.00013740164285991341, 6.4226725953631103e-05, 0.00010234450019197538, 0.00012294383486732841, 0.00071186834247782826, 0.00022413983242586255, 8.4574705397244543e-05, 0.00010951144940918311, 0.00013168042642064393, 0.00018162612104788423, 6.7489803768694401e-05, 9.2695270723197609e-05, 4.1348506783833727e-05, 0.00010596992797218263, 7.2504830313846469e-05, 0.00013121808297000825, 0.0001249614724656567, 9.358028182759881e-05, 8.3630598965100944e-05, 9.0415320300962776e-05, 0.00024941406445577741, 7.6908967457711697e-05, 0.0001495171309215948, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -55,-110,-17,-27,127,-45,83,-45,-78,-88,-15,-66,118,36,68,-117,50,-25,9,-36,-62,100,-11,15,-41,62,77,-30,120,-64,9,-45,-119,-91,45,64,17,95,127,-89,-127,-16,29,79,34,-127,74,85, -54,-127,-75,49,-78,99,43,-66,-71,47,64,-122,126,82,96,-72,-83,-92,36,-45,-71,74,-66,127,-75,78,92,-114,119,-41,17,-115,-57,-85,89,127,113,117,122,-79,-126,-68,58,99,85,124,71,69, 0,-83,-71,86,-35,-23,25,11,106,23,61,-87,30,50,-43,16,-101,-15,30,-47,-12,6,-84,7,-74,53,12,-88,64,60,127,-47,8,-1,-16,50,57,62,57,-24,-14,92,57,34,40,27,9,-118, 
  /* [0][1][][] */ -112,-71,-17,-66,-75,-62,109,-106,-127,-127,106,-76,104,46,-127,-100,127,-127,-58,-78,-79,127,-36,21,-32,100,111,-37,-88,-72,-6,-73,-88,-127,-127,63,31,98,0,-80,63,-22,68,127,76,126,118,-127, -127,-95,-110,-98,-27,127,127,-127,81,71,127,-127,127,127,47,-127,62,-113,-127,-127,-127,124,-127,119,-127,127,127,-127,-127,127,-7,-127,-127,-123,47,125,127,127,-20,-127,106,-115,127,127,127,1,127,118, -42,-63,-127,127,72,-43,53,-1,62,33,33,-58,30,58,66,-61,-31,3,-15,-79,-68,7,-63,-5,-87,73,17,-78,-36,40,122,-88,-31,0,62,67,66,94,-20,-42,58,127,76,9,52,-59,23,30, 
  /* [0][2][][] */ -118,-9,22,43,-51,-19,30,-39,27,-45,25,-44,19,20,-37,-24,-75,-24,113,-32,4,80,-68,1,-25,67,84,-11,56,56,-16,-10,18,-94,-49,33,12,32,-56,-48,21,-13,24,74,29,72,11,-72, -104,-19,-43,-86,73,48,43,-25,86,34,-49,-81,7,49,-123,-89,49,10,55,-71,-35,57,-63,46,-61,58,60,-43,46,8,-22,-72,-78,-27,-69,56,52,32,-86,-68,20,-64,75,85,46,-110,16,-8, -42,-14,-52,-21,-25,-10,25,-1,-75,29,3,-28,-3,18,29,-31,31,36,2,-53,-19,-9,-20,-22,-46,12,3,-19,26,-60,43,-9,-75,10,25,59,20,33,-41,-32,3,66,12,32,16,-9,-3,61, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037076047156006098, 0.0048978375270962715, 0.0069134030491113663, 0.0052799461409449577, 0.030378939583897591, 0.0056588281877338886, 0.005140223540365696, 0.004636306781321764, 0.0053373626433312893, 0.0026999807450920343, 0.0033765821717679501, 0.0024302734527736902, 0.0037257734220474958, 0.0031180186197161674, 0.0098967226222157478, 0.0068348878994584084, 0.0045688766986131668, 0.013979926705360413, 0.0046743256971240044, 0.0060983626171946526, 0.004391856025904417, 0.017963478341698647, 0.0057345633395016193, 0.0098842950537800789, 0.0059389607049524784, 0.0058395694941282272, 0.0027296359185129404, 0.0043496410362422466, 0.0052251131273806095, 0.030254404991865158, 0.0095259426161646843, 0.0035944248083978891, 0.0046542366035282612, 0.0055964179337024689, 0.007719110231846571, 0.0028683166019618511, 0.0039395489729940891, 0.00175731151830405, 0.0045037218369543552, 0.0030814553610980511, 0.0055767684243619442, 0.0053108623251318932, 0.0039771618321537971, 0.0035543004050850868, 0.0038426511455327272, 0.010600097477436066, 0.0032686309423297644, 0.0063544781878590584, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1386, -571, -504, 1351, 17463, 1947, -530, 5131, 1945, 1509, 342, 4647, 1409, 1215, -689, 405, 3724, 12138, 3670, -905, 1053, -1515, -53, 2710, -333, -881, 2008, -77, 2922, 15483, 3364, 4, 532, -91, 2862, -140, 363, -296, 1201, 1423, 1823, 2313, 314, -377, 686, 1779, 1428, -343, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00034976864117197692, 0.00035296901478432119, 0.00025085246306844056, 0.00029575804364867508, 5.7612760429037735e-05, 0.00030628821696154773, 0.0004880595370195806, 0.00017307698726654053, 0.00023231873637996614, 0.00042264192597940564, 0.00029351809644140303, 0.00020094290084671229, 0.00019653220078907907, 0.00028118275804445148, 0.00029040194931440055, 0.00029051137971691787, 0.00020614084496628493, 7.837210432626307e-05, 0.0001989132579183206, 0.00028210136224515736, 0.00038011700962670147, 0.00017107640451285988, 0.00037975044688209891, 0.00027051870711147785, 0.00035230768844485283, 0.00061480427393689752, 0.00026793236611410975, 0.00059272046200931072, 0.00026454831822775304, 6.3455860072281212e-05, 0.00022647931473329663, 0.00059773464454337955, 0.00034036434954032302, 0.00034032002440653741, 0.00024988449877128005, 0.00026958089438267052, 0.00033620750764384866, 0.0004797584842890501, 0.00036302089574746788, 0.00042001588735729456, 0.00032200236455537379, 0.00028845079941675067, 0.00027208821848034859, 0.00038233603117987514, 0.00037831609370186925, 0.0002385914558544755, 0.00024337958893738687, 0.00029358459869399667, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -45,34,-4,-16,-84,-37,-127,36, 
  /* [1][0][][] */ 73,-65,-53,-42,127,-71,80,24, 
  /* [2][0][][] */ -101,127,-54,-122,51,-22,-28,39, 
  /* [3][0][][] */ 48,16,72,17,82,122,127,-20, 
  /* [4][0][][] */ -65,-127,78,1,-48,-119,3,-44, 
  /* [5][0][][] */ 127,-17,70,66,-65,-20,-5,-22, 
  /* [6][0][][] */ 27,29,127,-21,39,-33,-42,31, 
  /* [7][0][][] */ 28,13,-127,-44,-40,113,101,-82, 
  /* [8][0][][] */ -5,125,-43,8,56,127,44,76, 
  /* [9][0][][] */ -22,127,-89,87,24,-121,36,110, 
  /* [10][0][][] */ -1,-105,-1,-28,-74,-127,-56,-76, 
  /* [11][0][][] */ -127,-89,114,50,-6,-68,106,61, 
  /* [12][0][][] */ -20,42,-127,74,30,-59,-72,99, 
  /* [13][0][][] */ 97,-127,95,83,14,27,36,-76, 
  /* [14][0][][] */ 0,78,-27,-127,-17,-107,-29,-71, 
  /* [15][0][][] */ 40,113,39,-18,35,-63,108,-127, 
  /* [16][0][][] */ -120,-127,-45,91,-57,28,-24,78, 
  /* [17][0][][] */ -25,-105,-127,94,-50,88,-56,82, 
  /* [18][0][][] */ -103,-100,-49,127,-29,70,1,121, 
  /* [19][0][][] */ 60,-125,103,-127,5,-77,16,-34, 
  /* [20][0][][] */ 7,59,33,22,34,127,64,-3, 
  /* [21][0][][] */ 25,120,45,-29,41,-71,105,-127, 
  /* [22][0][][] */ 24,8,105,25,-10,127,35,-43, 
  /* [23][0][][] */ -95,-69,31,-58,96,99,-58,-127, 
  /* [24][0][][] */ -93,-84,49,-98,117,108,-39,-127, 
  /* [25][0][][] */ 127,14,-51,-11,19,31,-57,-11, 
  /* [26][0][][] */ -125,-29,-127,-35,-40,-23,19,-6, 
  /* [27][0][][] */ 88,45,0,-63,-127,-29,97,101, 
  /* [28][0][][] */ -127,-70,-5,62,-78,-83,14,2, 
  /* [29][0][][] */ 118,90,48,-127,21,13,-57,-90, 
  /* [30][0][][] */ -89,-70,51,-71,96,114,-74,-127, 
  /* [31][0][][] */ 51,37,0,127,7,-76,4,4, 
  /* [32][0][][] */ -28,127,-13,36,18,66,-25,46, 
  /* [33][0][][] */ -42,127,-75,19,19,-27,-27,-4, 
  /* [34][0][][] */ -127,-118,-50,121,-37,16,20,97, 
  /* [35][0][][] */ -49,127,-35,4,67,116,57,77, 
  /* [36][0][][] */ 71,25,-10,-52,-127,-26,100,106, 
  /* [37][0][][] */ -73,117,30,29,-127,118,-21,-97, 
  /* [38][0][][] */ 31,35,41,-2,127,77,101,47, 
  /* [39][0][][] */ -25,-74,38,-14,8,42,-89,127, 
  /* [40][0][][] */ -76,-48,-56,127,-28,7,20,63, 
  /* [41][0][][] */ 127,9,54,90,-48,-16,-12,-12, 
  /* [42][0][][] */ -45,7,-63,-127,51,-117,13,80, 
  /* [43][0][][] */ 23,-2,82,2,38,127,94,8, 
  /* [44][0][][] */ -26,-28,-66,127,48,8,-36,-42, 
  /* [45][0][][] */ 77,110,127,-114,42,-52,24,-126, 
  /* [46][0][][] */ -58,-118,-33,41,-3,57,-48,127, 
  /* [47][0][][] */ 35,27,106,16,82,127,108,-9, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0042134732939302921, 0.0042520263232290745, 0.0030218835454434156, 0.0035628369078040123, 0.00069402967346832156, 0.0036896881647408009, 0.0058793886564671993, 0.0020849646534770727, 0.0027986178174614906, 0.0050913379527628422, 0.0035358532331883907, 0.0024206500966101885, 0.0023675167467445135, 0.0033872562926262617, 0.0034983148798346519, 0.0034996329341083765, 0.0024832668714225292, 0.00094410619931295514, 0.0023962000850588083, 0.0033983220346271992, 0.0045790635049343109, 0.0020608645863831043, 0.0045746476389467716, 0.0032587919849902391, 0.0042440597899258137, 0.0074062133207917213, 0.0032276359852403402, 0.0071401819586753845, 0.0031868701335042715, 0.00076441833516582847, 0.002728273393586278, 0.0072005852125585079, 0.0041001848876476288, 0.0040996507741510868, 0.0030102231539785862, 0.0032474948093295097, 0.0040501095354557037, 0.0057793902233242989, 0.0043731159530580044, 0.0050597037188708782, 0.0038789878599345684, 0.0034748103935271502, 0.0032776992302387953, 0.0046057947911322117, 0.0045573688112199306, 0.0028741818387061357, 0.0029318619053810835, 0.0035366544034332037, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7792, -3220, 10739, -10223, 20606, 8428, -7719, 11403, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00016866724763531238, 0.0002094325318466872, 0.00017277167353313416, 0.00023336728918366134, 0.00020610497449524701, 0.00017148260667454451, 0.00017731070693116635, 0.00024153356207534671, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-17,-28,-73,-33,-34,23,-16,42,14,-25,-11,113,127,-23,-112, 
  /* [1][0][][] */ 127,-57,-49,13,-48,81,-70,-47,-43,96,-25,-52,-6,3,-59,-19, 
  /* [2][0][][] */ -41,-91,43,39,51,-55,-74,-17,37,-88,27,-127,51,-24,-70,25, 
  /* [3][0][][] */ 34,16,12,19,-5,65,-51,-15,127,44,9,23,0,-10,8,23, 
  /* [4][0][][] */ -89,-29,-35,-127,-7,35,53,-111,39,-22,-34,-37,-103,28,-35,-23, 
  /* [5][0][][] */ 88,53,68,-25,45,-47,-125,-127,-14,-69,60,46,-59,51,59,-45, 
  /* [6][0][][] */ 99,44,-127,-75,31,-65,5,-88,-40,22,-114,96,88,-88,8,68, 
  /* [7][0][][] */ -127,-1,110,-24,-64,2,-7,-63,-53,61,80,-29,62,-26,34,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0071683581918478012, 0.008900882676243782, 0.0073427958413958549, 0.0099181095138192177, 0.0087594613432884216, 0.0072880107909440994, 0.0075357048772275448, 0.010265176184475422, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 25654, -292, 123, 2987, -1225, 452, 11243, 1678, -1164, 326, -2021, 2730, -806, -464, -400, -1386, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.0785601059906185e-05, 0.0001788890513125807, 0.00016314689128194004, 0.00015960380551405251, 0.00077936029992997646, 0.00058838049881160259, 0.00014143403677735478, 0.00063422298990190029, 0.00032150591141544282, 0.00083585362881422043, 0.00021546498464886099, 0.00020011878223158419, 0.0001027262260322459, 0.00019884711946360767, 0.00017741641204338521, 0.00043704488780349493, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-7,6,9,-17,12,2,17,-5,-10,-1,-13,5,-6,-1,2, 4,-8,3,5,15,-1,12,-26,-3,10,-9,101,-7,20,-3,2, -2,-9,0,9,4,-12,0,13,7,3,-2,-13,3,-5,-2,0, 
  /* [0][1][][] */ 9,-13,-2,10,127,-25,-127,-20,127,127,-5,-11,106,-22,-6,-19, -127,127,127,5,-86,-92,-11,-101,17,-105,127,127,127,127,127,127, 19,-7,-5,5,-9,127,11,-8,-2,-12,-16,-12,11,-4,-17,-10, 
  /* [0][2][][] */ -6,-6,2,-15,-18,16,47,8,-3,-8,-5,-4,-6,1,-1,-12, 13,-23,-4,-127,6,-16,-11,127,-5,2,-2,-22,-7,-58,-7,-37, -4,-9,-3,-2,1,-4,-2,-1,1,2,-3,-4,7,-6,-10,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0038583879359066486, 0.0076027843169867992, 0.006933742668479681, 0.0067831613123416901, 0.03312281146645546, 0.025006171315908432, 0.0060109463520348072, 0.026954477652907372, 0.013664000667631626, 0.035523779690265656, 0.009157261811196804, 0.0085050482302904129, 0.0043658646754920483, 0.0084510026499629021, 0.0075401975773274899, 0.018574407324194908, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1312, 353, -105, -645, 58982, 48221, 4480, 5829, 7223, 1234, 1417, -49, 8135, -15803, 366, 54152, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00015748801524750888, 0.00071504531661048532, 0.00017776880122255534, 0.00012536054418887943, 2.8686157747870311e-05, 3.6201236071065068e-05, 0.00011142137373099104, 2.70727468887344e-05, 0.00011055070353904739, 3.957358785555698e-05, 0.00031846153433434665, 0.00057608488714322448, 0.00022905759396962821, 1.7935615687747486e-05, 0.00054772710427641869, 3.5940709494752809e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -27, 
  /* [0][1][][] */ 67, -36, 19, 
  /* [0][2][][] */ 32, 127, 21, 
  /* [1][0][][] */ 107, -94, -12, 
  /* [1][1][][] */ -127, 106, 22, 
  /* [1][2][][] */ 14, -2, -15, 
  /* [2][0][][] */ -24, -2, -47, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 122, 127, 59, 
  /* [3][1][][] */ 2, -21, -13, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -58, -5, 
  /* [4][1][][] */ 27, -127, -1, 
  /* [4][2][][] */ 19, -88, -15, 
  /* [5][0][][] */ -65, 27, 6, 
  /* [5][1][][] */ -127, 31, 10, 
  /* [5][2][][] */ -81, 24, 6, 
  /* [6][0][][] */ -17, 80, 127, 
  /* [6][1][][] */ -51, 56, -15, 
  /* [6][2][][] */ -35, -51, -88, 
  /* [7][0][][] */ 37, 26, -25, 
  /* [7][1][][] */ 127, 69, -20, 
  /* [7][2][][] */ 45, 10, -24, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 97, 
  /* [9][0][][] */ -24, 52, -10, 
  /* [9][1][][] */ -15, 127, -13, 
  /* [9][2][][] */ -2, 85, -10, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 12, 41, 18, 
  /* [11][0][][] */ 8, -18, 8, 
  /* [11][1][][] */ 65, -92, 33, 
  /* [11][2][][] */ -84, 127, -48, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 6, 
  /* [12][2][][] */ -79, 78, 5, 
  /* [13][0][][] */ 70, 14, -13, 
  /* [13][1][][] */ 112, 82, -13, 
  /* [13][2][][] */ 112, 127, 47, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -17, -71, 79, 
  /* [15][0][][] */ -96, -34, 11, 
  /* [15][1][][] */ -127, -127, 14, 
  /* [15][2][][] */ -38, -96, -18, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.040159441530704498, 0.18233653903007507, 0.045331042259931564, 0.031966935843229294, 0.0073149697855114937, 0.0092313149943947792, 0.028412448242306709, 0.0069035501219332218, 0.028190428391098976, 0.010091264732182026, 0.081207685172557831, 0.14690163731575012, 0.058409683406352997, 0.0045735817402601242, 0.13967040181159973, 0.0091648800298571587, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.08301195502281189, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.062644019722938538, } };
const TfArray<1, int> quant50_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.061689164489507675, } };
const TfArray<1, int> quant53_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.078737206757068634, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.048566099256277084, } };
const TfArray<1, int> quant58_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.056603133678436279, } };
const TfArray<1, int> quant61_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.06543973833322525, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.043446596711874008, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.076556265354156494, } };
const TfArray<1, int> quant66_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.021388659253716469, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.034623250365257263, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.093278475105762482, } };
const TfArray<1, int> quant69_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension69, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
