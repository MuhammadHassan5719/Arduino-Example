/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 04.09.2024 20:48:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036096577532589436, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 55703, -58286, -59139, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 8.8504573795944452e-05, 9.4754497695248574e-05, 9.4657305453438312e-05, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 93,83,124,-89,-64,26,-25,39,2,55,41,-39,-31,-90,104,40,-48,94,85,124,-21,-17,52,-93,-127,114,-59,6,86,16,-22,-18, 
  /* [1][0][][] */ 61,-31,-65,26,-5,127,-25,-3,122,-43,2,-69,-60,107,30,-45,93,-41,-8,-91,-106,27,112,74,29,23,3,-9,-69,-52,-4,-22, 
  /* [2][0][][] */ -28,81,-74,83,85,-37,-32,114,94,42,127,2,-93,-81,80,119,-77,-48,11,-108,73,120,-46,-82,94,-48,-15,-114,9,-72,82,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0031642327085137367, 0.00338768120855093, 0.003384206211194396, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 500, 594, -444, 626, 614, 629, -64, 581, 621, -408, 615, -418, -535, 512, 95, 605, 599, -487, 526, -441, -489, 630, 242, -218, 623, -541, -547, -348, -2, -442, -359, -502, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.6891644413117319e-05, 3.8473986933240667e-05, 3.8084250263636932e-05, 3.8678652344970033e-05, 3.7286281440174207e-05, 3.8265774492174387e-05, 3.7161047657718882e-05, 3.8755693822167814e-05, 3.8059552025515586e-05, 3.747842856682837e-05, 3.8642552681267262e-05, 3.4511285775806755e-05, 3.7828896893188357e-05, 3.8949456211412326e-05, 3.7625475670211017e-05, 3.7305697333067656e-05, 3.873817331623286e-05, 3.7828027416253462e-05, 3.5555200156522915e-05, 3.6130906664766371e-05, 3.7026267818873748e-05, 3.8319965824484825e-05, 3.8417845644289628e-05, 3.7927780795143917e-05, 3.8680755096720532e-05, 3.5951976315118372e-05, 3.6970814107917249e-05, 3.6244979128241539e-05, 3.4449483791831881e-05, 3.4955948649439961e-05, 3.6720932257594541e-05, 3.7808575143571943e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -27,-42,109,9,108,-13,-80,-91,61,-87,-101,-2,66,21,-30,57,-62,-24,-57,-55,-65,-95,9,110,-111,22,81,-40,122,7,-12,-81,97,-53,-85,75,-109,-73,-83,10,90,-81,-119,99,54,-115,122,-16,21,-54,-28,94,-70,-38,-104,113,40,71,127,-118,-90,89,-44,57,0,25,76,104,63,80,96,-107,113,-102,49,91,-111,21,-55,30,56,20,105,-16,-53,-35,-76,101,43,122,-2,-108,23,75,38,13, 
  /* [1][0][][] */ -61,45,-62,5,-42,86,45,1,87,-114,-89,100,64,-18,28,75,112,-48,22,120,-37,1,46,13,45,4,-34,116,10,16,107,-56,47,106,-14,35,62,63,-1,-59,-68,19,-19,-85,-25,45,-46,-42,-39,-92,127,69,25,84,-67,-50,27,100,74,95,-47,118,-55,-67,-44,41,82,48,111,35,23,12,-112,79,-37,57,92,-55,-31,83,-66,91,-64,-105,38,123,-63,-60,90,92,101,15,80,97,35,-3, 
  /* [2][0][][] */ 35,27,-64,90,-30,-64,79,82,-105,73,-45,111,79,-27,72,-118,-58,-36,23,47,-106,-26,100,31,-33,67,95,-1,-79,67,68,87,-78,-30,-102,-116,-94,85,93,-22,-127,-83,23,-11,-86,108,-37,-85,93,29,79,-93,-55,51,18,10,-81,88,-72,2,-20,53,-46,59,80,35,40,78,-104,72,-2,-82,22,-80,22,20,-59,-33,-6,3,32,-95,-22,-43,-9,-106,-31,-35,76,101,-33,7,-51,-90,-56,-67, 
  /* [3][0][][] */ 86,16,44,-16,-52,60,-95,50,63,36,80,-3,104,110,85,19,109,109,-42,24,127,-71,-49,-118,-7,-93,-68,120,60,-80,102,19,-40,-19,-1,2,-75,-14,56,42,-7,-74,-102,12,82,41,-32,-67,70,-72,58,13,108,44,93,-87,-95,-105,-99,-45,-83,44,-20,88,71,-17,-48,-18,-16,-70,17,114,34,-102,68,-34,44,106,109,-48,-75,-109,48,100,42,59,-27,-108,-63,59,13,-107,104,-80,-72,38, 
  /* [4][0][][] */ 61,117,-1,57,-27,-18,37,11,72,77,4,33,38,-22,-1,-54,-19,3,-68,23,121,-78,98,12,-3,0,72,-45,-34,50,-64,-46,69,127,27,-88,-40,-9,-100,40,-56,-47,-72,-80,44,117,32,69,11,-48,-1,-65,-79,59,-92,25,49,-92,35,18,18,-70,-25,-58,-34,69,11,-25,40,-99,-85,-81,-46,9,114,66,74,-20,5,-44,17,-39,-102,-29,13,83,99,7,-102,-60,58,24,34,112,-106,-19, 
  /* [5][0][][] */ 107,-75,76,79,51,-109,36,66,113,-101,11,-66,34,109,46,43,58,72,-61,105,43,62,30,-26,-92,-49,-7,-78,59,42,27,-91,-25,15,-56,28,-103,-28,58,1,-73,-41,21,96,-28,30,47,-42,-93,108,33,20,48,29,30,-14,119,58,-43,-37,14,-59,50,-60,-20,111,-19,40,84,-18,113,-56,-34,82,-17,-59,12,-36,25,67,106,42,40,105,-71,92,8,35,80,-90,127,93,-9,25,83,-85, 
  /* [6][0][][] */ 27,-48,123,83,-82,-56,2,72,-12,-75,6,-67,101,58,127,-114,62,5,1,110,-79,-94,109,83,-59,-82,-4,-57,-22,-114,47,-70,-82,-119,-40,-99,-9,45,-111,102,86,58,43,-3,-103,110,-84,-43,-73,24,-27,-59,61,-55,100,-1,7,14,-69,121,-72,12,64,-70,-52,67,112,-38,81,9,-104,-6,66,-56,-84,-38,-58,-77,-59,-2,39,-21,44,-26,-47,-88,-42,-87,84,97,104,33,-26,-41,74,-12, 
  /* [7][0][][] */ 123,80,-32,-37,-58,119,-10,5,123,4,-82,-3,64,-72,55,82,56,24,-2,117,64,45,6,69,-54,109,47,67,-64,116,-5,43,32,35,75,109,-90,86,3,-29,103,-63,81,76,58,6,100,-97,41,-58,-93,-57,-12,96,21,35,127,-82,16,-48,15,1,89,-96,-55,-42,74,32,-94,24,75,93,91,11,69,68,-52,59,-85,55,98,-30,-15,-68,95,44,-94,95,93,18,95,51,-47,-32,8,-65, 
  /* [8][0][][] */ 25,46,-38,-85,71,35,-63,-9,18,50,57,97,16,-30,-72,-61,-62,106,-52,26,44,-12,94,107,-103,106,54,88,-53,33,-75,125,105,-19,60,10,127,11,-5,63,94,114,-118,-107,-2,-17,-9,118,29,-84,-49,8,-50,6,-28,-98,63,115,-81,111,117,50,56,120,-18,-31,-13,110,-70,45,45,12,88,73,21,34,-36,116,95,83,44,85,-97,-77,36,54,87,-36,51,-25,-71,103,-69,-89,-32,59, 
  /* [9][0][][] */ -5,1,114,50,72,-110,-56,-124,39,39,-19,56,-35,-86,-111,-17,12,-11,-100,-70,0,96,-112,-106,111,-20,-12,18,-21,-73,-95,96,50,-9,18,-29,-83,21,-38,-32,39,-69,71,-97,75,23,-111,62,46,-13,-90,-50,68,-88,-67,100,75,-64,-20,-5,-81,96,81,-80,-97,-6,101,39,-47,125,105,-100,-1,87,-108,-98,-81,-127,-43,113,33,26,98,32,-42,-100,28,-9,91,39,-27,102,102,-7,53,-23, 
  /* [10][0][][] */ -51,94,96,-60,-3,111,115,33,47,35,36,-86,107,92,-24,22,-29,87,-93,-54,-7,39,67,-81,44,63,-107,-97,-36,90,-77,-71,93,109,127,84,-28,12,-20,30,-22,125,-114,-27,-86,-47,2,-46,-11,6,50,22,73,33,-57,-29,-83,-10,42,-33,5,84,120,54,127,-62,-86,-12,33,-19,-81,-54,93,57,-69,116,-4,68,77,33,86,6,58,108,-87,78,110,-20,49,21,6,-77,-45,-39,-32,-67, 
  /* [11][0][][] */ 112,3,-20,109,119,39,50,29,119,93,-91,122,-17,-99,21,-79,-71,-121,64,37,25,76,19,-127,-121,-112,-31,65,76,-19,21,-32,-104,-89,49,41,-75,81,-37,-69,-37,104,-60,-4,-55,-71,-106,-105,77,109,112,48,-107,-109,14,22,-83,-70,-34,-100,-93,86,82,4,22,83,-68,21,85,85,-97,-85,35,112,-116,47,-84,30,-55,88,-121,-34,-85,-46,41,-96,10,-33,-111,-14,2,-115,-101,-45,-84,-43, 
  /* [12][0][][] */ 2,56,-61,-6,76,-1,-45,25,-84,47,-26,14,-55,1,38,-87,-105,-43,-57,-88,15,-21,5,98,-76,-61,91,-110,80,2,-47,105,-97,-80,-57,5,-13,-84,-29,43,102,28,-112,-47,-28,-91,-50,106,-51,-123,-88,93,25,-11,-87,76,-32,-67,41,57,49,104,-16,42,99,21,-53,107,45,98,30,60,73,106,-26,-16,-45,27,-127,-100,-66,95,36,5,-45,21,41,107,-106,-117,83,38,91,-24,16,72, 
  /* [13][0][][] */ 119,-44,97,85,100,110,83,70,82,-86,22,-27,100,82,76,-51,-113,-53,-57,38,78,-18,127,-46,-53,53,16,29,-73,-77,88,42,52,114,-7,43,-75,-28,28,49,-48,72,-73,7,-38,33,12,-28,48,104,-34,-116,-93,43,87,-70,-33,36,-12,-77,-42,117,-60,20,-42,-47,-86,94,-25,-32,107,11,-76,37,-68,-39,-95,79,90,-69,44,-94,106,12,-74,-84,103,109,2,-60,-64,58,115,-49,76,-22, 
  /* [14][0][][] */ -59,-90,76,60,86,-39,-14,-107,-74,-31,80,80,-25,-78,-91,-89,-71,-49,15,11,-38,27,4,48,-121,-64,-36,35,-110,-111,-71,38,110,-16,-25,10,101,115,43,-121,7,-113,15,89,45,-119,66,-87,102,36,83,54,101,-4,-23,5,-38,12,54,104,-25,-85,-21,75,-85,-4,76,-112,-82,-113,-83,104,4,72,51,-73,48,-127,62,12,43,-33,-119,-37,-127,-91,-102,100,119,-1,66,-53,78,86,-6,44, 
  /* [15][0][][] */ 17,-12,-20,84,90,-77,70,-105,70,-14,-56,6,111,13,-83,-99,98,5,-104,31,61,28,86,96,92,59,49,109,25,72,76,-91,-6,14,-63,6,-53,109,126,-62,10,127,-46,-11,37,-67,-57,-65,-22,-85,13,43,-83,-96,-38,-6,67,58,-31,126,-32,-58,14,116,-23,109,-62,14,-47,17,71,-74,20,-26,73,-94,12,49,119,93,-66,69,-121,-54,-107,-26,-86,45,101,86,-100,-49,55,123,-102,113, 
  /* [16][0][][] */ -52,14,95,-66,54,106,-41,52,47,62,-90,75,2,-32,-37,-67,99,92,82,74,117,89,-24,55,-27,69,-60,65,-83,25,51,11,-88,90,70,65,-29,61,-38,-82,38,-41,62,78,51,94,115,-20,-40,-97,9,95,-33,127,61,54,41,92,76,2,102,109,43,71,66,26,-29,94,51,85,-17,6,44,100,61,79,-21,111,-97,-24,3,-83,73,5,5,111,114,5,91,6,-16,117,78,-36,-66,23, 
  /* [17][0][][] */ 26,-120,40,83,-52,-117,-72,-104,31,-95,74,50,89,51,-123,42,29,43,97,107,-103,-20,4,-41,15,59,-87,16,97,-63,-40,68,-40,-33,23,3,-54,98,-97,-30,-105,-46,8,-18,1,3,77,-116,74,101,-20,36,-26,68,98,-81,-127,77,-93,-120,28,-98,64,91,-94,-85,39,-110,-118,4,98,19,7,-116,-75,59,106,-55,31,-68,12,-14,-85,-96,-121,62,70,-35,10,71,-105,-114,-9,92,2,21, 
  /* [18][0][][] */ -87,109,127,-51,-7,-105,-97,21,-1,86,-112,-23,-28,48,77,-55,32,-24,73,-21,112,-32,23,-88,35,-98,-11,123,42,43,7,58,49,-20,-104,-96,-35,59,-30,79,-39,3,-44,-3,-110,21,30,5,10,-9,78,41,-112,-6,25,106,-39,48,-20,-115,98,124,22,53,-71,-119,-19,103,84,-61,-68,111,-98,-20,-84,-101,65,54,1,-70,-46,8,-34,-68,115,-32,74,72,-116,-73,-57,123,108,-46,47,0, 
  /* [19][0][][] */ 18,23,96,51,57,-82,97,91,90,-65,24,-4,-102,30,-59,58,83,-114,111,57,-28,81,-64,39,72,-86,27,-76,-97,-127,-70,49,80,-90,29,-2,6,-72,-62,-74,41,-121,-71,6,-91,24,78,-100,-34,39,-43,49,-40,9,12,-8,19,104,-9,-29,54,-48,98,61,-76,-8,-26,-3,-10,80,72,-57,-68,-122,-62,-87,-30,-117,9,105,64,-109,-33,83,-93,-14,2,-3,86,26,-8,78,-22,118,67,-47, 
  /* [20][0][][] */ -19,62,74,103,-94,97,13,53,15,3,-93,3,-16,80,33,-62,-44,-47,-73,-39,16,-51,-84,-77,72,-82,-111,45,15,7,-45,115,92,35,-24,50,39,-34,-18,-94,-93,-39,-79,-89,-20,-64,-79,111,52,-123,-105,54,45,103,51,-6,84,73,93,99,127,-59,-75,-38,-34,-75,-53,9,-88,-62,-77,70,-73,-87,32,19,123,69,104,124,95,5,76,-19,69,108,-23,81,12,100,28,62,15,33,-12,6, 
  /* [21][0][][] */ 103,87,74,-99,107,-68,82,24,7,-52,-58,34,14,50,-40,-79,-99,-20,34,-7,116,-36,81,-92,67,-72,-25,85,26,16,6,-14,18,31,-79,-98,119,100,-102,-42,6,18,20,-5,-88,-72,-68,102,-23,-62,7,95,47,80,-90,31,-35,55,-38,127,60,-69,24,0,91,42,-28,-58,-91,-4,69,87,42,-27,81,76,-100,-22,73,113,22,100,40,-65,35,-83,75,-79,-89,87,117,-117,-39,-57,77,-35, 
  /* [22][0][][] */ 40,-48,-71,-91,98,-53,116,58,-93,97,-63,-106,118,-105,-107,-96,33,91,-104,-68,91,-74,37,33,91,7,-119,103,-49,-74,-52,-102,58,68,25,20,2,-8,-52,-127,14,-10,-8,86,48,-119,100,-33,-54,-76,13,-23,-55,-82,-54,35,-1,-24,-14,-25,93,-70,-72,-101,-56,26,-118,-43,116,92,-19,8,-62,18,58,-88,38,-56,66,78,108,-93,-66,-115,72,86,106,-44,-48,18,-74,64,27,15,-18,90, 
  /* [23][0][][] */ 70,-91,-6,43,104,-117,9,-102,49,-69,90,64,21,-106,20,-54,81,-20,-97,94,87,-88,104,-37,-23,-2,74,14,75,37,76,-37,-28,49,28,32,88,-14,-118,-10,-93,-7,-1,-121,-82,-101,124,14,89,-105,-92,-66,76,-51,-63,88,-74,-19,98,36,-125,-95,-56,-7,39,40,-127,-116,62,-29,108,-61,-7,-36,-51,-106,30,-17,89,102,-70,-56,32,-113,79,7,121,-32,-85,27,94,-4,104,-61,-23,74, 
  /* [24][0][][] */ -64,-34,-95,-65,-70,-100,-55,-79,76,127,94,46,123,74,-27,-103,-74,53,36,-44,106,-66,-41,-44,64,-15,80,70,117,67,19,-52,11,22,61,42,-40,-77,74,-26,-57,-83,93,14,30,-25,55,82,-82,-38,-7,27,83,72,70,-64,13,82,38,12,97,2,49,108,-82,108,-36,-76,-86,40,-43,-12,-26,38,105,111,72,-65,-89,-69,-66,-87,-51,-107,13,75,1,-93,41,-92,18,-75,-7,39,-78,28, 
  /* [25][0][][] */ -99,-72,-87,-18,90,-86,-114,53,35,-113,-50,25,63,-13,-127,-34,-87,50,30,-127,57,79,-25,-58,2,-61,-121,28,68,-107,38,110,96,-127,33,66,90,-68,-33,-25,-91,92,-116,-9,92,31,61,26,-114,93,-84,-5,40,-34,-72,3,-27,44,-119,73,113,35,42,41,-11,67,-29,-19,-106,-13,-39,-124,25,-122,63,12,62,65,3,9,43,47,-57,89,-89,-63,-119,-106,-38,-53,98,33,-125,-25,-21,-91, 
  /* [26][0][][] */ 48,-127,-28,-19,-109,-10,-19,-19,-117,-125,98,77,-86,-56,5,-23,110,23,-84,-74,6,67,92,12,44,58,7,40,7,-2,-103,-7,-36,-69,-107,-109,-74,79,-61,108,-109,95,53,26,-78,66,-48,96,-23,25,-14,93,1,-57,-8,-112,89,60,45,17,-4,-101,58,-30,107,-27,-62,52,-95,76,81,89,75,-103,-95,0,40,-114,-107,4,-37,70,78,-85,74,-8,-55,8,-93,108,4,11,-60,112,43,84, 
  /* [27][0][][] */ 6,4,-68,-109,-127,-78,-76,-24,39,95,33,-109,-34,53,79,-34,63,-21,59,-88,-102,6,-32,-26,-111,42,-116,-8,62,24,-38,-15,55,66,-99,-95,-97,-69,-122,89,-103,15,28,13,97,21,64,103,91,66,56,-81,-97,-94,-9,-39,99,-29,-120,-83,-63,-69,-40,51,35,-54,-120,103,45,13,-125,0,58,-56,-13,-95,45,-72,86,102,84,-32,113,-53,-81,-90,-38,30,-55,-7,-41,-56,53,13,85,57, 
  /* [28][0][][] */ 99,-6,120,74,-124,-68,-106,-82,-22,-119,65,100,-84,-94,29,109,127,119,-81,103,-7,30,-119,-56,-121,87,-92,-57,-78,-85,-3,-15,-102,18,87,80,15,-116,-48,50,111,44,-83,58,-98,13,15,50,22,-44,-89,-28,-95,23,56,47,61,-9,84,82,15,-43,-107,3,60,80,2,92,-83,50,-112,-47,75,55,-6,-103,-101,-59,-88,74,-56,-89,113,-14,67,-125,70,-74,-116,-80,-39,-48,-19,79,-92,-58, 
  /* [29][0][][] */ 51,49,66,-53,-94,12,-127,7,97,-18,-100,-84,110,-118,-56,-54,-107,103,26,-74,-88,-42,51,19,-46,4,-51,-37,-114,-14,108,-5,52,-4,-91,-64,-17,109,-15,113,48,110,-39,84,-6,106,-60,-33,17,-7,58,-103,75,-113,120,49,-106,62,-59,120,-127,104,-108,-57,-69,-74,54,90,97,-88,28,-80,114,87,60,22,116,-73,-40,27,-4,-88,-14,-78,62,116,41,83,-47,96,68,101,-107,12,-6,67, 
  /* [30][0][][] */ 20,-66,-69,28,-103,19,-68,-13,116,-23,0,-46,-110,9,53,11,-10,37,88,-110,37,-108,-115,9,-114,18,-73,119,-18,-111,-96,-1,-93,-79,-127,-63,15,-24,-5,26,92,-79,-15,100,99,-46,99,60,-72,67,15,-106,95,-53,-17,97,-86,-59,-83,-56,-107,-8,-75,-31,-114,-90,-101,86,-68,105,40,-38,-96,105,40,-90,-62,-74,-76,-65,23,18,-107,-23,-112,29,-112,108,-38,-118,72,51,-43,-9,7,-79, 
  /* [31][0][][] */ 77,-100,37,96,43,57,-65,-100,-38,-26,-83,-61,94,-127,-54,104,-67,-97,34,42,56,33,-37,106,38,-120,31,32,-78,-80,43,103,12,14,-98,-14,90,-34,-73,-105,53,-75,-31,26,-1,-60,-43,19,66,24,87,-35,-120,-64,-82,21,-124,63,0,117,-45,-8,79,-79,64,104,-49,-84,67,-122,-126,4,-102,-39,-2,-1,-65,-55,42,84,-80,-46,50,66,53,89,-98,12,11,-59,-92,-50,8,98,-10,-28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017950290348380804, 0.0018720207735896111, 0.0018530574161559343, 0.0018819790566340089, 0.0018142308108508587, 0.0018618898466229439, 0.0018081374000757933, 0.001885727746412158, 0.0018518556607887149, 0.001823580008931458, 0.0018802226986736059, 0.0016792083624750376, 0.0018406327581033111, 0.0018951555248349905, 0.0018307350110262632, 0.0018151755211874843, 0.0018848752370104194, 0.0018405903829261661, 0.001730001880787313, 0.0017580139683559537, 0.0018015793757513165, 0.001864526653662324, 0.001869289088062942, 0.0018454442033544183, 0.0018820813857018948, 0.0017493078485131264, 0.0017988812178373337, 0.0017635644180700183, 0.0016762013547122478, 0.0017008442664518952, 0.0017867228016257286, 0.0018396439263597131, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1811, 71, 3728, 5917, 4181, -1930, 4019, -1317, -2474, -941, 6677, -3269, 5722, 6255, 2590, 2312, -534, -457, -1657, 4845, 2808, -897, 3623, -405, -1540, 4051, 1494, 2560, 4586, 2529, 4636, 1492, 1881, 7072, 7012, 3932, -407, 4515, 2392, -4897, -390, 1816, -34, 1980, -1214, 362, -1414, 912, -11351, 2141, 1078, -3670, 6864, -965, 2060, 1435, 1188, 3302, -1212, -2080, 320, 1898, 536, 4085, 6623, 4757, 3043, 6631, 5216, -890, 3780, 7176, 4095, -1891, 4840, 7886, 788, -3045, 904, 1556, 9794, 2615, -502, -3219, 1003, 957, 1796, -2353, 3467, -632, 3838, 1451, -187, -3526, -331, 2474, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00011621770681813359, 0.00015769456513226032, 0.00015592378622386605, 0.00012483983300626278, 0.00015466661716345698, 0.00019883910135831684, 0.00014578942500520498, 0.00019379584409762174, 0.00015318539226427674, 0.00017349801782984287, 9.8970172984991223e-05, 0.0001418145839124918, 0.00010111405572388321, 9.9184362625237554e-05, 0.00010895126615650952, 0.00016909185796976089, 0.00025372416712343693, 0.00013853445125278085, 0.00018441100837662816, 0.00013108618441037834, 0.00015986358630470932, 0.00014348729746416211, 0.00010467729589436203, 0.00021144589118193835, 0.000160028605023399, 0.0001568842853885144, 0.00017940120596904308, 0.0001453383156331256, 0.00014944092254154384, 0.00017467055295128375, 0.00010867084347410128, 0.00014925052528269589, 0.00016889226390048862, 9.1957190306857228e-05, 9.4709088443778455e-05, 0.00012889743084087968, 0.0001934073370648548, 0.00010431497503304854, 0.00015608897956553847, 0.00010825463687069714, 0.00013854677672497928, 0.00013283711450640112, 0.00019361726299393922, 0.00012728599540423602, 0.00019530781719367951, 0.00015202730719465762, 0.00016330786456819624, 0.00017907045548781753, 6.393823423422873e-05, 0.00011605315376073122, 0.00021611763804685324, 0.00013035062875133008, 0.00010958834172924981, 0.00015028569032438099, 0.00016191383474506438, 0.00015451962826773524, 0.00017432916502002627, 0.00012834707740694284, 0.00015108745719771832, 0.00013152668543625623, 0.00021854415535926819, 0.00013251756899990141, 0.00019531430734787136, 0.00016607852012384683, 9.9227756436448544e-05, 0.00010014732833951712, 0.00012938112195115536, 0.00010744723840616643, 0.00012275583867449313, 0.00018004549201577902, 0.00013129302533343434, 9.6541698439978063e-05, 0.00011818505299743265, 0.00012419397535268217, 0.00015287011046893895, 0.00010414842108730227, 0.00012332682672422379, 0.00019286043243482709, 0.00014437515346799046, 0.00014189422654453665, 8.9679320808500051e-05, 0.00011143898882437497, 0.00019184612028766423, 0.00014002644456923008, 0.00020826436229981482, 0.00014503761485684663, 0.00016536032489966601, 0.00017397086776327342, 0.00019031435658689588, 0.00014836229092907161, 0.00015521790191996843, 0.00016689718177076429, 0.00011679683666443452, 0.00012603477807715535, 0.00021043205924797803, 9.3371323600877076e-05, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -15,106,-76,32,47,-27,108,64,-54,1,27,-102,90,127,-70,12, 
  /* [1][0][][] */ -21,-2,-68,-22,-7,49,20,-127,35,-53,-23,-51,-15,-51,-60,-1, 
  /* [2][0][][] */ -28,-24,39,79,21,49,-109,127,-29,9,76,-67,-15,-65,-46,73, 
  /* [3][0][][] */ 89,-95,69,-1,2,-38,-29,127,-24,50,70,53,-11,51,16,9, 
  /* [4][0][][] */ -43,-11,0,39,-88,20,-21,-127,6,0,22,-25,43,58,101,99, 
  /* [5][0][][] */ 127,25,-29,-28,-82,26,28,73,18,-11,62,101,126,24,-95,0, 
  /* [6][0][][] */ 27,-37,-65,-50,-78,5,-5,-44,-47,-57,-24,32,86,47,127,-14, 
  /* [7][0][][] */ -56,27,-24,-74,5,-58,-75,14,-95,53,-65,-63,-127,-33,17,89, 
  /* [8][0][][] */ 52,50,74,5,54,30,78,5,73,-30,37,3,-127,-29,-86,8, 
  /* [9][0][][] */ -33,59,24,-40,-26,-13,24,-9,-35,47,-34,18,40,127,28,26, 
  /* [10][0][][] */ 74,64,-39,50,-39,-13,63,-62,-76,-29,-70,-120,-127,-72,5,99, 
  /* [11][0][][] */ 60,5,65,12,-12,-34,3,119,-91,28,-33,5,-14,-8,76,127, 
  /* [12][0][][] */ -53,-10,7,-6,20,12,127,34,-53,19,-4,-19,-3,74,-50,92, 
  /* [13][0][][] */ 12,51,25,41,113,54,115,88,-29,88,-100,-72,46,76,-127,-43, 
  /* [14][0][][] */ -115,115,5,-8,4,-3,62,8,-43,26,127,1,-102,27,-37,51, 
  /* [15][0][][] */ -10,-22,-127,-43,77,-48,-89,-32,-27,-17,-11,-60,-6,-76,-50,52, 
  /* [16][0][][] */ 106,-12,7,-14,28,-27,41,-24,-34,16,127,52,47,3,-38,15, 
  /* [17][0][][] */ 7,22,-18,-92,-14,-51,116,-127,6,-13,-51,23,42,73,-1,41, 
  /* [18][0][][] */ 28,113,-13,-41,62,-74,-26,-48,-42,127,-17,3,-33,57,-9,-30, 
  /* [19][0][][] */ -74,-109,127,-101,40,-112,36,-47,60,50,85,95,34,-14,64,-34, 
  /* [20][0][][] */ -17,103,61,-1,6,11,28,-35,70,-7,94,-36,-127,-26,-85,-15, 
  /* [21][0][][] */ -59,39,25,24,60,28,60,56,-127,60,-36,17,-25,23,-53,-20, 
  /* [22][0][][] */ 19,-86,56,9,14,-124,127,-2,19,-53,-56,-90,55,-82,-64,-64, 
  /* [23][0][][] */ -57,-92,42,57,23,-13,25,-49,21,-33,78,1,12,71,68,127, 
  /* [24][0][][] */ 0,-5,21,86,51,16,-57,-127,67,13,-41,21,-2,-3,-23,-30, 
  /* [25][0][][] */ -16,36,25,-58,-33,1,17,-42,-23,53,-52,-16,48,127,17,2, 
  /* [26][0][][] */ -72,78,6,19,36,-86,1,-33,17,21,16,77,8,5,-85,127, 
  /* [27][0][][] */ -18,-127,-48,7,-65,104,4,-69,22,-36,55,-34,30,-50,-114,-26, 
  /* [28][0][][] */ -37,1,36,90,32,13,-48,-126,-127,51,110,-9,72,13,-39,-31, 
  /* [29][0][][] */ -127,119,-28,-30,-25,33,-125,-81,-38,-36,-11,-1,8,-68,-118,54, 
  /* [30][0][][] */ 58,72,-47,83,-106,-96,-71,-15,-41,-8,10,-118,127,42,-2,100, 
  /* [31][0][][] */ 127,22,-69,-31,-61,15,98,45,-65,-18,76,59,35,26,-20,16, 
  /* [32][0][][] */ -36,-14,127,-4,-24,84,79,18,-21,-12,-15,23,10,71,59,35, 
  /* [33][0][][] */ -4,33,-57,-58,-25,36,127,15,6,-15,18,-74,100,111,-60,42, 
  /* [34][0][][] */ -102,-16,102,14,23,-48,119,-17,-127,40,30,-55,60,57,-64,-48, 
  /* [35][0][][] */ -5,27,-46,7,-77,127,-27,-25,-20,122,-9,78,-58,68,15,31, 
  /* [36][0][][] */ -7,-72,127,-49,-59,15,-45,-7,12,24,-55,80,5,-87,-38,45, 
  /* [37][0][][] */ 99,-8,71,-24,114,-86,-55,35,-60,127,-76,2,-102,-55,118,-27, 
  /* [38][0][][] */ 52,39,6,-93,-4,-57,-106,65,-81,47,-95,-43,-77,-127,-103,54, 
  /* [39][0][][] */ -80,22,-58,-32,-85,-81,76,12,-127,-36,20,81,38,-1,-3,57, 
  /* [40][0][][] */ 127,42,3,-103,-74,32,7,-37,-47,-19,-54,-84,18,57,38,36, 
  /* [41][0][][] */ 93,-70,-54,-41,-12,-4,-51,-26,57,-23,-4,-62,127,-76,50,-36, 
  /* [42][0][][] */ -13,-86,-43,127,7,-92,-108,19,5,9,8,52,-75,74,-56,-4, 
  /* [43][0][][] */ -91,-53,-45,-127,-65,-3,-4,76,40,-127,-36,33,-16,-50,-28,106, 
  /* [44][0][][] */ -37,45,41,-43,-27,-23,29,118,117,-75,73,102,127,51,-22,3, 
  /* [45][0][][] */ 34,68,-76,97,127,-96,-44,-59,105,-69,78,-65,-29,14,-69,71, 
  /* [46][0][][] */ -16,-33,17,-16,91,-20,33,12,-12,125,-35,-127,39,67,-49,74, 
  /* [47][0][][] */ 74,-37,-27,-12,77,-14,-35,-63,-3,127,-32,30,-7,-103,-83,9, 
  /* [48][0][][] */ 13,21,-19,-127,-9,-52,120,-116,3,-2,-32,55,48,62,5,45, 
  /* [49][0][][] */ -33,127,-62,41,54,-54,68,64,-32,30,44,-90,-25,84,127,-96, 
  /* [50][0][][] */ 16,39,-22,6,-127,-3,-70,-55,52,66,29,31,-38,-43,5,33, 
  /* [51][0][][] */ 127,-33,-43,-9,-48,81,-88,-46,45,-16,-43,57,-28,-66,2,35, 
  /* [52][0][][] */ -14,-38,35,68,-53,-96,-127,-5,-44,-53,-33,-63,11,-69,5,70, 
  /* [53][0][][] */ 22,102,57,-127,11,119,92,-26,-5,-20,-15,-40,83,-120,-1,48, 
  /* [54][0][][] */ 27,120,12,-20,0,-87,-107,53,1,-21,-40,127,81,94,23,62, 
  /* [55][0][][] */ -36,-23,53,36,53,-45,107,102,-93,-10,28,17,127,55,1,9, 
  /* [56][0][][] */ 127,27,15,19,-51,122,-51,-85,-23,51,-93,0,-56,100,-16,33, 
  /* [57][0][][] */ -47,-28,-38,-37,-76,-86,69,-29,-127,-20,46,44,25,41,-10,48, 
  /* [58][0][][] */ 50,-60,59,24,12,-70,-23,12,30,-17,-127,-22,20,-38,-32,51, 
  /* [59][0][][] */ 82,21,-127,98,6,31,80,-34,-66,-50,24,-105,-115,-66,27,103, 
  /* [60][0][][] */ -4,35,-10,18,-15,-20,-20,-1,-27,-74,55,117,-41,-127,-37,-12, 
  /* [61][0][][] */ -32,17,90,-94,-82,56,7,123,-23,-104,51,60,95,4,18,127, 
  /* [62][0][][] */ 78,53,-11,-127,-20,10,10,-47,-7,40,-46,41,30,-20,-94,-79, 
  /* [63][0][][] */ 0,-19,6,-8,-67,-59,-49,3,-65,-8,-41,-27,127,-3,46,-16, 
  /* [64][0][][] */ 36,-6,-13,67,-114,-54,-30,-86,75,127,38,-2,37,-62,-37,117, 
  /* [65][0][][] */ -31,14,-13,-11,-79,80,29,-32,60,-110,91,-74,75,69,-127,55, 
  /* [66][0][][] */ -121,87,-109,-79,45,-43,-119,-59,-105,107,105,12,-127,-60,49,60, 
  /* [67][0][][] */ 0,-34,-127,-115,65,80,12,-29,-32,-3,51,-25,30,45,20,53, 
  /* [68][0][][] */ 56,19,-8,-40,-65,30,13,42,-65,70,127,-18,-11,-34,-106,4, 
  /* [69][0][][] */ 78,-97,57,-40,23,-105,-35,127,-1,64,76,74,-23,74,-21,-11, 
  /* [70][0][][] */ 45,15,123,29,85,-12,127,2,27,29,-69,25,-58,71,-76,41, 
  /* [71][0][][] */ 10,28,89,-71,-127,-80,11,11,-21,-14,17,-96,-78,-3,7,28, 
  /* [72][0][][] */ -66,-91,27,-120,70,-8,10,40,-61,11,-127,-23,54,110,-61,111, 
  /* [73][0][][] */ 22,23,53,-10,127,-88,-47,3,-39,101,-93,29,-83,-50,118,-16, 
  /* [74][0][][] */ -102,12,-119,-70,58,-31,-30,15,-75,1,-127,-39,-28,-63,-47,68, 
  /* [75][0][][] */ 93,-19,47,-48,22,13,-127,-32,0,-105,64,2,5,-21,-12,-17, 
  /* [76][0][][] */ 8,-64,-48,120,40,84,93,-51,72,-127,77,124,34,-97,-60,52, 
  /* [77][0][][] */ -49,-32,127,-29,32,-23,-23,-124,19,20,41,90,51,50,12,3, 
  /* [78][0][][] */ -39,11,9,-36,-11,-44,37,-17,20,-14,9,-92,-88,-67,-127,-51, 
  /* [79][0][][] */ -110,-68,-23,19,127,44,-13,14,34,31,-23,49,-39,-83,-78,-19, 
  /* [80][0][][] */ 2,-127,60,126,-46,-20,-110,74,-7,37,77,-7,-73,-5,-25,81, 
  /* [81][0][][] */ 123,70,-23,84,-4,33,22,127,24,8,113,59,117,26,61,-26, 
  /* [82][0][][] */ -49,1,20,-30,31,-127,-114,-84,2,78,-38,-39,-28,106,-69,-22, 
  /* [83][0][][] */ 99,-26,85,-38,-31,-13,-127,-3,26,-124,18,-46,-17,-5,11,-23, 
  /* [84][0][][] */ 21,-75,-104,32,127,39,44,35,-115,17,-108,-22,47,-40,-78,10, 
  /* [85][0][][] */ 6,100,40,-55,91,13,54,-127,120,-25,29,-21,105,-76,-1,-9, 
  /* [86][0][][] */ 110,-30,127,43,-3,-49,79,33,-61,-46,-95,-52,40,24,-64,11, 
  /* [87][0][][] */ -3,4,21,-76,73,-33,-47,18,30,-42,72,-39,-88,-127,-1,25, 
  /* [88][0][][] */ -58,-26,33,-6,18,33,-59,-50,-8,14,-69,-127,-41,-37,-21,-13, 
  /* [89][0][][] */ -68,9,15,-60,21,5,-127,25,81,20,-66,-6,-17,-85,-40,-25, 
  /* [90][0][][] */ -14,-11,-26,-79,127,19,-56,38,47,55,23,-19,30,15,-69,-26, 
  /* [91][0][][] */ -45,-57,27,43,-45,-5,2,57,-40,-51,24,-51,2,62,14,127, 
  /* [92][0][][] */ -22,77,5,-8,-19,58,-100,53,-37,-6,66,-1,-35,127,56,24, 
  /* [93][0][][] */ -3,72,-56,-62,71,80,-81,13,60,64,77,60,-127,23,-35,74, 
  /* [94][0][][] */ 24,64,110,8,-127,-43,10,-8,20,-17,35,-15,-64,-15,21,-21, 
  /* [95][0][][] */ 0,30,41,5,127,-19,-99,78,19,16,-86,98,-10,10,109,-41, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014199502766132355, 0.001926715369336307, 0.0019050799310207367, 0.0015252955490723252, 0.0018897199770435691, 0.0024294201284646988, 0.0017812581500038505, 0.0023678014986217022, 0.0018716221675276756, 0.0021198024041950703, 0.0012092195684090257, 0.0017326934030279517, 0.0012354135978966951, 0.0012118365848436952, 0.0013311688089743257, 0.0020659677684307098, 0.0031000070739537477, 0.0016926167299970984, 0.0022531375288963318, 0.0016016137087717652, 0.001953216502442956, 0.0017531308112666011, 0.0012789493193849921, 0.0025834501720964909, 0.0019552328158169985, 0.0019168154103681445, 0.0021919275168329477, 0.0017757464665919542, 0.0018258722266182303, 0.0021341284736990929, 0.0013277425896376371, 0.0018235460156574845, 0.0020635291002690792, 0.0011235348647460341, 0.001157157588750124, 0.0015748714795336127, 0.0023630547802895308, 0.0012745225103572011, 0.0019070983398705721, 0.001322657335549593, 0.0016927673714235425, 0.0016230065375566483, 0.0023656196426600218, 0.001555182971060276, 0.0023862749803811312, 0.0018574728164821863, 0.0019952987786382437, 0.0021878865081816912, 0.00078119861427694559, 0.0014179397840052843, 0.0026405297685414553, 0.0015926266787573695, 0.0013389525702223182, 0.0018361936090514064, 0.0019782665185630322, 0.0018879239214584231, 0.0021299573127180338, 0.0015681472141295671, 0.0018459897255524993, 0.0016069957055151463, 0.0026701770257204771, 0.0016191024333238602, 0.0023863541427999735, 0.0020291507244110107, 0.001212366740219295, 0.0012236020993441343, 0.0015807811869308352, 0.0013127925340086222, 0.0014998334227129817, 0.0021997995208948851, 0.0016041408525779843, 0.0011795484460890293, 0.0014439873630180955, 0.0015174044528976083, 0.001867770217359066, 0.0012724875705316663, 0.0015068097272887826, 0.0023563727736473083, 0.0017639786237850785, 0.0017336666351184249, 0.0010957038030028343, 0.0013615638017654419, 0.0023439798969775438, 0.0017108459724113345, 0.0025445781648159027, 0.001772072515450418, 0.0020203758031129837, 0.0021255796309560537, 0.0023252647370100021, 0.0018126934301108122, 0.0018964555347338319, 0.002039153128862381, 0.0014270261162891984, 0.0015398955438286066, 0.0025710631161928177, 0.0011408127611503005, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9289, 15487, -5201, 3373, -504, 9560, -1457, 3250, 16436, -5215, -10293, 10674, -15096, 10423, 5597, 6513, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3017374739283696e-05, 6.6879430960398167e-05, 4.1167953895637766e-05, 5.4352993174688891e-05, 7.7884717029519379e-05, 7.1195558120962232e-05, 4.9595586460782215e-05, 4.596475264406763e-05, 8.3808728959411383e-05, 6.6510619944892824e-05, 6.4888496126513928e-05, 5.6882076023612171e-05, 6.6082648118026555e-05, 6.4717198256403208e-05, 8.6518724856432527e-05, 5.2618543122662231e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -102,39,65,-26,-69,-8,-69,-6,-52,6,-7,-30,39,37,35,-39,11,-5,87,18,7,-47,127,70,50,32,4,31,-67,-124,-97,8,-40,-45,31,15,12,28,-5,35,-4,1,-78,0,-63,-30,-5,85,-19,16,-44,-18,-14,4,26,-54,-102,7,-7,79,54,22,-6,9,-33,-55,-39,31,-60,-58,11,-18,3,2,-70,-47,-39,11,-39,7,-60,68,78,-78,5,50,12,53,34,-14,-5,-27,-32,-35,-61,7, 
  /* [1][0][][] */ 38,18,27,-53,-69,-20,-12,15,-24,19,52,-55,9,-13,-69,-35,-7,7,-60,30,-12,-79,8,42,-13,-60,-7,-50,66,-106,106,-72,54,24,-19,50,36,68,-15,-36,23,16,-11,-7,12,53,-127,-44,-54,-48,-16,-29,44,-49,-38,44,8,1,-36,9,31,53,-11,-96,-17,-15,-65,-3,0,-10,-84,-13,-48,-27,13,-70,3,21,36,-69,-25,-34,-80,-25,26,-34,-26,12,-76,-8,-52,47,24,55,-48,57, 
  /* [2][0][][] */ 81,-44,31,33,29,-79,75,12,-1,-14,-19,-13,-86,-36,17,-29,-109,-56,-34,48,4,-49,-43,40,3,-79,4,-22,-31,58,-55,127,-65,124,-41,31,-14,-12,-11,-18,-100,87,89,22,-75,15,-14,-6,34,0,-28,-50,61,-21,-20,74,52,-7,57,-13,7,40,-42,16,76,23,-16,-20,21,51,-51,-2,58,53,79,35,35,-88,66,57,96,-9,-47,33,-60,40,32,79,8,5,-29,40,-50,52,-11,41, 
  /* [3][0][][] */ 6,-4,-29,4,11,-12,2,-67,-24,62,46,63,36,-9,-62,37,11,-44,25,12,14,127,33,-49,13,29,-17,1,63,-44,60,-17,-14,38,-24,-32,25,48,31,15,-80,-33,-43,22,-27,29,22,-7,-16,-45,-9,-34,44,-80,-35,-51,12,95,-27,6,-9,-14,-40,4,22,44,-35,6,-27,1,14,-75,-39,-48,38,-6,21,0,-38,-30,-30,-5,-62,6,-9,-45,30,-25,7,28,32,-25,48,32,-42,59, 
  /* [4][0][][] */ 27,8,-33,19,28,20,-42,7,-30,73,87,-14,-17,4,12,-45,9,-8,-23,42,19,-43,55,84,-74,-4,-127,18,-38,-55,6,11,-64,-50,13,57,12,33,23,23,-35,-44,49,-23,-5,13,-32,55,-40,53,15,23,42,-13,-79,20,46,-21,8,-13,43,-11,30,7,-44,18,-38,3,-42,24,-39,54,45,-66,-36,-52,29,-55,-12,7,-45,87,-71,2,-26,19,27,-64,49,-2,27,10,-57,-31,39,31, 
  /* [5][0][][] */ -85,36,46,-14,42,-24,63,-43,-16,32,-11,-32,29,-16,-17,-44,-3,-34,57,18,-127,-23,-79,41,-51,-12,45,6,46,-73,-14,43,52,116,-20,35,-10,17,43,-24,-37,95,73,-23,1,73,42,-6,-4,13,-32,28,21,-48,25,-98,37,-64,-70,-71,64,102,-45,-27,84,-45,-87,-69,-54,-27,-57,-7,-19,14,-31,-44,13,-47,-31,-19,120,-28,29,-85,-84,36,28,-22,-54,36,31,1,-20,30,12,99, 
  /* [6][0][][] */ 37,-16,-74,37,-25,-111,106,98,-49,66,-23,68,-126,-85,64,65,-9,-56,2,3,-2,-6,-57,-49,-52,36,71,34,40,41,96,-61,15,6,7,-65,10,12,38,64,14,17,-48,-23,-8,-52,-68,26,30,-127,-17,82,41,2,-18,-61,78,38,18,-10,-113,44,-98,7,32,14,-11,45,31,19,-6,-42,-28,24,102,26,53,-31,33,-70,-7,-46,-78,72,4,-55,57,22,-49,53,32,46,-22,7,-28,111, 
  /* [7][0][][] */ 41,95,-51,-62,-22,-9,33,5,-59,41,-44,-58,-35,13,3,-19,-49,-52,-44,65,-1,127,13,37,-3,14,30,30,50,39,84,-25,82,39,-12,12,4,-7,-5,42,-61,-1,12,-64,19,-57,75,-35,48,-75,-86,-35,-57,18,3,-17,32,23,-104,15,-10,118,15,-19,-30,-5,-37,25,-42,-11,-112,33,7,72,-33,53,-49,66,7,-79,-15,-52,60,-88,46,-25,-9,8,1,88,-95,44,60,-29,-50,7, 
  /* [8][0][][] */ -9,73,-46,34,-37,-26,-83,22,-97,-35,9,3,-38,39,29,76,8,-41,4,4,29,-6,3,-18,-38,75,-4,20,-15,-19,-45,-29,-19,-49,-24,-64,-42,20,42,8,-8,-37,23,14,-32,-34,4,-13,-25,-11,42,62,-1,-17,-69,91,-38,24,-8,-38,-34,7,20,47,-36,-62,-36,-6,-35,5,2,1,-22,-50,-115,-14,-48,26,-58,-38,-34,-1,-36,-32,-1,-3,14,22,15,60,-51,-6,-84,-127,23,-45, 
  /* [9][0][][] */ -9,24,-77,42,-36,-28,66,51,-9,48,-18,99,-21,-24,18,127,16,8,69,23,19,10,37,-92,-29,1,30,-9,8,-21,39,54,-22,4,5,-117,31,-17,-29,-14,-16,25,38,-30,-9,-2,14,15,41,91,27,-13,-60,-75,-2,-2,1,-3,72,-13,-66,57,-65,-20,84,-9,-17,13,-73,33,34,33,-14,86,-19,-22,-22,27,-42,-9,54,-31,66,-7,29,-17,-15,-31,-48,26,-1,-5,63,41,-48,-4, 
  /* [10][0][][] */ 74,-1,-48,-2,-32,-26,64,-1,11,-22,-13,-5,-82,-20,-4,-9,-69,-34,18,26,40,32,24,7,-38,83,39,-5,-49,-77,-30,-8,78,-29,52,16,71,-82,79,127,21,-52,1,2,-19,-93,-9,56,32,86,-64,-43,-24,32,12,49,20,-51,77,53,-11,48,-66,-14,-10,-54,27,59,14,-17,-16,37,108,34,29,-76,32,-40,49,-5,-47,31,31,18,-35,-6,12,47,-31,-9,28,48,48,70,-36,6, 
  /* [11][0][][] */ -47,-35,35,-74,11,-11,-37,-53,34,-47,10,-4,-8,2,0,6,-56,-9,58,20,-61,13,-83,-93,11,21,-44,33,29,-65,31,-25,31,4,27,-33,-71,9,-127,26,-82,68,-59,57,29,1,-12,-36,28,-35,-67,-67,16,36,76,-62,-37,-63,7,-47,-17,-46,-21,-125,5,-74,72,79,113,26,79,-26,-48,-8,65,-34,99,47,37,49,31,-16,-23,84,79,4,-16,-27,-74,-60,-14,23,55,45,50,79, 
  /* [12][0][][] */ 41,-22,-2,-39,40,117,-11,37,51,65,5,56,17,55,13,5,-63,47,17,51,127,0,72,-71,35,23,-78,-77,-20,89,3,9,37,-10,1,-41,47,-6,-35,-33,25,-24,49,60,-19,41,0,-11,-70,28,-1,20,-30,-34,11,21,-36,67,8,49,33,-96,17,-108,-10,104,-23,-41,-11,-52,66,10,-12,20,-11,52,-19,47,-84,-16,-22,29,124,14,-14,80,-28,-77,73,13,-81,62,70,9,-24,-102, 
  /* [13][0][][] */ -14,38,-9,-37,-25,-10,5,-28,26,-32,-33,-77,59,-113,-44,-70,-25,-41,-85,-18,-93,-25,24,113,-24,-1,114,15,19,-42,59,41,13,-6,-123,121,-28,-47,34,-60,127,16,7,18,-6,-87,63,-35,79,-18,-34,31,27,0,1,70,77,-49,-36,-7,52,48,-3,-81,-9,39,-29,32,-77,-45,-83,-3,-63,21,-34,-84,-99,15,30,79,-9,62,30,-93,59,46,42,-5,-21,-13,-13,16,-62,25,-17,-9, 
  /* [14][0][][] */ -1,26,-83,-33,79,84,-91,-14,24,-43,83,-9,25,-21,-43,-73,-61,10,24,127,5,-28,-7,1,7,39,-25,62,5,-13,-32,12,67,3,-33,-2,-15,54,63,16,53,2,21,-4,-2,-49,51,-42,27,-3,-14,-32,38,23,-35,24,6,62,-85,-3,-11,-63,-36,-99,3,-46,-40,1,-70,55,-15,24,-7,-28,-21,-29,44,-6,-45,-29,31,1,-9,-21,-11,40,-20,-13,-27,72,64,12,0,-34,-47,-69, 
  /* [15][0][][] */ -85,-41,49,-57,30,-25,-38,-87,3,24,-9,82,-4,-27,37,100,-127,-20,20,-77,40,-25,-5,-81,62,-16,60,-47,-68,-110,-63,37,-43,58,91,-96,-10,-31,32,-31,-13,1,45,-28,-6,4,79,110,-52,-14,36,-35,-45,65,24,-58,-94,-19,124,18,-39,16,-110,41,-73,-8,11,24,50,-78,90,-28,71,-44,-27,-50,20,27,44,3,-11,92,53,38,3,-10,-127,19,-10,-61,-97,26,54,-31,-17,66, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022532383445650339, 0.0028423757757991552, 0.0017496380023658276, 0.0023100022226572037, 0.0033101004082709551, 0.0030258111655712128, 0.0021078123245388269, 0.0019535019528120756, 0.0035618708934634924, 0.0028267013840377331, 0.0027577609289437532, 0.0024174882564693689, 0.0028085124213248491, 0.0027504810132086277, 0.0036770456936210394, 0.0022362880408763885, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -384, 301, -2510, -5257, -411, 3627, -1817, -2079, -346, -3894, 12697, -1965, -1690, 12604, 10629, -5197, 13837, 2632, -4880, 459, -302, -3321, 602, -2684, 408, -4630, 1155, -4834, 964, -9748, 1461, 409, 15823, 161, -1123, -23, -408, -1834, -454, 6194, 420, 633, 752, -5944, 13347, 16132, 138, 16984, -1063, 14603, 15569, -5370, -387, -16, 445, 13037, -1123, 1088, 15931, 6816, 10716, 11719, 9623, -10707, -253, 650, -3028, 3381, -4531, -2363, 179, 782, 15345, 717, -1432, 11755, -406, -842, 11664, 159, -382, 19647, -2372, 731, 22706, 553, -4817, -2786, 400, -6708, 14466, 230, 2486, 30, -4589, -3937, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025546210235916078, 0.00014474971976596862, 0.0001155162972281687, 0.00011622261081356555, 0.00023988931206986308, 0.00025002940674312413, 0.00030470010824501514, 0.00017689795640762895, 0.00019471076666377485, 0.00012555941066239029, 6.5571824961807579e-05, 0.00035740106250159442, 0.00029000741778872907, 0.00010437248420203105, 0.00012447242625057697, 0.00012951421376783401, 0.00010155743075301871, 0.0002106263127643615, 0.00015324096602853388, 0.00012665783287957311, 0.00016495435556862503, 0.0002438670489937067, 0.00021021762222517282, 0.00016234854410868138, 0.00076251564314588904, 0.0002063606953015551, 0.00022635022469330579, 9.3320988526102155e-05, 0.00013240991393104196, 7.7190139563754201e-05, 0.00026857343618758023, 0.00023230300575960428, 0.00012246635742485523, 0.00015099650772754103, 0.0002438731025904417, 0.00043481192551553249, 0.00015717744827270508, 0.00023628416238352656, 0.00026242912281304598, 9.4896946393419057e-05, 0.00015987813821993768, 0.00025598154752515256, 0.00017825051327235997, 0.000121018681966234, 0.00010082433436764404, 0.00010076165199279785, 0.00022425742645282298, 0.00011686451762216166, 0.00015691248700022697, 6.3250736275222152e-05, 9.4264934887178242e-05, 9.3432427092920989e-05, 0.00011265317152719945, 0.00015190533304121345, 0.00020917797519359738, 0.0001234693918377161, 0.00019157181668560952, 0.00018330084276385605, 0.00016229957691393793, 0.00011847040877910331, 0.00011533532961038873, 0.00018262609955854714, 0.00013250159099698067, 8.6448388174176216e-05, 0.0001390985562466085, 0.00023918449005577713, 0.00017314159777015448, 0.00022390976664610207, 0.00021433191432151943, 0.00021239812485873699, 0.00026012765010818839, 0.00017084798309952021, 0.00010243375436402857, 0.00023120034893509001, 0.00029552995692938566, 9.8979879112448543e-05, 0.00011067590094171464, 0.00021698165801353753, 0.00011408467253204435, 0.00021709053544327617, 0.00019641645485535264, 9.4477887614630163e-05, 0.00022175499179866165, 0.00017141216085292399, 7.657810056116432e-05, 0.00017925555584952235, 0.00013326080807019025, 0.00017899951490107924, 0.00017159912385977805, 0.00019520286878105253, 8.1964215496554971e-05, 0.00037981529021635652, 0.00017070230387616903, 0.0002470865729264915, 0.00011364553938619792, 0.00027413558564148843, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 28,111,-17,20,-35,-2,45,55,52,-68,-92,25,-6,-20,24,-35,-74,16,11,19,37,77,79,100,8,-8,-53,-4,-19,21,15,-18,-53,10,-37,80,-1,33,-3,-2,27,-41,1,30,-100,-49,8,-30,-19,-92,-17,10,25,57,-18,-12,-77,-74,-49,-127,-127,6,-94,10,-28,45,29,-17,-9,36,31,-7,-37,2,45,-9,-3,-23,-87,31,4,-81,51,-20,-102,-47,-4,2,-116,10,-82,31,66,-8,62,9, -34,-36,-18,79,-8,82,-17,5,65,36,-127,54,-20,-63,-88,127,-85,61,47,78,127,22,118,127,24,18,10,54,-4,127,-15,-127,67,79,3,30,72,101,-30,-127,127,-13,104,127,-48,-83,127,-57,-10,-127,-99,-16,24,127,-25,-127,4,25,-106,-76,-38,-127,-39,112,-33,90,122,-27,14,127,127,-5,-86,20,-30,-100,33,-41,-20,127,-7,-42,127,-53,-127,-38,100,66,113,87,-82,-4,127,-31,127,39, 19,-106,-6,2,-23,-13,-6,58,22,75,-83,3,-4,29,4,-60,-20,14,1,7,38,51,50,105,13,-33,20,40,-4,21,-15,-59,-55,-73,-38,58,5,-3,9,19,-3,26,-17,41,-20,-28,1,-1,28,-56,23,25,13,-7,12,-8,56,-88,-18,-75,-94,30,-74,-2,36,17,-85,-13,-11,-4,8,16,-13,-41,-4,20,0,-14,-76,-2,2,-111,34,-1,-33,-28,5,-33,-83,1,-26,27,9,35,25,-3, 
  /* [0][1][][] */ 92,-13,57,116,1,-52,127,51,-36,-127,-113,127,6,-127,-71,32,-72,-51,65,18,-112,10,-127,-68,-16,54,-127,127,-95,82,127,64,16,60,6,127,-127,58,-22,-43,57,-127,25,65,-127,-85,8,-127,-109,-113,-127,28,127,-59,76,-31,-127,-7,-67,8,-73,-55,-44,58,-96,-19,92,-94,-32,25,-34,-127,-127,59,127,-91,94,69,-96,-49,127,-127,-25,106,-39,-14,11,74,-9,33,-69,23,-17,-81,66,-7, -127,-2,-68,127,-79,-127,-105,-127,72,11,-41,41,-78,-115,-52,102,-127,-127,127,127,31,-127,-108,86,-127,127,2,79,-96,-35,-116,66,-127,70,127,-31,26,127,127,-80,-42,20,29,45,-37,-127,-71,-100,-5,-126,-117,127,46,76,52,-82,23,17,82,-19,-51,-49,-127,127,-11,-127,127,127,26,64,-83,-79,-38,54,-101,-127,127,127,85,-56,-84,13,-83,69,-88,-90,127,127,127,127,-127,-127,-102,-57,86,127, 49,-12,101,60,6,-26,12,40,-54,126,-93,66,15,-23,-127,68,16,-39,14,-13,-114,10,-93,-63,-6,15,111,-15,127,118,10,-111,-41,-127,-18,117,-122,-1,-35,-26,-13,91,22,87,-12,-31,-4,-85,127,-79,-89,11,55,-79,-127,19,110,-10,-127,68,-34,-29,-4,64,127,-40,-60,-19,-44,-2,-31,-36,-124,-127,-1,-43,-1,-20,-127,-47,-77,-126,-14,127,-117,16,6,-13,-36,-2,-8,36,-30,127,12,-8, 
  /* [0][2][][] */ 32,-127,42,-8,8,15,33,60,-39,-38,-6,-21,18,-16,-7,29,-7,17,-14,28,-8,57,9,-29,24,53,-4,-4,-35,28,-1,19,-36,-15,-29,1,46,-15,0,-34,-1,9,-11,-29,-26,-46,-15,-12,-14,17,-35,39,-20,-6,-37,-15,-1,-9,5,40,-46,6,29,3,-27,45,-88,-31,29,-2,17,85,-11,11,18,1,-38,-26,-23,-5,13,-35,-14,-31,-101,26,-34,-18,-89,42,3,27,-25,2,6,-9, -47,14,127,-6,127,69,-23,16,-127,24,-83,-28,127,-25,-55,24,16,49,-15,-55,13,23,69,-11,73,-45,-11,33,-22,126,-19,10,-99,24,10,-32,71,35,24,-108,-22,-7,-127,20,-9,-16,-38,-65,-6,-70,-58,101,91,-64,-43,-75,-11,127,-46,22,69,-88,66,86,-20,17,-82,3,127,-18,14,99,-71,13,-16,-62,-12,-59,-45,-49,-10,-72,-21,-57,-84,127,23,-5,91,42,44,28,-44,-15,-8,2, 9,90,36,-26,5,-11,-9,49,1,74,18,10,-1,-8,11,42,-15,3,-10,22,-23,44,-10,-22,14,41,11,28,1,37,-26,-71,-61,-25,-18,-11,34,-41,0,-7,-6,-13,6,-3,-25,-24,-17,2,12,23,-17,23,-17,-15,5,11,11,3,4,64,-49,22,18,-9,37,15,-113,5,22,-6,13,86,31,-17,1,0,-11,-9,-18,9,-10,-64,-12,-6,-70,26,-31,-33,-87,37,14,23,-32,8,-5,-8, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012813594192266464, 0.0072604282759130001, 0.0057941237464547157, 0.0058295512571930885, 0.01203248742967844, 0.012541099451482296, 0.015283298678696156, 0.0088729355484247208, 0.0097663989290595055, 0.0062978710047900677, 0.0032889842987060547, 0.017926700413227081, 0.01454633567482233, 0.0052351667545735836, 0.0062433499842882156, 0.0064962380565702915, 0.0050939680077135563, 0.010564698837697506, 0.0076863360591232777, 0.0063529661856591702, 0.0082738623023033142, 0.012232004664838314, 0.010544199496507645, 0.0081431586295366287, 0.03824663907289505, 0.010350742377340794, 0.0113533865660429, 0.0046808402985334396, 0.0066414820030331612, 0.0038717412389814854, 0.013471239246428013, 0.011651969514787197, 0.0061427280306816101, 0.0075737577863037586, 0.012232308275997639, 0.021809512749314308, 0.0078837843611836433, 0.0118516581133008, 0.013163050636649132, 0.0047598881646990776, 0.0080192470923066139, 0.012839649803936481, 0.0089407777413725853, 0.0060701151378452778, 0.0050571970641613007, 0.0050540529191493988, 0.01124841533601284, 0.0058617484755814075, 0.0078704943880438805, 0.0031725619919598103, 0.0047281873412430286, 0.0046864300966262817, 0.0056505138054490089, 0.0076193432323634624, 0.010492052882909775, 0.0061930390074849129, 0.0096089541912078857, 0.0091940946877002716, 0.0081407027319073677, 0.0059422976337373257, 0.005785046610981226, 0.0091602504253387451, 0.0066460804082453251, 0.0043361210264265537, 0.0069769746623933315, 0.011997134424746037, 0.0086845224723219872, 0.01123097725212574, 0.010750566609203815, 0.010653570294380188, 0.013047612272202969, 0.0085694780573248863, 0.0051379231736063957, 0.011596661992371082, 0.014823338016867638, 0.0049646818079054356, 0.0055513367988169193, 0.010883473791182041, 0.0057223155163228512, 0.010888935066759586, 0.0098519539460539818, 0.0047388686798512936, 0.011122897267341614, 0.0085977762937545776, 0.0038410425186157227, 0.0089911893010139465, 0.0066841617226600647, 0.0089783463627099991, 0.0086071537807583809, 0.0097910827025771141, 0.0041112019680440426, 0.019050963222980499, 0.0085621709004044533, 0.012393491342663765, 0.0057002892717719078, 0.013750229030847549, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7869, 4572, 1412, -1151, 5935, 11870, 8821, 1771, -343, 8773, 1399, -5117, 3212, 3785, 654, -765, 2817, 6941, -404, 15, 5428, 9992, 12298, -1680, -3370, -995, 13988, -167, 1676, 1101, 9464, -1531, 9905, 1951, 4951, -4592, 924, -4223, 386, 2366, 3103, 1248, 1632, -355, 844, 1754, 3428, 4688, 4529, 3592, 5499, 3571, -2384, 1788, 1627, 1694, 2264, 3214, 9145, 1639, -953, 7068, 5899, 4047, 5051, 7421, -5272, 3874, 5925, -628, 6480, 2065, 4257, 3302, 4199, 2727, -394, 2050, 3251, 3073, 2867, 3122, 9793, 941, 2438, 3907, 931, -1086, 12321, -340, 849, -1233, 12202, 3275, -31, -1445, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.3310940428636968e-05, 8.4802763012703508e-05, 0.00013053586008027196, 0.00015754171181470156, 0.0001193010393762961, 6.7778768425341696e-05, 9.17631114134565e-05, 0.00015932503447402269, 0.0001512921298854053, 8.5653133282903582e-05, 0.00014642119640484452, 9.4505230663344264e-05, 0.000157638278324157, 0.00012722238898277283, 0.00015733885811641812, 0.00012905175390187651, 0.00020444010442588478, 0.00010945413669105619, 9.9249547929503024e-05, 0.00015740976959932595, 0.00011506566079333425, 8.6945634393487126e-05, 7.0791589678265154e-05, 0.00014837387425359339, 0.00016490329289808869, 0.00012223525845911354, 6.2115752371028066e-05, 0.00012165216321591288, 0.00016065716044977307, 0.00017364601080771536, 8.836247434373945e-05, 0.00017104306607507169, 8.2161204773001373e-05, 0.00023071466421242803, 0.00014087090676184744, 0.00013725961616728455, 0.00013240514090284705, 0.00014331926649902016, 0.00011806737165898085, 0.00013631381443701684, 0.00013552143354900181, 0.00021189394465181977, 0.00020502474217209965, 0.00021975506388116628, 0.00029243077733553946, 0.00021223540534265339, 0.00015735920169390738, 0.00013031122216489166, 0.00012953291297890246, 0.0001456910977140069, 0.00013067852705717087, 0.00012648102710954845, 0.00014914323401171714, 0.00019309991330374032, 0.00014480910613201559, 0.00022719413391314447, 0.00014321628259494901, 0.00012794212670996785, 8.6936917796265334e-05, 0.00013935285096522421, 0.00019989990687463433, 0.0001056498076650314, 0.00010012925486080348, 0.0001471371651859954, 0.00010951978038065135, 9.9958117061760277e-05, 0.00010622823901940137, 0.00011449451994849369, 0.000104168699181173, 0.00018180996994487941, 0.00010618408850859851, 9.9418582976795733e-05, 0.00010682021820684895, 0.00012747821165248752, 0.0001238596742041409, 9.9617624073289335e-05, 0.00016445707296952605, 0.00017571664648130536, 0.00011849998554680496, 0.00017374010349158198, 0.00015398324467241764, 0.00013301975559443235, 7.7805678301956505e-05, 0.00012224355305079371, 0.00014622429443988949, 0.00017012890020851046, 0.00015455517859663814, 0.00022428542433772236, 7.4453098932281137e-05, 0.00017774708976503462, 0.00020721369946841151, 0.00017993013898376375, 7.2918046498671174e-05, 0.00011918919335585088, 0.00018230047135148197, 0.00011627042113104835, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -50,54,-11,-37,-40,-70,-75,-37,73,-60,36,-61,89,-126,23,-127, 
  /* [1][0][][] */ -92,72,-101,-103,-84,18,-17,59,-49,6,84,-44,41,127,29,44, 
  /* [2][0][][] */ -38,-3,-85,10,-11,-44,32,-45,-96,127,67,0,44,54,-53,110, 
  /* [3][0][][] */ -49,-64,2,-37,-82,18,-57,-121,-10,20,37,-78,-71,-38,-127,-54, 
  /* [4][0][][] */ 69,1,-13,32,-60,-6,-127,39,16,63,13,45,9,7,-44,-87, 
  /* [5][0][][] */ -107,65,-88,-32,58,-54,-16,-87,84,-16,3,-51,31,-108,-127,-96, 
  /* [6][0][][] */ -7,-43,-41,32,-81,80,29,-35,-28,-46,127,-26,-2,2,-108,8, 
  /* [7][0][][] */ -37,124,127,-81,66,102,-5,-56,34,84,-89,-23,50,11,34,95, 
  /* [8][0][][] */ -43,8,31,-3,51,9,97,127,-78,-25,-56,-71,43,84,-60,-58, 
  /* [9][0][][] */ 50,60,88,33,-127,-30,-93,-124,56,11,117,37,-53,-90,52,-14, 
  /* [10][0][][] */ -5,-104,2,-68,-127,75,26,26,-36,-48,-8,33,-20,52,-110,25, 
  /* [11][0][][] */ 126,-47,-9,94,-127,-27,66,-18,116,111,-59,35,32,-84,-24,106, 
  /* [12][0][][] */ -56,-63,127,-11,51,-25,15,53,54,-30,90,60,-19,16,-83,25, 
  /* [13][0][][] */ -10,-25,28,15,9,16,127,25,-95,18,1,5,-16,117,82,-60, 
  /* [14][0][][] */ 107,-96,127,-7,80,48,98,61,89,63,61,39,58,-53,28,-54, 
  /* [15][0][][] */ 1,121,11,-43,29,127,-71,56,-34,-23,-41,-16,-40,111,-28,-43, 
  /* [16][0][][] */ -41,54,111,-45,23,69,-3,-2,-3,15,-7,49,85,7,88,127, 
  /* [17][0][][] */ 15,110,78,-127,25,-32,15,-83,-51,79,-27,48,-54,-29,91,-51, 
  /* [18][0][][] */ -94,-2,-82,-83,125,77,-54,-60,36,96,127,82,-18,121,-35,-7, 
  /* [19][0][][] */ 45,124,103,82,60,-42,-17,7,-24,121,46,127,59,65,-55,30, 
  /* [20][0][][] */ 106,4,1,65,-81,-8,-30,46,-38,-59,-127,-48,99,-42,32,-8, 
  /* [21][0][][] */ -84,-81,-13,101,-29,-5,-127,56,16,-13,32,24,-30,25,-70,0, 
  /* [22][0][][] */ -13,8,-72,-56,127,0,-31,58,62,79,37,59,-11,23,-22,27, 
  /* [23][0][][] */ -77,16,-19,6,18,59,107,80,-10,127,-31,-38,-2,21,-68,-28, 
  /* [24][0][][] */ 38,-77,42,4,127,33,74,-38,53,24,45,31,-64,33,-6,-22, 
  /* [25][0][][] */ 120,-60,85,13,18,-19,-29,83,127,-28,-61,7,113,-61,88,37, 
  /* [26][0][][] */ 64,41,91,90,63,-8,-66,-16,2,54,17,127,20,-59,26,-55, 
  /* [27][0][][] */ -64,27,-80,13,-28,97,28,-82,28,-95,126,14,49,-50,127,113, 
  /* [28][0][][] */ -37,34,-68,-127,25,-84,5,-63,-89,92,-62,35,-29,21,-26,71, 
  /* [29][0][][] */ 94,102,-68,39,26,87,-41,-30,50,43,4,59,-127,11,-31,75, 
  /* [30][0][][] */ -29,73,-112,-60,77,-37,7,16,-54,50,-64,-9,13,59,-9,127, 
  /* [31][0][][] */ 24,-119,97,42,72,-76,-91,34,-23,3,17,-42,-89,60,36,127, 
  /* [32][0][][] */ -57,67,-12,38,-105,65,13,59,16,-127,34,-75,28,46,40,47, 
  /* [33][0][][] */ -74,-7,55,80,-9,25,-46,13,-36,-46,18,-18,-5,-4,7,127, 
  /* [34][0][][] */ -11,17,-94,-85,50,-5,-12,68,14,-4,10,-7,-53,-14,-27,127, 
  /* [35][0][][] */ 66,-13,22,-14,3,17,-76,-20,-17,-127,-49,14,-6,-28,44,-24, 
  /* [36][0][][] */ -11,19,-114,-17,39,127,-12,42,-22,16,59,28,13,25,-77,48, 
  /* [37][0][][] */ 57,31,50,-44,63,-127,32,-12,-101,50,-76,-16,0,20,97,33, 
  /* [38][0][][] */ -38,127,39,-47,35,16,83,-100,12,7,-115,29,-46,-96,-85,22, 
  /* [39][0][][] */ 88,41,-127,-121,-19,-36,6,-67,14,3,7,-34,59,1,-122,-82, 
  /* [40][0][][] */ -42,15,-71,-93,-50,-17,24,-127,-4,-8,7,-38,47,78,35,64, 
  /* [41][0][][] */ -39,-88,-16,127,3,-13,-60,-4,-10,-52,66,-65,-65,-3,3,26, 
  /* [42][0][][] */ -19,66,-22,-127,25,20,3,-27,62,-3,-47,18,70,-20,-17,12, 
  /* [43][0][][] */ 8,43,5,21,127,24,20,23,15,43,0,-79,-123,-50,-14,-19, 
  /* [44][0][][] */ 77,-12,23,36,-32,-6,2,28,24,-28,28,7,127,5,-45,-24, 
  /* [45][0][][] */ 11,-91,-56,35,-40,-91,11,52,35,-21,13,26,-75,127,36,-28, 
  /* [46][0][][] */ -22,-87,37,62,-8,-14,-85,56,31,-40,42,-32,41,72,63,127, 
  /* [47][0][][] */ -32,-64,20,86,8,-12,50,28,11,-77,-127,-29,39,-41,-56,10, 
  /* [48][0][][] */ -67,83,-10,-31,3,52,-1,-127,30,-29,34,-51,46,-125,-53,3, 
  /* [49][0][][] */ -66,1,49,-43,7,8,124,127,-27,-31,-11,23,-47,35,-48,32, 
  /* [50][0][][] */ 50,14,-65,31,26,-127,-33,-4,-77,45,-45,-9,24,-77,-106,-36, 
  /* [51][0][][] */ -47,73,-44,124,-51,60,-48,-93,-43,-83,-10,-68,-4,25,-22,127, 
  /* [52][0][][] */ -127,8,15,-5,27,48,54,12,9,-80,-37,-35,-104,-52,-116,-13, 
  /* [53][0][][] */ -50,-76,-52,-127,-43,-3,9,83,35,-73,-47,23,-25,34,66,110, 
  /* [54][0][][] */ 7,-49,0,-8,-60,66,63,-20,-25,-81,57,28,-18,-5,-127,46, 
  /* [55][0][][] */ -11,-23,-43,35,56,-26,62,85,-63,-55,-127,-39,58,-29,-20,37, 
  /* [56][0][][] */ 80,-31,-52,-26,-127,29,-122,-8,-15,-23,-42,14,100,-40,54,6, 
  /* [57][0][][] */ -53,7,23,-25,127,34,45,38,-28,47,-2,-4,-58,70,-95,-17, 
  /* [58][0][][] */ 17,-9,7,-22,45,-22,-54,-52,59,-127,-58,9,-81,-58,-29,51, 
  /* [59][0][][] */ -65,-27,-10,9,21,56,-106,-50,94,127,-83,22,-34,-2,-22,-7, 
  /* [60][0][][] */ 20,-44,-1,12,-127,-39,34,0,-10,43,-18,40,7,-31,34,45, 
  /* [61][0][][] */ 19,22,-81,-9,-40,-28,-127,-70,-12,-1,43,109,59,-63,105,50, 
  /* [62][0][][] */ 53,-16,59,-29,-26,40,55,115,-73,127,19,85,43,51,72,123, 
  /* [63][0][][] */ 29,-122,-15,-9,-81,22,44,-32,-18,-17,-6,-18,-41,127,116,31, 
  /* [64][0][][] */ -12,-10,-127,-35,20,57,36,-19,-7,-103,48,-3,70,-39,-69,101, 
  /* [65][0][][] */ -4,-15,62,73,99,-12,77,99,-51,-9,-127,-84,27,125,-75,-14, 
  /* [66][0][][] */ -31,-116,1,-103,-69,-127,45,-36,-9,-47,13,85,-72,-33,-70,79, 
  /* [67][0][][] */ -29,-75,-78,-25,-70,102,4,-127,-83,-22,-44,-95,18,-11,-66,42, 
  /* [68][0][][] */ 127,49,27,-4,-84,11,-61,-58,-62,-101,-32,-13,32,-37,68,-65, 
  /* [69][0][][] */ 30,7,40,-22,1,-45,-44,34,-9,127,-24,10,-6,37,60,-30, 
  /* [70][0][][] */ 49,-2,-23,85,-116,37,-23,-103,100,127,29,70,53,-56,0,15, 
  /* [71][0][][] */ 127,-70,84,96,-82,-36,39,-37,122,2,-62,34,70,-65,17,6, 
  /* [72][0][][] */ -17,-42,48,102,66,-4,-127,90,99,-4,42,6,-52,-78,-90,85, 
  /* [73][0][][] */ 64,23,73,-127,60,-83,-67,46,-21,121,-42,7,21,-76,26,-36, 
  /* [74][0][][] */ 90,12,26,44,-127,-19,30,3,-81,-40,16,-43,33,-60,11,15, 
  /* [75][0][][] */ 77,127,-113,11,72,60,-22,-28,-24,-35,62,90,-114,65,58,90, 
  /* [76][0][][] */ -67,-33,-7,-47,-57,-1,93,-2,-75,20,108,55,-60,-127,-20,90, 
  /* [77][0][][] */ -68,127,-18,11,-56,-93,52,85,59,-72,-16,69,-24,59,-18,104, 
  /* [78][0][][] */ 127,38,-55,38,-76,25,-120,-31,-1,-23,-83,5,27,-116,20,58, 
  /* [79][0][][] */ -72,-42,126,54,-18,-90,-52,-58,-17,10,11,12,-69,127,-62,75, 
  /* [80][0][][] */ 51,102,19,-127,-13,33,90,-25,12,19,-35,16,87,-46,-5,-1, 
  /* [81][0][][] */ 45,-66,15,-106,92,34,-21,127,113,21,-18,-40,-26,11,-82,-80, 
  /* [82][0][][] */ 77,47,82,4,127,-112,35,49,0,109,-34,24,-2,-51,36,-115, 
  /* [83][0][][] */ -24,93,4,10,77,75,127,95,-10,44,-31,-70,-84,95,-63,-100, 
  /* [84][0][][] */ 15,-82,-17,98,-5,-76,-76,27,-98,60,-71,-19,-127,67,-10,-51, 
  /* [85][0][][] */ -104,57,-36,-8,-20,-46,-47,-42,-16,44,10,-79,-127,-84,-76,46, 
  /* [86][0][][] */ -17,58,87,110,37,-34,52,19,7,27,-56,-77,30,66,-127,-65, 
  /* [87][0][][] */ -20,48,127,-28,-99,-23,24,7,33,-19,6,35,-44,23,-13,-4, 
  /* [88][0][][] */ -32,-67,-113,36,41,42,-11,29,-10,-84,-106,-93,127,-23,12,31, 
  /* [89][0][][] */ 29,16,19,-119,11,-68,-47,47,127,-16,26,-96,-1,-39,53,-72, 
  /* [90][0][][] */ 7,74,30,11,-48,46,40,114,0,-63,-16,127,63,19,-44,87, 
  /* [91][0][][] */ -54,3,-17,68,78,54,-37,-111,-39,32,-6,12,-102,-127,-57,-13, 
  /* [92][0][][] */ -24,72,-3,-25,-127,-3,-71,41,-41,48,84,60,-8,-19,51,6, 
  /* [93][0][][] */ 105,45,90,47,-127,-77,12,31,-24,-65,-18,-67,25,-58,-3,3, 
  /* [94][0][][] */ -38,-127,22,-106,22,43,-24,1,89,-22,-4,62,7,60,-54,36, 
  /* [95][0][][] */ -38,-57,-31,-70,124,127,-34,37,101,40,-83,64,-35,127,-92,30, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0013964908430352807, 0.0012691575102508068, 0.001953598577529192, 0.002357768127694726, 0.0017854584148153663, 0.001014376524835825, 0.0013733260566368699, 0.0023844572715461254, 0.0022642367985099554, 0.0012818841496482491, 0.0021913384553045034, 0.0014143645530566573, 0.0023592133074998856, 0.0019040093757212162, 0.0023547322489321232, 0.0019313874654471874, 0.0030596491415053606, 0.0016380897723138332, 0.0014853680040687323, 0.0023557934910058975, 0.001722071785479784, 0.0013012277195230126, 0.0010594663908705115, 0.0022205621935427189, 0.0024679414927959442, 0.0018293720204383135, 0.0009296239004470408, 0.0018206452950835228, 0.0024043938610702753, 0.002598784863948822, 0.0013224320719018579, 0.0025598292704671621, 0.0012296239146962762, 0.0034528737887740135, 0.0021082728635519743, 0.0020542263519018888, 0.0019815743435174227, 0.0021449150517582893, 0.0017669954104349017, 0.0020400714129209518, 0.0020282126497477293, 0.0031712031923234463, 0.0030683986842632294, 0.0032888525165617466, 0.0043765166774392128, 0.0031763133592903614, 0.0023550365585833788, 0.0019502367358654737, 0.0019385885680094361, 0.002180411946028471, 0.0019557338673621416, 0.0018929140642285347, 0.0022320766001939774, 0.0028899319004267454, 0.0021672120783478022, 0.0034001856110990047, 0.0021433737128973007, 0.0019147808197885752, 0.0013010972179472446, 0.002085553715005517, 0.0029917005449533463, 0.0015811541816219687, 0.001498533645644784, 0.0022020537871867418, 0.0016390722012147307, 0.0014959723921492696, 0.0015898110577836633, 0.0017135241068899632, 0.0015589880058541894, 0.0027209667023271322, 0.0015891502844169736, 0.0014878977090120316, 0.0015986706130206585, 0.0019078380428254604, 0.0018536830320954323, 0.0014908765442669392, 0.0024612632114440203, 0.0026297739241272211, 0.0017734698485583067, 0.0026001930236816406, 0.0023045120760798454, 0.0019907725509256124, 0.0011644391342997551, 0.001829496119171381, 0.0021883917506784201, 0.0025461479090154171, 0.0023130716290324926, 0.0033566539641469717, 0.0011142644798383117, 0.0026601615827530622, 0.0031011586543172598, 0.0026928330771625042, 0.0010912909638136625, 0.0017837845953181386, 0.0027283073868602514, 0.0017401021905243397, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -28029, -6906, 1729, -13675, 14065, -12051, 22949, -11900, 13161, -10458, 10449, 11860, -2958, -29507, 1295, 4437, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.1868828197475523e-05, 5.9686903114197776e-05, 6.4160180045291781e-05, 6.5852371335495263e-05, 9.5593830337747931e-05, 0.00013789103832095861, 4.9298294470645487e-05, 6.1745471612084657e-05, 9.6339470474049449e-05, 8.9957982709165663e-05, 0.0001053635569405742, 9.6169431344605982e-05, 0.00010068731353385374, 8.0947873357217759e-05, 5.5660715588601306e-05, 7.1594491600990295e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 21,28,8,17,-23,-78,-9,-3,-23,-70,8,-6,53,-65,52,31,-95,-29,37,13,87,25,-65,12,-8,62,127,77,15,73,64,-36,0,8,9,-21,36,26,-8,-4,122,17,25,-17,-9,-6,2,-37,31,-37,94,0,-69,2,43,35,-8,-45,8,25,-10,39,-64,-10,19,0,66,31,5,-21,26,22,4,37,5,31,65,-28,48,27,-12,53,42,39,-62,12,-12,68,13,10,-97,-22,24,12,104,77, 
  /* [1][0][][] */ 23,43,-51,-21,-7,-48,98,-74,-62,-33,-60,-49,-9,-41,-3,-51,-30,-21,-37,-15,-13,-96,121,-41,1,11,-3,62,-48,12,-37,19,-37,26,12,10,-19,51,-52,83,33,12,-3,-42,60,-61,-14,40,-80,-3,46,-104,-38,48,67,66,30,23,-66,9,-49,-2,-16,-11,38,30,104,4,-49,-127,10,2,17,68,-19,31,-49,-29,105,-25,45,-8,57,-59,-26,-57,-21,14,-23,-44,32,1,68,-57,-39,62, 
  /* [2][0][][] */ 3,-17,22,-8,74,49,-51,23,-58,43,10,-25,41,-7,22,27,34,-29,-127,-17,-16,-39,-16,30,-1,-13,-42,23,-36,-24,-13,71,-19,-43,-2,10,-53,32,-29,-27,68,19,8,45,9,58,11,-11,-93,10,-21,22,-19,48,18,-69,42,22,46,29,-22,-12,-18,52,34,-10,-30,1,1,-5,-21,-35,27,53,34,76,-61,-11,-22,-40,31,33,57,-13,-7,-49,-19,-47,-22,-32,-12,70,4,-6,92,-41, 
  /* [3][0][][] */ 37,-33,-28,-110,-15,-35,109,-28,33,127,-86,-23,2,-28,-25,60,59,41,-27,25,-46,29,25,4,-44,74,45,-2,-42,-16,-63,65,-2,-14,34,-27,8,-58,-24,67,13,8,-26,25,64,-48,-7,38,56,-33,25,-36,104,47,32,-3,-3,-26,-11,-46,-36,44,71,-1,-24,-20,116,-41,-39,-19,-45,20,9,-77,-1,-82,24,-42,120,3,-3,-57,-38,-41,-38,-49,76,72,-37,53,-65,1,9,-88,-27,33, 
  /* [4][0][][] */ -30,77,35,17,-18,12,-42,-26,17,-33,7,-17,23,40,-22,19,-5,-46,-18,-72,27,-38,-62,12,-30,-33,-28,12,-42,127,-58,-19,9,-43,-4,-33,68,45,-35,6,17,13,11,-37,-46,-10,56,-26,26,-16,-68,-8,-66,27,42,21,6,63,-20,23,-34,-72,-30,4,60,28,-73,-10,-4,-5,11,-70,-12,67,56,65,-33,17,-68,44,22,65,32,-65,47,-68,-32,-66,-35,-52,-55,-18,-2,4,34,-33, 
  /* [5][0][][] */ -3,-10,39,-20,-12,-19,-19,-1,33,5,-13,-3,-16,-28,23,-21,-9,2,-54,-37,-26,11,-24,9,21,-41,65,-21,-4,41,6,70,-9,-86,16,5,-35,-31,-30,2,-51,-2,-22,7,1,19,-68,19,-21,17,51,-14,20,-76,0,14,-21,-52,3,-35,38,19,20,46,-42,5,108,-24,-9,-27,10,19,0,28,32,10,-10,-17,127,34,-23,-16,-32,23,39,59,9,92,7,-37,-4,9,12,-14,-27,15, 
  /* [6][0][][] */ 14,-69,80,19,-33,125,-47,-107,-34,-90,-94,71,16,16,-32,90,10,39,24,-52,-97,-18,-98,-56,-2,-48,-1,85,-117,47,-13,-37,46,83,-19,-11,-9,-34,11,-28,-77,49,41,-39,14,48,-97,-17,46,18,-84,-127,95,7,-33,-31,36,-34,29,-20,-13,-44,48,-8,49,-89,-62,-59,-93,18,-25,-76,-25,-104,30,-105,82,9,-71,38,-42,81,25,-108,77,-53,-24,8,-82,90,-82,87,56,-43,80,-110, 
  /* [7][0][][] */ -14,-9,-65,72,-36,-5,47,5,-96,8,82,57,-6,-61,2,-35,-12,-3,3,7,-47,-18,-36,-42,78,48,-11,83,1,31,28,37,-61,-127,35,118,1,22,-36,7,0,-13,0,-79,39,62,74,94,-11,53,-60,9,35,-39,52,-59,-22,41,-83,-18,62,17,12,-41,84,-45,107,-14,-64,-27,79,-3,-22,-33,-85,-26,39,-32,99,-27,0,-9,-73,-26,44,25,-84,41,-17,23,-1,34,73,-10,85,-2, 
  /* [8][0][][] */ -5,-55,9,2,-10,-1,16,-7,-10,-2,50,42,11,26,-42,-2,72,-5,13,0,-15,-75,-30,-21,-20,-36,64,-1,-20,48,0,-32,-20,-6,-3,-1,-43,-18,18,-23,-1,41,25,-44,14,-21,26,-15,38,-2,44,-2,-8,10,-44,-2,-19,110,-64,-6,-19,-60,-61,-2,-82,-35,-21,16,-14,5,40,-17,-26,-127,42,-102,15,14,-60,24,-24,-14,6,58,61,-57,-37,48,-33,80,17,-19,-50,3,-4,-66, 
  /* [9][0][][] */ -27,-24,-29,24,0,15,7,40,-40,0,61,52,-26,53,26,-43,-20,36,-20,-38,2,45,-6,9,-26,24,8,19,34,-4,19,-3,-13,-16,11,55,-19,-7,22,1,-6,-26,9,3,12,44,2,42,-44,7,-13,33,127,23,-8,6,18,-19,36,17,-31,8,77,10,18,27,62,5,30,-2,-17,20,5,-124,-38,-122,-30,-9,39,-2,-5,35,1,-41,39,18,-52,0,-1,108,34,32,56,37,-12,33, 
  /* [10][0][][] */ 23,45,12,-3,-18,10,-37,-17,67,10,-35,18,19,12,-6,-50,-34,2,22,3,26,-8,-18,-26,14,-20,-93,45,-17,55,2,12,16,27,-16,7,17,2,2,-3,44,-12,55,-37,-27,-1,19,31,16,2,9,-20,-20,-8,3,38,-12,6,-12,-9,-9,-33,-2,8,1,-10,-86,-28,-50,-14,46,-18,-21,29,32,15,54,-15,-87,13,-13,36,0,-2,7,9,-71,-127,-27,29,9,23,52,-32,16,35, 
  /* [11][0][][] */ 26,-35,-1,4,-61,26,13,8,73,-10,-22,-43,16,12,10,-8,-25,45,18,-53,10,26,21,-28,39,9,53,-3,24,-53,-28,19,14,101,-95,11,19,-16,59,14,-39,42,-20,13,-35,0,-12,0,52,-20,-28,-14,-23,19,-71,89,-33,7,-7,-30,21,3,-11,-56,0,-37,-127,-74,-6,-35,-80,23,47,19,-11,-1,38,58,-112,-28,-6,-2,-10,4,-23,-1,51,69,16,-49,4,10,-32,22,72,32, 
  /* [12][0][][] */ 22,27,-37,-28,12,-27,5,31,51,-32,16,-6,-3,-14,-10,9,7,-39,-27,10,14,53,5,47,-40,-39,-127,-7,68,-28,31,-3,-18,-75,65,-4,31,-15,-3,22,-6,-55,12,36,44,-2,20,-12,-64,-5,-52,96,70,-18,34,-73,7,20,-38,-30,15,46,75,8,-14,-14,30,23,107,23,23,25,6,-18,-14,-8,-30,-50,44,-61,23,-47,28,-37,1,3,4,-103,-8,34,-42,21,15,61,7,45, 
  /* [13][0][][] */ -16,17,-64,27,32,19,-9,5,26,61,-40,44,-41,-24,59,-44,15,46,66,7,-31,-36,-5,21,38,50,-19,30,8,32,59,-20,-15,56,-4,42,13,-34,-48,-54,-1,-11,18,16,41,46,-24,42,-46,41,-7,9,-9,-34,66,34,20,-43,-13,-15,28,23,7,-31,9,82,127,38,25,-6,-52,-15,41,53,-78,54,16,-64,125,-38,-17,-37,28,8,31,50,-37,-17,-17,-18,7,46,45,9,62,57, 
  /* [14][0][][] */ -6,55,16,25,-67,-50,22,44,-74,-18,68,5,-87,-7,68,-21,-52,39,-63,31,-20,29,-93,6,-52,-3,-61,-113,9,-5,37,87,-62,38,16,-10,-23,-78,-4,-38,39,-40,45,-19,-7,52,-80,34,-7,-49,80,36,-14,35,-30,35,-63,28,6,46,42,68,-10,48,22,-46,-5,-73,43,62,83,29,-60,34,6,10,37,-6,32,25,-66,125,2,-127,82,-7,-7,6,-113,-12,-26,-2,-30,5,34,41, 
  /* [15][0][][] */ 69,-37,26,33,45,9,-15,-12,19,30,-65,-10,70,63,-11,-19,-6,7,-75,50,5,-24,14,33,66,-33,88,30,43,-38,-35,63,71,52,-1,-84,57,72,66,50,86,39,-15,7,-44,-122,38,-39,-30,-13,-20,1,1,-50,-26,49,-9,6,-11,22,10,-56,-26,27,35,43,-74,40,-1,-34,-10,-8,1,-127,-47,-102,-23,22,-123,32,74,-38,55,33,-53,-9,-11,-20,34,98,10,-63,-28,-36,35,-34, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0026294251438230276, 0.0025366933550685644, 0.0027268077246844769, 0.002798725850880146, 0.0040627378039062023, 0.0058603687211871147, 0.0020951775368303061, 0.0026241824962198734, 0.0040944274514913559, 0.0038232142105698586, 0.0044779512099921703, 0.0040872008539736271, 0.0042792106978595257, 0.0034402846358716488, 0.0023655802942812443, 0.0030427658930420876, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9662, 223, -6526, 8765, -1027, -100, 1095, -698, 2438, -4399, 1274, -2953, 11217, -3614, -1809, -8276, -31, -49, -9646, -623, -2637, 974, -8741, 758, 8, 8759, -11465, -6251, 486, -3859, -873, -705, 21308, -3, -3337, -276, 895, 15122, 5259, 13065, 329, 7048, 323, 7228, -131, -1152, 8036, 1788, -5620, -409, -3553, 782, -878, -2749, -1611, 2907, 693, 1256, 996, 2195, -256, 647, -41, 8067, 8112, -889, 17471, 9107, -1863, 232, 10065, -1224, 67, 93, -4260, -501, 22462, 12332, 14609, 10343, 14986, -1258, 5569, 6697, -819, -103, 11177, -8318, 11268, 333, -8565, -1599, -253, 598, 23597, -1703, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012174433504696935, 0.00026023545069620013, 0.00011890230962308124, 0.00015948223881423473, 0.00017763736832421273, 0.00039701469358988106, 8.5722749645356089e-05, 0.00017894631309900433, 0.00028991658473387361, 0.00028203424881212413, 0.00023808999685570598, 0.00018257946067024022, 0.00010698966070776805, 0.0001418032479705289, 0.00017359192133881152, 0.00016634288476780057, 0.00023216093541122973, 0.00028243163251318038, 0.00014370016288012266, 0.00031465230858884752, 0.00019800201698672026, 0.00023340588086284697, 9.5558702014386654e-05, 0.00017407120321877301, 0.0032480130903422832, 0.00014162850857246667, 0.00021269785065669566, 0.00011781228386098519, 0.00031451976974494755, 0.00017135485541075468, 0.00014259804447647184, 0.00026902899844571948, 7.3157985752914101e-05, 0.00043545151129364967, 0.00011891010217368603, 0.00017130986088886857, 0.00029028547578491271, 8.3868464571423829e-05, 0.00017609064525458962, 9.0106761490460485e-05, 0.00064286531414836645, 0.00018612698477227241, 0.00019916487508453429, 0.00011889886081917211, 0.00015294906916096807, 0.00024487075279466808, 0.00019674035138450563, 0.00022453474230132997, 0.00019795331172645092, 0.00038798910100013018, 0.00028358917916193604, 0.00016628696175757796, 0.00014068293967284262, 0.00038060083170421422, 0.00032786573865450919, 0.00024070404469966888, 0.00019329236238263547, 0.00053451798157766461, 0.00048345900722779334, 0.00026729248929768801, 0.00027035205857828259, 0.00024048751220107079, 0.00013810703239869326, 9.9518299975898117e-05, 0.0002922463754657656, 0.00039314653258770704, 9.6425865194760263e-05, 0.00016718935512471944, 0.00024822686100378633, 0.00037576674367301166, 0.00011144909512950107, 0.00027604657225310802, 0.00057438563089817762, 0.0001723979803500697, 0.00016103991947602481, 0.00018334432388655841, 5.7373759773327038e-05, 0.00012237633927725255, 9.7449905297253281e-05, 0.00014568035840056837, 6.062612374080345e-05, 0.00023554731160402298, 0.0001562105753691867, 0.00036424215068109334, 7.8549470345024019e-05, 0.0002988736960105598, 0.00011874725896632299, 0.00022716348757967353, 0.00010412753908894956, 0.00019716938550118357, 0.00010631947952788323, 0.00021422943973448128, 0.00030861710547469556, 0.00017400608339812607, 7.3350514867343009e-05, 0.000299139937851578, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-15,3,-37,106,-2,25,-11,-8,-5,-14,-15,-12,6,-6,-4,-14,6,-10,-12,-7,24,22,43,-1,-28,-21,6,15,4,32,6,9,3,1,-34,-5,-67,-55,-6,-1,1,33,-23,-17,40,-56,-18,-26,10,-10,49,-60,-2,44,-15,8,-8,2,-21,-13,-17,-10,-39,-15,-17,-44,-34,-12,23,-11,-8,35,0,3,6,-26,-7,127,-11,-112,10,-78,-14,-24,-19,14,14,-32,-15,16,-30,-7,30,-28,7, -13,32,55,-80,-36,3,127,-57,-1,-19,-40,18,-47,1,-94,98,-6,75,73,-25,0,127,94,105,33,-9,55,73,127,45,127,-25,-125,-17,-83,-35,-28,-92,127,-70,-29,-127,-15,-54,65,-28,-22,-3,43,2,22,127,-90,30,-77,-9,-72,-5,-9,22,-12,-127,-126,-58,-43,-2,-9,-74,-5,13,-64,112,-127,-8,14,-23,-116,-90,-11,-97,-127,11,37,-47,109,70,-68,34,-127,-1,34,-21,7,127,-65,-78, -34,-4,-3,-15,68,2,38,-26,-20,7,-14,7,3,4,-7,-23,-11,-1,-19,-23,-11,2,30,27,0,-14,4,-10,7,11,20,8,-9,2,-7,57,-5,-73,-50,4,-7,4,15,-8,-12,-24,-44,-25,-18,0,-7,32,4,-3,15,-16,63,-16,4,-27,-11,-7,-50,-10,-28,-28,127,-22,-4,16,-10,4,18,11,7,18,-11,24,-46,-9,-77,1,-93,-11,9,-32,5,-19,-41,-34,8,45,4,26,-26,11, 
  /* [0][1][][] */ -84,-10,42,-58,52,104,-49,-17,-4,-13,-28,-13,-127,25,19,88,-14,42,89,23,27,-19,124,-29,40,36,68,23,-15,2,-2,-18,-127,-15,76,-24,-14,-127,-71,-127,-18,0,85,-41,-66,127,-69,-76,57,68,14,-48,-112,60,71,-32,22,-26,29,-15,11,-9,95,-73,-27,18,-29,-60,-7,-5,-127,10,77,127,11,-68,-127,-74,-65,-40,-82,-8,-6,-46,43,20,-104,64,-66,127,101,-83,127,6,-49,-3, 74,127,127,127,-127,-127,114,-63,127,127,-82,-59,-89,127,-31,127,127,-127,127,127,127,-77,109,-127,-127,-127,127,127,-116,127,-17,127,-89,127,127,-98,127,122,1,-24,127,-13,-127,-127,127,-22,127,127,127,-127,127,-117,111,127,-127,127,-127,127,-127,127,-101,117,105,-127,127,127,-17,127,-100,-127,-13,-127,10,117,127,70,10,-127,97,-127,37,127,127,127,127,61,-127,127,-91,49,-4,-28,-92,-22,-127,-25, -127,-34,35,-65,14,63,-67,1,-35,-12,-6,127,-118,21,22,59,-22,48,70,5,10,-27,98,-23,39,20,45,9,-17,-4,14,-18,-114,-30,90,127,-7,-117,-94,-95,-29,-32,22,-41,-62,-62,-66,-105,40,73,-6,-33,127,17,100,-50,86,-24,42,-44,0,-32,-127,-24,-64,-6,-58,-71,-13,1,-110,-3,32,-89,8,127,-77,-48,-64,13,-110,-17,-43,-68,6,20,-90,40,-35,-77,127,127,-39,-21,-69,-7, 
  /* [0][2][][] */ -15,-44,-16,-9,39,0,-14,19,-13,10,28,-22,50,2,-10,-35,0,-8,-47,-20,-14,-15,13,-27,2,-11,-16,10,-5,-9,-18,3,11,-2,7,-25,-8,-39,-22,-8,-22,0,28,4,23,14,-46,0,-32,10,-23,-20,-3,-27,36,-18,10,-15,2,-20,-3,14,3,3,-30,-19,115,16,27,24,-6,1,-6,-10,-11,-24,-29,10,-30,-12,-25,2,-60,-13,-6,-8,44,-11,5,6,-1,-13,-15,-12,-24,-3, -22,-62,31,-102,-39,2,58,127,-55,70,127,-24,-55,21,127,81,-8,-37,72,-47,-14,-35,127,6,15,-18,35,19,-15,2,-79,-44,-94,-31,-88,-4,-93,-120,47,-60,-22,-121,-34,117,24,-18,-34,-4,23,-4,-12,-9,61,29,-47,-43,-49,-44,38,-57,127,24,98,7,-75,-53,-29,-44,127,31,-25,25,22,-24,16,-21,-37,-36,0,49,-96,-22,-59,-60,37,-127,-11,10,-29,1,40,4,12,-115,-72,127, -20,2,-6,5,31,-7,-7,15,-23,4,11,34,49,0,-10,-48,-2,7,-16,-31,-15,-10,7,-10,-6,-10,-11,0,-9,-2,-26,0,4,2,8,3,-11,-56,-33,-9,-32,-11,1,-3,19,-2,-46,7,-27,1,-16,-19,6,-30,33,-18,53,-8,6,-21,5,15,-14,16,-21,-22,-29,20,29,15,-8,1,-49,-33,-13,-10,-32,9,96,2,-27,-2,-41,1,-9,-1,48,-2,10,-3,-6,21,3,-20,-23,-9, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0060482011176645756, 0.012928374111652374, 0.0059070107527077198, 0.0079230023548007011, 0.0088249407708644867, 0.019723502919077873, 0.0042586657218635082, 0.0088899685069918633, 0.014402919448912144, 0.014011329039931297, 0.011828199028968811, 0.0090704616159200668, 0.005315195769071579, 0.0070447186008095741, 0.0086239650845527649, 0.008263835683465004, 0.011533645913004875, 0.014031070284545422, 0.0071389563381671906, 0.015631778165698051, 0.0098366467282176018, 0.011595494113862514, 0.0047473111189901829, 0.0086477752774953842, 0.1613597571849823, 0.0070360377430915833, 0.010566729120910168, 0.0058528585359454155, 0.01562519371509552, 0.0085128284990787506, 0.0070842034183442593, 0.01336523424834013, 0.0036344542168080807, 0.021633025258779526, 0.0059073977172374725, 0.0085105933248996735, 0.014421245083212852, 0.0041665458120405674, 0.0087481001392006874, 0.0044764615595340729, 0.031937245279550552, 0.0092467004433274269, 0.0098944166675209999, 0.0059068393893539906, 0.0075984373688697815, 0.012165063060820103, 0.0097739677876234055, 0.011154780164361, 0.0098342271521687508, 0.019275115802884102, 0.014088576659560204, 0.008261057548224926, 0.0069890618324279785, 0.018908070400357246, 0.016288215294480324, 0.011958063580095768, 0.009602673351764679, 0.026554601266980171, 0.024018015712499619, 0.013278964906930923, 0.013430962339043617, 0.011947305873036385, 0.0068610920570790768, 0.0049440222792327404, 0.014518662355840206, 0.019531333819031715, 0.0047903913073241711, 0.0083058886229991913, 0.012331793084740639, 0.018667913973331451, 0.0055367383174598217, 0.013713862746953964, 0.028535205870866776, 0.0085646500810980797, 0.0080003868788480759, 0.0091084595769643784, 0.002850301330909133, 0.0060795987956225872, 0.0048412652686238289, 0.0072373314760625362, 0.0030118771828711033, 0.011701879091560841, 0.0077604679390788078, 0.018095377832651138, 0.0039023007266223431, 0.014847904443740845, 0.0058993077836930752, 0.011285374872386456, 0.0051730070263147354, 0.0097952820360660553, 0.0052819014526903629, 0.010642817243933678, 0.015331951901316643, 0.00864453986287117, 0.0036440188996493816, 0.014861131086945534, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1222, 8694, 263, 1634, 3676, 16921, 53, 2339, 10560, -1320, 25718, 4728, 3237, 559, 5306, 774, 2734, 4787, -267, 14372, 1525, 8382, -1953, 2197, -12582, 1393, 2715, 2058, 6171, 1198, 4322, 4438, 2197, 11796, 4526, 4657, 3754, 2381, 4993, 3297, 25870, 1856, 2172, 1735, 4212, 11451, 12925, 11351, 1306, -909, 2134, 8499, 3034, -4384, 7994, 190, 3806, 18705, 2182, 1824, 3743, 11946, 3863, -517, 17686, 15469, 1912, 4301, 7444, 6095, 2065, 1602, -4927, 4755, 2092, 3063, 608, 13240, 3698, 5998, 3305, 973, 4290, 14524, 60, 11966, 7647, 2099, -955, 2581, 1013, 10408, 3875, 4722, 6722, 5087, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00023531887563876808, 8.9670538727659732e-05, 0.00032572104828432202, 0.00023220726870931685, 0.00017179735004901886, 5.4173233365872875e-05, 0.0002170305815525353, 0.00013204404967837036, 8.2224250945728272e-05, 0.00011336506577208638, 3.4340759157203138e-05, 0.00010096638288814574, 0.00010361491877119988, 0.00033715233439579606, 0.00010745395411504433, 0.00010523031960474327, 0.00020963397400919348, 0.00012790974869858474, 0.00015391620399896055, 6.0909271269338205e-05, 0.00015546890790574253, 8.9959044998977333e-05, 0.00013613667397294194, 0.00011728997924365103, 5.8689387515187263e-05, 0.00012321049871388823, 0.00018931928207166493, 0.00016057578613981605, 0.00014197149721439928, 0.00020299787865951657, 0.00012807964230887592, 0.00012520898599177599, 0.0002006659924518317, 7.1525217208545655e-05, 0.00011588408233365044, 0.00013398198643699288, 0.00015964059275574982, 0.00017300511535722762, 0.0001034194792737253, 0.00013176561333239079, 3.7413716199807823e-05, 0.00015945169434417039, 0.00017379828204866499, 0.00012815164518542588, 8.5701518401037902e-05, 7.365782221313566e-05, 5.6733326346147805e-05, 6.9064721174072474e-05, 0.00021934272081125528, 0.00022447085939347744, 0.00018485977489035577, 8.3192782767582685e-05, 0.00015741596871521324, 8.7663618614897132e-05, 9.2731439508497715e-05, 0.00029284213087521493, 9.6435411251150072e-05, 4.8572939704172313e-05, 0.00010114631004398689, 0.00014929957978893071, 0.00012230538413859904, 7.3673618317116052e-05, 0.00015844075824134052, 0.00017225023475475609, 5.4498192184837535e-05, 5.6071366998367012e-05, 0.00021316687343642116, 0.00013209527241997421, 0.00010121348896063864, 8.6160187493078411e-05, 0.00024109757214318961, 0.00014508260937873274, 0.00011840673687402159, 0.00013559251965489239, 0.00018667873519007117, 0.00019952838192693889, 0.00015879060083534569, 6.0689919337164611e-05, 0.0001510157308075577, 0.00013501380453817546, 0.00012853191583417356, 0.00015074745169840753, 0.00010978589853039011, 6.3876381318550557e-05, 0.000111845598439686, 6.2824787164572626e-05, 9.2812260845676064e-05, 0.00020706228679046035, 0.0001545501290820539, 0.00021796468354295939, 0.00018207717221230268, 8.0950376286637038e-05, 0.00012656486069317907, 8.5443243733607233e-05, 8.1248246715404093e-05, 0.0001226116728503257, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 50,2,2,66,-127,-28,96,57,70,96,-28,50,19,3,35,77, 
  /* [1][0][][] */ -28,33,-89,9,127,101,-4,7,-35,15,-54,37,-60,93,-55,-33, 
  /* [2][0][][] */ -40,65,75,-6,69,89,4,33,39,-1,42,-15,52,-127,-13,8, 
  /* [3][0][][] */ 127,-35,19,3,35,31,-15,14,41,34,-61,-24,-40,44,-29,50, 
  /* [4][0][][] */ -73,-29,-1,45,-101,-6,-94,-22,-8,37,-12,-55,-20,29,-32,127, 
  /* [5][0][][] */ -98,7,28,20,127,34,-2,15,-55,31,-21,13,-72,57,-87,-27, 
  /* [6][0][][] */ -127,19,-37,35,-14,-76,72,23,7,-38,-48,43,8,4,-37,17, 
  /* [7][0][][] */ -10,104,65,-98,82,49,127,10,58,9,-4,54,93,35,-23,7, 
  /* [8][0][][] */ -31,-31,-69,58,-46,78,-49,-73,33,-33,79,39,127,41,-97,0, 
  /* [9][0][][] */ -18,-127,-11,73,-36,-66,-19,51,58,51,1,61,-72,6,-8,-41, 
  /* [10][0][][] */ -40,-56,-106,53,-127,124,70,-104,12,-75,61,-37,45,123,-92,89, 
  /* [11][0][][] */ -42,-105,-39,25,-3,82,24,-7,23,21,40,-87,6,112,-103,127, 
  /* [12][0][][] */ -38,-100,-76,92,-91,-127,7,76,87,77,-41,97,-12,-64,-31,-15, 
  /* [13][0][][] */ -65,-19,-37,-6,-13,4,33,13,-17,127,-7,-21,41,33,12,-13, 
  /* [14][0][][] */ -110,-36,-36,-42,-10,78,-30,-104,127,-51,56,-2,96,-51,-86,-93, 
  /* [15][0][][] */ 8,-127,91,-53,-56,-40,5,59,14,-52,-94,-40,85,-48,-26,-49, 
  /* [16][0][][] */ -16,-26,21,-39,26,23,-19,-31,63,-127,44,-16,-3,-7,-76,-99, 
  /* [17][0][][] */ -21,10,23,-71,14,7,-30,-2,96,-68,33,73,105,-79,-32,-127, 
  /* [18][0][][] */ 72,-2,-28,-111,4,-30,124,-51,28,58,-15,58,0,72,-7,-127, 
  /* [19][0][][] */ -26,-23,-22,-68,-127,35,-12,-2,34,-46,28,-118,-16,-24,-19,-8, 
  /* [20][0][][] */ 16,69,74,-90,77,-15,-62,107,-108,-127,35,-86,-42,123,-14,-25, 
  /* [21][0][][] */ 21,-96,-127,3,89,29,79,94,-68,-78,-24,16,114,-110,-30,15, 
  /* [22][0][][] */ 58,-14,76,-3,0,5,66,33,22,124,37,33,3,7,127,1, 
  /* [23][0][][] */ -120,-77,-27,67,73,48,21,14,-3,11,-5,-94,-3,71,59,127, 
  /* [24][0][][] */ 16,-11,36,35,17,-90,17,-62,18,127,-116,73,-18,-63,79,-66, 
  /* [25][0][][] */ 127,-48,93,122,29,10,-3,24,-120,63,52,-64,-4,15,70,-7, 
  /* [26][0][][] */ -17,23,7,44,-54,108,-20,38,-54,-34,-77,31,1,14,44,-127, 
  /* [27][0][][] */ 34,0,-2,-53,-51,3,-77,7,-105,-19,-65,-43,-71,47,-18,127, 
  /* [28][0][][] */ -68,23,18,-7,23,-9,-127,-3,-5,-35,-3,-14,13,-58,-79,-36, 
  /* [29][0][][] */ -21,-111,-27,88,-32,11,127,0,77,52,-112,61,37,-31,-52,72, 
  /* [30][0][][] */ 42,-55,-56,3,-127,28,53,-36,16,-5,1,-29,-14,45,-5,68, 
  /* [31][0][][] */ -127,-19,3,88,-35,13,-43,3,-26,-59,9,-35,-20,-48,-24,94, 
  /* [32][0][][] */ -121,-91,-83,-4,-92,-56,-1,-6,127,58,-61,-60,36,48,39,-23, 
  /* [33][0][][] */ -11,15,-81,36,-127,-89,57,-13,-113,18,-55,-61,-15,99,64,65, 
  /* [34][0][][] */ 42,74,7,36,-78,-46,40,4,15,-127,-23,32,-32,-2,44,99, 
  /* [35][0][][] */ 46,0,-58,-11,-127,9,82,-38,30,53,-19,-14,20,63,36,55, 
  /* [36][0][][] */ -7,-9,-52,54,127,-25,41,70,-85,15,-83,-86,25,-22,8,30, 
  /* [37][0][][] */ -112,49,0,-67,42,-92,-44,-27,-3,-24,-24,54,55,-77,20,-127, 
  /* [38][0][][] */ 35,119,36,-75,-105,-63,-127,-58,-44,-68,58,74,-79,-97,90,0, 
  /* [39][0][][] */ -5,-48,6,69,15,85,88,-59,-29,59,16,-29,-17,127,48,123, 
  /* [40][0][][] */ 112,58,90,97,-71,-66,2,22,-83,76,-13,-21,-47,-30,127,-3, 
  /* [41][0][][] */ -17,-12,13,52,-95,110,1,53,-52,27,-111,5,18,26,48,-127, 
  /* [42][0][][] */ 4,-107,27,-20,127,36,60,13,-25,-99,-92,-24,-14,-15,-7,35, 
  /* [43][0][][] */ -40,-97,-29,6,122,8,-10,94,-61,-56,-127,-86,108,-4,-55,52, 
  /* [44][0][][] */ -33,-55,-79,-110,30,86,63,7,-39,-127,-73,77,-51,48,27,109, 
  /* [45][0][][] */ -1,-50,-58,-6,-127,62,-16,-57,56,-49,25,-51,6,9,-34,40, 
  /* [46][0][][] */ 26,-84,-20,11,95,-86,-23,103,-13,-24,38,67,-59,-57,55,-127, 
  /* [47][0][][] */ -86,-31,-14,81,-5,17,41,42,-10,127,76,89,-41,91,-17,109, 
  /* [48][0][][] */ 41,-13,-80,-86,33,-65,8,54,43,-78,-4,24,-60,8,-43,-127, 
  /* [49][0][][] */ 57,48,2,35,-22,-19,62,38,-43,127,-41,32,-45,-38,73,99, 
  /* [50][0][][] */ 11,-3,15,16,-127,-23,-16,-45,60,23,21,55,-25,-66,21,-5, 
  /* [51][0][][] */ 15,-8,-10,-127,-25,88,51,-44,6,4,33,-50,68,72,-30,13, 
  /* [52][0][][] */ 24,-18,4,-88,83,-116,-11,-41,40,4,127,-60,37,6,-38,96, 
  /* [53][0][][] */ -46,-59,58,-32,-51,-127,30,-116,-4,86,-102,80,-28,-22,29,-89, 
  /* [54][0][][] */ 60,68,36,-9,-127,-36,-90,-95,-12,4,56,75,-72,-45,68,16, 
  /* [55][0][][] */ 14,6,-33,73,-30,22,33,-14,3,127,17,57,0,5,1,41, 
  /* [56][0][][] */ 37,-122,-99,86,-84,61,3,63,127,8,75,47,-35,-36,59,118, 
  /* [57][0][][] */ 41,9,98,-77,98,-8,-18,9,86,-40,16,127,50,-43,101,-55, 
  /* [58][0][][] */ 80,-61,16,-60,40,10,-8,127,48,89,-11,56,46,12,78,-6, 
  /* [59][0][][] */ -48,47,35,-50,-5,-99,5,4,-5,23,-117,-104,-127,-52,74,-10, 
  /* [60][0][][] */ 39,-21,28,20,9,-20,13,-56,21,127,-15,68,-13,-27,-18,-30, 
  /* [61][0][][] */ 63,58,22,-22,-84,-127,-22,-64,-67,-17,-26,23,-72,-38,94,96, 
  /* [62][0][][] */ -23,91,-39,40,-56,127,-50,26,-58,12,-43,37,-38,39,66,-95, 
  /* [63][0][][] */ 30,-13,-64,-127,-23,-53,80,-7,1,-105,-28,40,-40,82,42,-28, 
  /* [64][0][][] */ -38,21,8,-23,52,-61,27,85,-127,-18,-72,-35,-35,81,58,63, 
  /* [65][0][][] */ -54,-7,-34,-20,60,27,-56,-79,-125,-48,17,-12,-127,96,-44,43, 
  /* [66][0][][] */ -13,58,-6,33,-45,127,-26,21,-65,24,-32,51,-35,54,50,-90, 
  /* [67][0][][] */ 19,-29,-35,-28,11,-89,58,-87,2,30,10,126,-59,-27,-17,-127, 
  /* [68][0][][] */ 8,-127,-22,66,-8,6,27,81,44,34,47,15,-59,34,-19,-15, 
  /* [69][0][][] */ 18,79,86,-105,51,1,-38,101,35,102,52,83,91,-94,33,-127, 
  /* [70][0][][] */ 52,27,43,-29,95,1,-102,-48,-127,-88,-3,42,-39,55,-99,-9, 
  /* [71][0][][] */ -15,-71,36,-36,65,-22,31,38,-78,85,-127,-46,22,82,-13,39, 
  /* [72][0][][] */ 6,13,62,8,-54,-20,-109,-75,-15,75,-31,57,20,106,-127,-2, 
  /* [73][0][][] */ 0,-38,-24,-40,49,-115,29,-48,81,92,114,-9,25,-18,-76,127, 
  /* [74][0][][] */ 10,6,-35,90,-81,-6,91,26,86,72,35,122,127,19,-63,3, 
  /* [75][0][][] */ -25,42,-29,31,-49,127,-16,16,-33,31,-34,45,-20,44,26,-70, 
  /* [76][0][][] */ -67,84,-64,43,-99,-3,-17,27,55,52,-43,-41,42,-52,-127,35, 
  /* [77][0][][] */ 111,127,-116,120,69,84,87,42,39,11,118,-40,82,40,69,35, 
  /* [78][0][][] */ 18,-37,-3,-59,67,-120,24,-49,50,43,127,-20,0,-15,-37,119, 
  /* [79][0][][] */ -38,61,1,23,-8,-47,-35,-1,-127,-11,58,9,104,40,-74,-39, 
  /* [80][0][][] */ -82,23,80,-1,66,48,-2,-127,-81,58,-70,-51,-12,-94,27,62, 
  /* [81][0][][] */ 82,78,-27,-7,36,-29,83,116,-112,125,-61,-39,-49,33,116,127, 
  /* [82][0][][] */ 66,107,-27,-67,-2,-64,106,-93,39,30,-72,82,127,-28,80,-64, 
  /* [83][0][][] */ 6,-38,25,26,-5,23,-33,-96,74,-35,100,19,42,-60,-48,-127, 
  /* [84][0][][] */ -127,-82,-48,-29,-8,106,95,-7,89,66,102,97,59,79,-89,12, 
  /* [85][0][][] */ 119,1,101,-77,83,-3,-21,81,20,127,-72,0,-42,63,117,12, 
  /* [86][0][][] */ -78,72,-25,-3,28,82,22,13,90,43,127,-22,-27,68,-3,-19, 
  /* [87][0][][] */ 13,-60,22,-42,45,-127,24,-29,47,-9,65,-35,32,-44,-37,66, 
  /* [88][0][][] */ -92,63,50,-15,106,-29,40,23,-65,-76,106,-74,70,127,111,-123, 
  /* [89][0][][] */ -22,40,-10,23,-36,127,-14,28,-43,11,-39,18,-7,56,27,-82, 
  /* [90][0][][] */ 48,-72,20,20,127,0,52,25,-12,-93,-120,-28,-12,-14,-65,31, 
  /* [91][0][][] */ -20,66,-38,-51,7,-74,-95,39,-92,15,-108,-127,-122,-87,-3,30, 
  /* [92][0][][] */ 60,45,63,35,-127,-81,21,10,-26,25,-24,-32,-21,-74,25,2, 
  /* [93][0][][] */ 0,-123,-115,70,-45,-60,-12,127,112,70,13,74,-63,67,-14,-33, 
  /* [94][0][][] */ 111,13,118,-17,19,-43,12,41,24,80,0,53,13,-2,127,-18, 
  /* [95][0][][] */ -57,-52,-14,-20,127,-12,40,77,-30,-7,-111,-49,19,15,-67,24, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0051499824039638042, 0.0019624507986009121, 0.0071284454315900803, 0.0050818845629692078, 0.0037598060443997383, 0.001185587840154767, 0.0047497409395873547, 0.002889800351113081, 0.0017994878580793738, 0.0024810084141790867, 0.00075155170634388924, 0.0022096617612987757, 0.0022676251828670502, 0.0073786205612123013, 0.0023516430519521236, 0.0023029784206300974, 0.0045878654345870018, 0.002799320500344038, 0.0033684750087559223, 0.0013330068904906511, 0.0034024561755359173, 0.0019687646999955177, 0.0029793679714202881, 0.0025669056922197342, 0.0012844244483858347, 0.0026964768767356873, 0.0041432757861912251, 0.0035142209380865097, 0.0031070637051016092, 0.0044426335953176022, 0.0028030385728925467, 0.0027402141131460667, 0.0043915999121963978, 0.001565338228829205, 0.002536137355491519, 0.0029322123154997826, 0.0034937539603561163, 0.0037862381432205439, 0.0022633480839431286, 0.0028837067075073719, 0.00081880379002541304, 0.0034896198194473982, 0.0038035968318581581, 0.002804614370688796, 0.0018755883211269975, 0.0016120105283334851, 0.0012416158569976687, 0.0015114899724721909, 0.0048003424890339375, 0.0049125724472105503, 0.0040456787683069706, 0.0018206842942163348, 0.0034450679086148739, 0.001918529043905437, 0.0020294389687478542, 0.0064088860526680946, 0.0021105008199810982, 0.0010630247415974736, 0.0022135993931442499, 0.0032674395479261875, 0.002676668344065547, 0.0016123561654239893, 0.0034674955531954765, 0.0037697176449000835, 0.0011926996521651745, 0.0012271287851035595, 0.0046651833690702915, 0.0028909211978316307, 0.0022150697186589241, 0.0018856263486668468, 0.0052764499559998512, 0.003175150603055954, 0.0025913459248840809, 0.0029674589168280363, 0.0040854872204363346, 0.0043667033314704895, 0.0034751517232507467, 0.0013282063882797956, 0.0033049976918846369, 0.0029547936283051968, 0.00281293666921556, 0.0032991264015436172, 0.0024026778992265463, 0.0013979424256831408, 0.0024477546103298664, 0.0013749281642958522, 0.0020312077831476927, 0.0045315837487578392, 0.0033823486883193254, 0.0047701839357614517, 0.0039847814477980137, 0.0017716089496389031, 0.0027698874473571777, 0.0018699358915910125, 0.001778127858415246, 0.0026833715382963419, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4926, 11787, -22472, 2246, 16412, -16790, -46626, -12230, -6539, 9586, -19929, -15018, 8161, -14296, -4828, -2948, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00011468654702184722, 0.00011994981468888, 0.00014801202632952482, 0.00014901920803822577, 9.6266019681934267e-05, 0.0001038938935380429, 7.2689545049797744e-05, 0.00012229697313159704, 8.0713558418210596e-05, 8.8057182438205928e-05, 0.00017821107758209109, 0.00015686813276261091, 0.00012530882668215781, 8.9920293248724192e-05, 0.00010665607987903059, 8.9451685198582709e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 26,41,21,-35,67,62,-42,55,-11,109,2,42,-33,33,-16,45,34,74,45,-57,-67,72,-5,53,59,41,41,51,-46,-50,-11,79,-24,8,-63,53,46,-127,-34,19,11,-33,58,-9,-10,-56,-56,-19, 
  /* [1][0][][] */ -52,2,-80,-43,13,91,-54,21,-12,-31,-40,31,58,-13,-27,-28,-26,-29,-1,18,-61,41,-98,-42,-55,-37,44,70,-21,-27,42,-39,9,-57,-31,51,10,-55,127,-36,-26,31,-42,-12,36,54,32,16, 
  /* [2][0][][] */ 6,7,57,-39,-16,-79,14,27,96,72,-63,17,113,-52,127,81,-69,-24,-32,31,80,-83,-37,-99,7,-41,38,-69,37,46,-39,12,33,-26,56,39,-62,11,-3,-32,29,24,63,-14,15,-84,95,-54, 
  /* [3][0][][] */ 38,0,-22,-25,30,110,20,-19,47,-46,22,-24,-55,10,8,42,-43,-69,42,-127,-11,3,-26,-19,-37,96,126,61,-11,-41,27,43,59,-35,96,37,-48,-55,-1,44,26,16,-18,1,29,19,-13,-21, 
  /* [4][0][][] */ 97,-10,3,-51,93,88,46,13,67,-19,-103,27,39,-17,17,-20,-105,-120,-28,-96,-19,20,-39,-34,-90,127,-110,125,-57,-56,31,83,37,-49,16,-35,-10,17,-23,25,-55,-9,-6,49,-52,109,-29,-53, 
  /* [5][0][][] */ 3,-1,-54,5,-11,53,15,-24,59,50,41,93,54,-26,29,-4,-42,127,-21,34,7,-4,-70,-18,32,-4,-62,-32,-15,30,22,-18,-38,6,37,15,-42,7,-88,0,86,-23,22,49,-18,7,-41,35, 
  /* [6][0][][] */ 62,19,12,62,11,-23,94,-49,-3,60,127,106,46,39,-52,56,43,-40,-80,92,43,-65,-49,57,-89,83,90,-3,108,54,-25,-7,97,-57,-119,-4,103,33,-4,-4,9,52,59,-37,59,113,39,0, 
  /* [7][0][][] */ -94,-9,-21,30,-57,-57,26,50,82,114,-51,-67,-93,13,-17,-14,-72,97,6,118,-45,39,23,40,-18,-89,-33,-79,31,43,-3,7,-20,7,16,-17,1,-55,127,15,4,46,20,-16,59,66,-27,0, 
  /* [8][0][][] */ -12,-95,49,-58,59,-57,77,-44,-31,-114,27,9,-36,5,31,28,-5,11,-44,97,5,36,-19,30,65,-8,-64,-36,-127,-25,-55,-109,9,-60,4,79,-5,35,110,14,18,0,71,119,-10,-63,-47,76, 
  /* [9][0][][] */ 23,-36,25,-60,42,80,-35,50,17,-35,-35,-15,20,-46,109,-12,8,-115,41,39,-68,37,54,-40,-21,-77,-24,78,56,73,-38,-23,-52,27,-10,127,-28,-43,-55,-24,-28,3,32,106,60,80,-65,18, 
  /* [10][0][][] */ -14,16,-25,-10,20,28,-61,-44,51,40,61,-9,-34,-7,53,-50,-59,127,-1,47,3,-8,21,31,-44,46,1,93,37,5,-36,-7,70,11,-5,25,-9,-45,-36,21,-78,1,29,-11,21,47,31,31, 
  /* [11][0][][] */ -30,40,-16,35,25,51,6,5,21,19,-127,-72,64,22,-2,-41,-6,22,-40,-45,-10,-3,106,7,50,14,-21,27,-7,21,-12,48,27,-5,-44,2,37,76,96,22,35,-24,62,2,-50,-19,78,1, 
  /* [12][0][][] */ -61,-5,36,15,-63,-59,5,-3,-32,-37,-127,11,64,-92,23,35,43,96,78,-115,-36,46,-39,-82,4,-14,32,-34,3,10,-22,69,70,77,32,-30,-50,-32,26,3,-30,16,60,-1,32,-18,-41,-36, 
  /* [13][0][][] */ -52,-113,-46,-105,15,26,54,15,-120,25,123,-58,62,38,127,8,124,26,-7,-91,77,-79,114,-3,-82,3,-25,14,-39,-94,-108,11,47,-33,-77,63,32,-55,75,-76,-9,49,66,37,55,-35,111,-62, 
  /* [14][0][][] */ 62,14,-50,7,-40,13,-78,-24,-25,62,51,42,-14,-57,18,-44,54,-113,28,11,90,-58,26,-6,-8,127,-90,2,-55,-26,-92,3,118,38,90,-19,-84,13,-18,61,-15,-41,101,-24,-49,-42,-54,47, 
  /* [15][0][][] */ -63,13,42,17,99,5,2,35,24,79,-17,58,60,-16,-33,-16,16,39,4,-40,28,-37,-53,-59,52,-69,-42,64,-34,9,18,9,-64,-4,127,-5,-91,19,56,-15,-48,-21,17,-1,-37,-34,-11,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0058719785884022713, 0.0061414591036736965, 0.007578250952064991, 0.0076298192143440247, 0.00492884311825037, 0.0053193923085927963, 0.0037217219360172749, 0.0062616346403956413, 0.004132553469389677, 0.0045085488818585873, 0.0091244494542479515, 0.0080316858366131783, 0.0064158416353166103, 0.0046039405278861523, 0.0054608169011771679, 0.0045799477957189083, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 12867, 35, 16646, 493, 14268, -665, 31661, 585, 7224, 28115, 5060, 23901, 4705, 11710, 38649, 21459, 1318, -163, 3405, 46882, 342, 19801, -824, 15153, 17227, 31962, -3145, 563, -2184, 14034, 20599, 495, -734, 1134, 1133, 14335, 9833, 29528, 5221, 17549, 27287, 1206, 509, 16244, 855, 3958, 36810, 24577, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.4923547799699008e-05, 0.00016943675291258842, 6.2634164351038635e-05, 0.00010846076474990696, 9.6042240329552442e-05, 6.5793130488600582e-05, 6.1701488448306918e-05, 0.00034506636438891292, 7.4768242484424263e-05, 8.4217077528592199e-05, 5.5124648497439921e-05, 8.7490239820908755e-05, 5.6559849326731637e-05, 8.8285771198570728e-05, 4.1428007534705102e-05, 8.6649648437742144e-05, 7.1057474997360259e-05, 7.032405846985057e-05, 0.00015544876805506647, 4.6078017476247624e-05, 6.902479799464345e-05, 5.3337622375693172e-05, 0.00010609032324282452, 0.00011250076931901276, 5.4908763559069484e-05, 8.1841339124366641e-05, 8.5557927377521992e-05, 4.1546485590515658e-05, 0.00026226235786452889, 0.00010133363684872165, 6.7477441916707903e-05, 0.00034678875817917287, 0.00014399764768313617, 0.00017312055570073426, 9.7714335424825549e-05, 6.4657957409508526e-05, 0.00010427262895973399, 6.7835455411113799e-05, 7.4983217928092927e-05, 7.6502692536450922e-05, 5.0847505917772651e-05, 0.0001598963572178036, 0.00036069873021915555, 6.5713560616131872e-05, 0.00014755599841009825, 5.3381580073619261e-05, 5.6951226724777371e-05, 5.6798569858074188e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,57,-127,98,-92,66,-51,88,-72,-71,68,-45,66,-79,-48,-60,73,69,93,-105,78,-116,76,-87,-100,-60,64,127,-97,-39,-69,44,61,-93,63,-97,-84,-119,88,-37,-13,-104,108,-111,100,63,-63,-50, -121,88,-69,108,-75,127,-51,102,-116,-95,101,-72,96,-109,-72,-83,105,102,127,-127,100,-124,99,-127,-117,-90,79,123,27,-65,-89,78,88,-127,91,-111,-98,-127,113,-70,-103,95,127,-117,-41,103,-84,-88, -58,51,6,29,-12,57,-23,39,-44,-41,49,-25,49,-43,-23,-5,43,46,62,-30,35,-60,37,-47,-90,-41,25,21,91,-24,-46,17,31,-83,37,-38,-22,-39,44,-56,-119,-30,36,-56,-67,53,-23,-76, 
  /* [0][1][][] */ -111,77,-61,113,-74,117,-104,108,-99,-95,87,-77,80,-102,-85,-94,95,88,-48,-105,98,-127,96,-65,-113,-85,92,107,-127,-81,-101,87,97,25,91,-119,-102,-127,104,-85,-115,-119,119,-124,127,73,-102,-91, -127,127,-99,127,-127,122,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-54,-119,127,-119,127,-111,-127,-127,127,124,17,-127,-127,127,127,34,127,-127,-127,-123,127,-127,-127,127,120,-127,-64,127,-127,-127, -80,63,-68,35,-51,27,-54,57,-47,-45,61,-51,64,-48,-40,-5,73,59,-45,-20,38,-60,43,-41,-117,-56,49,45,111,-56,-63,39,46,7,57,-47,-34,-28,50,-74,-54,-59,46,-52,-93,62,-29,-87, 
  /* [0][2][][] */ -34,34,3,46,-39,46,-42,36,-40,-35,24,-44,40,-48,-41,-38,47,38,-76,-23,21,-43,43,-23,-63,-41,41,-4,-70,-57,-42,33,37,41,50,-56,-38,-56,28,-47,-105,-52,48,-93,75,32,-65,-39, -66,54,-73,58,-70,28,-52,57,-50,-44,42,-69,59,-59,-57,-40,65,55,-95,-21,25,-41,50,-38,-69,-56,53,31,9,-83,-60,44,39,59,63,-60,-52,-52,30,-66,-61,69,54,-101,-35,56,-67,-67, -27,28,-61,6,-30,-12,-21,37,-6,-7,26,-26,32,-18,-20,17,34,23,-70,13,14,-5,19,-8,-39,-22,27,12,65,-32,-19,-5,11,32,25,-9,-3,-7,14,-33,13,-16,9,-28,-47,28,-12,-55, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031842507887631655, 0.007201062049716711, 0.0026619520504027605, 0.0046095824800431728, 0.0040817949920892715, 0.0027962080202996731, 0.0026223133318126202, 0.014665320515632629, 0.0031776502728462219, 0.0035792258568108082, 0.0023427975829690695, 0.0037183351814746857, 0.0024037936236709356, 0.003752145217731595, 0.0017606902401894331, 0.0036826098803430796, 0.003019942669197917, 0.0029887724667787552, 0.0066065727733075619, 0.0019583157263696194, 0.0029335538856685162, 0.0022668489255011082, 0.0045088385231792927, 0.0047812825068831444, 0.0023336224257946014, 0.0034782567527145147, 0.0036362118553370237, 0.0017657255521044135, 0.011146150529384613, 0.0043066795915365219, 0.002867791336029768, 0.014738522469997406, 0.0061198999173939228, 0.007357623428106308, 0.0041528590954840183, 0.0027479631826281548, 0.0044315867125988007, 0.0028830068185925484, 0.0031867865473031998, 0.0032513642217963934, 0.0021610190160572529, 0.006795594934374094, 0.015329696238040924, 0.0027928261552006006, 0.0062711299397051334, 0.0022687171585857868, 0.0024204270448535681, 0.002413939218968153, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2355, -1285, 1159, -1838, 4967, -902, 3546, -4207, 1424, 640, 2899, 4702, 452, -415, 562, 6382, -2147, 3507, 5833, 926, -833, 3267, -861, 4889, 3389, 1935, 1366, -1100, 8918, -425, 3366, -2496, -986, 4593, -969, 2103, 2170, 1208, 351, 4707, 2191, 9300, -5389, 1630, 8407, 148, 2488, 2650, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00018872840155381709, 0.00027397222584113479, 0.00021011420176364481, 0.00025397224817425013, 0.00015785056166350842, 0.00017004896653816104, 0.0002105726016452536, 0.00013454363215714693, 0.00023097341181710362, 0.00026305197388865054, 0.00014221065794117749, 0.00015746784629300237, 0.00032514982740394771, 0.00025424774503335357, 0.00025738711701706052, 0.00012425272143445909, 0.00021377482335083187, 0.00022217961668502539, 0.00015548340161330998, 0.00028088552062399685, 0.00025843607727438211, 0.00016754036187194288, 0.00017118229879997671, 0.00017009832663461566, 0.00014062729314900935, 0.00021590909454971552, 0.00023646785120945424, 0.000229916229727678, 0.00010492747242096812, 0.00021352194016799331, 0.00013052108988631517, 0.0001508105342509225, 0.00014006561832502484, 0.00016429716197308153, 0.00022646030993200839, 0.00025693708448670805, 0.00021169600950088352, 0.00020124786533415318, 0.00019004415662493557, 0.00016673434583935887, 0.00024150572426151484, 9.1990594228263944e-05, 9.9513097666203976e-05, 0.00026420695940032601, 9.7353768069297075e-05, 0.00021013666992075741, 0.00022144561808090657, 0.00022413772239815444, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 73,31,127,-36,62,109,-77,-57, 
  /* [1][0][][] */ 9,-89,-127,1,52,27,33,-1, 
  /* [2][0][][] */ -127,-2,-46,-24,53,29,-75,-39, 
  /* [3][0][][] */ 37,66,127,-77,-10,-106,-3,-18, 
  /* [4][0][][] */ -127,22,-49,-28,42,13,-41,-56, 
  /* [5][0][][] */ -103,24,-52,-8,9,40,-86,-127, 
  /* [6][0][][] */ -34,-127,-108,35,90,18,7,40, 
  /* [7][0][][] */ -64,-127,-99,-78,-73,-67,18,92, 
  /* [8][0][][] */ 87,28,-13,-4,90,-82,-127,8, 
  /* [9][0][][] */ -39,49,-49,91,-63,-37,127,-35, 
  /* [10][0][][] */ -20,127,32,62,126,-25,-7,56, 
  /* [11][0][][] */ -84,-38,-19,-12,-87,112,127,-9, 
  /* [12][0][][] */ 64,35,-127,40,-10,-33,-62,-13, 
  /* [13][0][][] */ 60,-27,-70,9,9,-127,-27,-19, 
  /* [14][0][][] */ 5,-81,83,4,127,-112,-63,16, 
  /* [15][0][][] */ -42,-45,2,127,59,91,-84,25, 
  /* [16][0][][] */ 120,32,-41,15,79,-114,-127,-28, 
  /* [17][0][][] */ 58,127,51,75,44,61,26,-86, 
  /* [18][0][][] */ 30,-11,1,0,127,0,29,-14, 
  /* [19][0][][] */ 12,127,39,16,-127,22,29,-38, 
  /* [20][0][][] */ -43,22,59,-127,17,31,-15,107, 
  /* [21][0][][] */ -37,80,39,-127,30,47,-17,123, 
  /* [22][0][][] */ -64,-70,-90,13,-127,115,105,-29, 
  /* [23][0][][] */ 99,29,-127,12,9,-45,-62,-23, 
  /* [24][0][][] */ -50,43,5,7,-20,82,-127,108, 
  /* [25][0][][] */ -99,-53,-127,12,-55,-71,65,95, 
  /* [26][0][][] */ 45,-12,-40,-32,108,-13,127,-43, 
  /* [27][0][][] */ 127,-71,29,96,1,35,-23,98, 
  /* [28][0][][] */ 41,55,52,-8,127,-47,45,-28, 
  /* [29][0][][] */ -12,-17,-23,-46,-74,20,127,-36, 
  /* [30][0][][] */ 51,-127,-62,-78,-112,-2,6,-51, 
  /* [31][0][][] */ 11,23,-7,-13,-127,8,-24,-12, 
  /* [32][0][][] */ 48,-62,-60,77,-12,-86,110,-127, 
  /* [33][0][][] */ 55,127,41,35,54,-21,-25,-24, 
  /* [34][0][][] */ -120,-31,127,-9,-26,97,97,12, 
  /* [35][0][][] */ -31,73,127,-14,-65,-68,-37,25, 
  /* [36][0][][] */ -99,8,102,-19,-21,127,78,27, 
  /* [37][0][][] */ -15,-79,-11,-127,-39,-81,66,47, 
  /* [38][0][][] */ 45,-14,91,-59,50,61,-127,7, 
  /* [39][0][][] */ -16,85,-127,-44,-18,7,7,83, 
  /* [40][0][][] */ 67,-52,17,32,8,4,5,127, 
  /* [41][0][][] */ -22,80,127,0,6,75,-66,24, 
  /* [42][0][][] */ 67,-127,-109,-24,-117,2,15,-100, 
  /* [43][0][][] */ -8,-88,30,-70,127,-41,18,36, 
  /* [44][0][][] */ -2,125,127,24,8,63,-72,1, 
  /* [45][0][][] */ -34,42,13,86,-112,62,-127,21, 
  /* [46][0][][] */ -47,-43,71,45,-127,-121,-30,0, 
  /* [47][0][][] */ -17,62,42,-103,-127,34,-20,67, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025346120819449425, 0.0036794319748878479, 0.0028218221850693226, 0.0034108331892639399, 0.0021199244074523449, 0.0022837482392787933, 0.0028279784601181746, 0.0018069136422127485, 0.0031019602902233601, 0.0035327733494341373, 0.0019098813645541668, 0.0021147844381630421, 0.0043667443096637726, 0.0034145333338528872, 0.0034566947724670172, 0.0016687071183696389, 0.0028709841426461935, 0.0029838599730283022, 0.0020881334785372019, 0.0037722769193351269, 0.0034707824233919382, 0.0022500578779727221, 0.0022989688441157341, 0.0022844111081212759, 0.0018886167090386152, 0.0028996472246944904, 0.0031757501419633627, 0.0030877622775733471, 0.0014091702178120613, 0.0028675878420472145, 0.0017528909957036376, 0.0020253772381693125, 0.001881073578260839, 0.0022065017838031054, 0.0030413495842367411, 0.00345065095461905, 0.0028430656529963017, 0.0027027477044612169, 0.0025522825308144093, 0.0022392331156879663, 0.0032434086315333843, 0.0012354286154732108, 0.0013364554615691304, 0.0035482849925756454, 0.00130745570641011, 0.002822123933583498, 0.0029740023892372847, 0.0030101572629064322, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2330, 691, 23350, -4325, 4438, -14262, 3227, -14412, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.4288022005930543e-05, 9.3611299234908074e-05, 0.00013232740457169712, 9.9517819762695581e-05, 0.00015191547572612762, 0.00012172610877314582, 7.0560730819124728e-05, 9.1550624347291887e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-45,-25,-68,-3,-15,83,81,-96,-89,-41,2,-55,-6,-58,33,-83,10,18,127,58,-26,14,94,73,71,21,5,-95,-61,-84,-58,-50,95,32,-45,25,-35,98,-2,30,4,-5,-109,34,-28,-29,-80, 
  /* [1][0][][] */ -16,56,-24,-29,-75,56,-23,-50,-29,68,-22,14,57,40,-52,-3,-23,-117,76,-54,127,7,-63,24,62,-5,-84,66,35,-14,69,30,-26,-21,-3,-9,-2,106,-11,-22,68,39,-9,10,99,19,-26,62, 
  /* [2][0][][] */ -25,-35,116,5,89,-45,-10,26,-30,2,-14,49,7,-43,-45,-127,-57,-101,-27,16,-101,25,-43,-37,-47,14,-5,-46,-38,7,-33,-11,-4,-4,24,-3,26,-32,-49,9,39,-29,29,-49,-43,-42,-65,-53, 
  /* [3][0][][] */ 50,12,65,9,21,-37,33,69,-51,-26,43,-29,-63,58,-19,55,66,34,-39,28,-113,-69,127,2,7,3,-61,-36,-55,68,119,-64,7,-115,-25,44,-13,-80,-12,71,-75,-63,68,-1,-100,-74,58,-6, 
  /* [4][0][][] */ 21,-16,70,-27,6,-7,-6,-5,-57,-8,-24,5,45,-75,40,-96,43,48,-7,-37,14,35,20,7,3,5,61,-12,27,22,-127,-13,-25,-20,7,18,51,-3,38,3,-36,-10,-70,31,-19,-96,3,23, 
  /* [5][0][][] */ 25,-51,64,28,35,17,27,4,-77,-5,-45,31,34,10,12,-41,92,74,-6,-13,84,-61,127,-85,-14,45,3,44,13,14,-27,-46,-19,-43,-38,12,41,30,63,3,-79,30,36,29,51,-20,74,-2, 
  /* [6][0][][] */ -46,47,-127,83,49,20,40,15,-27,-10,57,-74,-99,-13,-23,24,-115,24,-13,92,17,41,-87,-87,-11,-18,28,69,-34,-40,-46,14,37,68,-44,-30,-13,-12,75,4,67,61,-113,-55,-37,108,-58,-40, 
  /* [7][0][][] */ 37,77,-84,22,15,63,117,74,44,79,-96,0,-47,-1,-70,-45,30,38,119,100,85,8,127,21,102,97,-44,100,-66,26,-1,-74,20,-63,-22,24,4,94,-60,79,-59,54,-7,-79,77,-16,53,-39, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.003157240804284811, 0.0039784801192581654, 0.0056239143013954163, 0.0042295074090361595, 0.006456407718360424, 0.0051733595319092274, 0.002998830983415246, 0.0038909015711396933, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 429, 10437, -659, 262, 283, -637, 3258, -967, -3692, 220, -6225, -28, 1079, -661, -2667, 3654, 7102, 3921, -351, -4270, -6972, -970, 19414, -5288, -1336, -452, 4758, -6559, -1378, 371, -7627, 7793, 3308, 360, 2949, 211, -1, -453, 9501, 1490, 6210, -2905, 2588, 5847, -1834, 9038, 1581, -295, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00037240359233692288, 0.00015468643687199801, 0.00084286037599667907, 0.000234755061683245, 0.000326421984937042, 0.0005824281251989305, 0.0002178799913963303, 0.00033872356289066374, 9.2600203061010689e-05, 0.00049322511767968535, 0.00020848747226409614, 0.0026644933968782425, 0.00046160977217368782, 0.00096026470419019461, 0.00045643857447430491, 0.00069378397893160582, 0.00017529065371491015, 6.3369858253281564e-05, 0.00038051707088015974, 0.00035589639446698129, 0.00024434883380308747, 0.00029156560776755214, 7.8728851804044098e-05, 0.00043989613186568022, 0.00020238223078195006, 0.00043166844989173114, 0.00051704532233998179, 0.00024248157569672912, 0.00026136156520806253, 0.00049406755715608597, 0.00015305979468394071, 0.00011709784303093329, 0.00020557719108182937, 0.00020248118380550295, 0.00015170864935498685, 0.00056395470164716244, 0.004191255196928978, 0.00043892103713005781, 0.00013632523769047111, 0.00019364444597158581, 0.00019136957416776568, 0.00014965551963541657, 0.00034975900780409575, 0.00021047404152341187, 0.00033007579622790217, 9.7719261248130351e-05, 6.3795159803703427e-05, 0.00021557301806751639, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-36,9,3,-18,-99,-49,44,-39,-8,-3,7,42,-4,-11,8,99,10,29,2,2,-18,-66,24,1,-17,-5,-28,-57,72,-19,-112,60,-9,-47,-57,-8,-27,11,-22,-14,37,13,3,-8,59,127,-18, -127,-87,-23,127,-65,64,-106,127,29,15,16,-4,49,21,1,-39,-32,61,31,8,8,127,16,127,127,-32,-48,36,68,-126,-13,-65,80,-8,-34,-124,24,13,-57,-59,-127,-4,-91,-127,38,53,48,119, -13,-2,11,5,-26,37,35,42,7,-35,-1,3,-23,-1,-1,9,-63,33,-64,-28,-8,-23,127,27,-47,1,10,1,19,40,7,17,3,-16,-28,75,6,-1,16,73,26,-17,34,-38,-3,34,-27,-15, 
  /* [0][1][][] */ -17,-24,-28,-4,31,-100,126,-78,-12,8,22,36,127,16,3,-30,-27,-34,28,47,65,-59,42,15,-63,127,-78,-22,127,-100,44,-127,-39,2,-75,12,13,-55,-40,0,117,127,11,-124,-58,-60,-8,93, 95,-127,127,-3,127,65,-79,-44,36,127,127,-127,-101,127,127,127,127,127,127,127,127,120,6,2,117,-100,-127,120,41,127,127,2,-127,127,127,127,-127,127,-127,-127,36,36,-127,-35,127,-127,-13,89, 21,27,-40,-9,-51,127,-127,79,110,-76,13,62,-41,9,13,-65,15,7,-121,17,21,-104,-35,0,84,-15,-18,127,-67,-38,27,-29,-23,17,99,-24,37,-6,1,-94,108,5,39,45,-50,90,88,-79, 
  /* [0][2][][] */ -10,25,6,-36,2,-57,-22,-10,3,-2,0,2,-21,-15,1,0,-56,9,12,-34,2,-17,80,-10,-121,4,43,-24,16,-3,2,40,-5,-11,-61,26,2,-8,22,41,-31,3,11,7,-13,13,-18,14, 36,-20,-35,-40,29,37,116,-93,127,-33,-4,5,-79,-23,-18,-70,-23,96,11,27,12,33,-24,-35,-92,58,82,-6,-87,13,-31,-7,-18,-1,-31,-3,55,-20,4,111,-123,-1,-9,62,37,50,4,-127, -10,24,4,-24,-14,-1,-11,-56,-29,-23,-11,5,15,-14,-10,13,43,35,-22,-16,-4,-18,-50,-13,23,-26,31,-10,-12,1,-10,22,37,-16,-19,-58,-7,3,34,6,-14,-11,12,12,-11,12,55,-48, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015827152878046036, 0.0065741734579205513, 0.035821564495563507, 0.0099770901724696159, 0.013872933574020863, 0.02475319430232048, 0.0092598991468548775, 0.014395751059055328, 0.0039355084300041199, 0.020962066948413849, 0.0088607175275683403, 0.11324096471071243, 0.019618414342403412, 0.040811248123645782, 0.019398638978600502, 0.02948581799864769, 0.0074498527683317661, 0.0026932188775390387, 0.016171975061297417, 0.015125596895813942, 0.010384825058281422, 0.012391538359224796, 0.0033459761179983616, 0.018695585429668427, 0.0086012445390224457, 0.01834590919315815, 0.021974425762891769, 0.010305467061698437, 0.01110786572098732, 0.020997870713472366, 0.0065050413832068443, 0.0049766581505537033, 0.0087370304390788078, 0.0086054503917694092, 0.0064476174302399158, 0.023968074470758438, 0.17812834680080414, 0.018654143437743187, 0.0057938224636018276, 0.0082298889756202698, 0.0081332065165042877, 0.0063603594899177551, 0.014864757657051086, 0.0089451465755701065, 0.014028221368789673, 0.0041530686430633068, 0.0027112942188978195, 0.0091618532314896584, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2694, 4595, 17885, 1650, 2682, -1951, 5673, 19299, 3618, -760, 3514, -2558, 18914, -1757, 2114, 22448, -511, 2222, 111, 3458, 3318, 3272, 588, 34551, 6234, 4353, 16492, 1675, 6828, 7008, 603, 1153, 905, 1987, -368, 339, -3072, -428, 2520, 2382, 4515, 2192, 4062, 5613, 5278, 4223, 1880, 6495, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022678925597574562, 0.00017343559011351317, 5.5876684200484306e-05, 0.0001913842570502311, 0.00019134744070470333, 0.00022090946731623262, 0.00013777954154647887, 5.1037735829595476e-05, 0.00015358389646280557, 0.00025337748229503632, 0.00022758675913792104, 0.00018382386770099401, 5.0262788136024028e-05, 0.00023974959913175553, 0.00021047759219072759, 4.7852503485046327e-05, 0.00025108354748226702, 0.00018265750259160995, 0.00027070392388850451, 0.00017277387087233365, 0.00021330136223696172, 0.00022046233061701059, 0.00030146990320645273, 3.2182379072764888e-05, 0.00013224102440290153, 0.00013249707990325987, 6.3052219047676772e-05, 0.00024891376961022615, 0.00011189867655048147, 0.00011163103044964373, 0.00046902627218514681, 0.00034733596839942038, 0.00019205336866434664, 0.00018030256615020335, 0.00026500463718548417, 0.00026148170582018793, 0.00018714068573899567, 0.00031323940493166447, 0.00022248574532568455, 0.00022713704674970359, 0.00017472945910412818, 0.00022770196665078402, 0.00020439937361516058, 0.00014788692351430655, 0.00013493110600393265, 0.00017253919213544577, 0.00033165019704028964, 0.00012269537546671927, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 66,127,-77,-90,13,92,22,73, 
  /* [1][0][][] */ 57,-71,46,-127,-55,75,-88,-38, 
  /* [2][0][][] */ -33,127,116,48,106,7,51,8, 
  /* [3][0][][] */ 95,47,-84,64,-6,-101,-127,-30, 
  /* [4][0][][] */ -46,41,11,-77,-49,117,127,56, 
  /* [5][0][][] */ 17,81,-127,-79,49,96,30,-26, 
  /* [6][0][][] */ -8,127,59,53,76,9,21,-85, 
  /* [7][0][][] */ 127,-21,-33,28,26,-1,99,13, 
  /* [8][0][][] */ 58,127,68,89,120,82,100,-80, 
  /* [9][0][][] */ 50,107,-127,-86,16,89,7,60, 
  /* [10][0][][] */ -70,-45,26,-55,-5,-29,-50,127, 
  /* [11][0][][] */ 17,-105,-127,-15,23,-15,35,-7, 
  /* [12][0][][] */ -23,-104,-113,-37,-127,37,-60,43, 
  /* [13][0][][] */ -7,11,-100,104,-127,-25,1,-19, 
  /* [14][0][][] */ -65,-44,-127,-12,37,-3,-13,-59, 
  /* [15][0][][] */ 25,-100,-127,17,-97,-30,-34,-17, 
  /* [16][0][][] */ 127,-64,-15,69,-82,27,29,102, 
  /* [17][0][][] */ -30,115,127,-32,-56,-10,-27,-21, 
  /* [18][0][][] */ 7,-127,41,71,0,-64,55,-82, 
  /* [19][0][][] */ 127,-49,-64,34,-105,8,45,102, 
  /* [20][0][][] */ -27,-127,79,77,-13,-91,-2,-74, 
  /* [21][0][][] */ -4,-48,-14,-33,127,-7,42,19, 
  /* [22][0][][] */ -127,27,-75,49,46,55,-96,-110, 
  /* [23][0][][] */ -90,-54,59,2,-103,127,122,-54, 
  /* [24][0][][] */ -37,62,-9,-44,-48,127,117,-2, 
  /* [25][0][][] */ -44,-100,-127,-60,-49,-18,-26,-47, 
  /* [26][0][][] */ -17,64,-15,127,-101,42,-55,0, 
  /* [27][0][][] */ 17,-127,29,73,13,-53,4,-120, 
  /* [28][0][][] */ 13,127,69,50,116,-16,31,-72, 
  /* [29][0][][] */ 102,35,-34,-4,86,-127,-108,40, 
  /* [30][0][][] */ 26,-6,31,-127,20,-26,15,-22, 
  /* [31][0][][] */ 46,-39,6,62,-13,32,10,127, 
  /* [32][0][][] */ -92,-69,18,-56,-58,127,71,91, 
  /* [33][0][][] */ -34,44,44,-42,36,127,-111,78, 
  /* [34][0][][] */ 26,127,-72,-52,13,53,-66,65, 
  /* [35][0][][] */ 8,-127,35,52,-22,-58,42,-82, 
  /* [36][0][][] */ -16,-34,-79,-6,-127,-58,-15,10, 
  /* [37][0][][] */ -45,-127,63,80,-41,-92,-6,-51, 
  /* [38][0][][] */ -77,29,73,-69,-127,-95,-64,94, 
  /* [39][0][][] */ 75,-127,91,47,-3,-75,-8,-83, 
  /* [40][0][][] */ 1,57,18,49,-127,-12,-55,16, 
  /* [41][0][][] */ 113,127,-86,-113,59,18,-8,10, 
  /* [42][0][][] */ -8,-38,-16,12,127,10,46,19, 
  /* [43][0][][] */ 127,24,76,22,-67,-28,62,102, 
  /* [44][0][][] */ 67,46,-22,19,64,-107,-127,17, 
  /* [45][0][][] */ 49,9,15,15,78,-127,1,-51, 
  /* [46][0][][] */ 57,-39,-6,127,37,60,22,75, 
  /* [47][0][][] */ -87,-85,44,70,-58,23,127,-78, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0035700385924428701, 0.0027301635127514601, 0.00087959162192419171, 0.0030127053614705801, 0.0030121258459985256, 0.00347748096100986, 0.0021688782144337893, 0.00080341851571574807, 0.0024176649749279022, 0.0039885812439024448, 0.0035825925879180431, 0.0028936923481523991, 0.00079121958697214723, 0.0037740559782832861, 0.0033132659737020731, 0.00075327767990529537, 0.0039524710737168789, 0.0028753317892551422, 0.0042613283731043339, 0.0027197469025850296, 0.0033577168360352516, 0.0034704424906522036, 0.0047456356696784496, 0.0005066039739176631, 0.0020816929172724485, 0.0020857236813753843, 0.00099254644010215998, 0.0039183152839541435, 0.001761470572091639, 0.0017572573851794004, 0.0073832506313920021, 0.0054676434956490993, 0.0030232381541281939, 0.0028382611926645041, 0.0041716122068464756, 0.004116155207157135, 0.0029459043871611357, 0.0049309073947370052, 0.0035022941883653402, 0.0035755133721977472, 0.0027505313046276569, 0.0035844063386321068, 0.0032175849191844463, 0.0023279851302504539, 0.0021240392234176397, 0.0027160528115928173, 0.0052207238040864468, 0.0019314285600557923, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7914, 16029, -4694, 7367, -493, 3789, -11856, -18452, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023192065418697894, 0.00011492424528114498, 0.00014079458196647465, 0.00015199334302451462, 0.00017600913997739553, 0.00014664979244116694, 0.00024301129451487213, 0.0001305510668316856, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-4,33,10,-33,-17,9,8,-42,-9,-63,-56,-27,-63,-11,-29,44,-39,36,43,-17,32,-37,11,3,-40,52,-14,-5,-20,16,13,81,34,36,-127,16,-3,-17,-33,2,-18,40,46,33,6,26,2, 
  /* [1][0][][] */ 0,35,62,-27,-10,41,-53,-34,5,27,-19,-89,14,86,-14,60,-18,18,-22,-53,7,-82,-29,21,-75,-14,-3,-118,-24,-16,35,-56,45,76,-43,7,127,-30,3,47,-29,37,-83,-29,117,-17,-32,-24, 
  /* [2][0][][] */ -1,-24,-61,12,-4,46,23,4,-9,40,-3,23,64,-88,18,-59,37,-86,24,34,-22,48,-6,26,-15,60,-21,-67,17,6,16,-69,-43,-82,31,-27,103,23,-10,-59,1,27,77,29,127,17,21,26, 
  /* [3][0][][] */ -7,25,-70,43,13,-38,-72,-107,14,-24,-40,2,2,24,31,79,-6,15,-39,28,2,-103,27,-58,-77,-8,127,-13,-44,0,-67,17,-3,-83,9,-12,-24,-41,-21,105,-43,-38,-4,21,40,7,-41,46, 
  /* [4][0][][] */ -25,-47,-6,7,29,-29,-12,-7,27,-31,59,-79,5,29,9,8,-16,-22,13,-15,-2,-52,5,-21,17,-9,41,48,32,22,-15,28,-9,-2,1,-1,-69,81,34,-24,29,-21,-20,-23,-78,13,127,10, 
  /* [5][0][][] */ 49,-18,4,14,26,-40,37,-127,25,-26,-10,119,-79,69,24,-71,0,-87,9,0,-37,70,-35,-47,-60,80,-27,5,-24,51,-42,-35,29,56,36,-5,-39,-8,-50,-37,15,-38,-47,-10,-34,53,89,18, 
  /* [6][0][][] */ 52,-19,23,-9,-38,-17,-34,21,-41,6,-41,127,-44,-37,-6,54,10,48,13,33,35,-79,-22,20,21,38,-66,8,6,-42,15,39,4,16,-16,-3,11,0,-4,-3,-10,-15,38,55,-5,-38,70,-14, 
  /* [7][0][][] */ -27,3,-6,64,33,31,4,31,22,7,75,-6,127,113,66,52,46,47,-14,1,26,-21,-85,-27,17,-3,-27,65,35,-25,-34,-20,41,7,46,-99,-73,38,37,55,-34,37,87,127,-59,-28,-108,60, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0098566273227334023, 0.004884280264377594, 0.0059837698936462402, 0.0064597171731293201, 0.0074803885072469711, 0.0062326160259544849, 0.010327979922294617, 0.005548420362174511, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11972, 3458, 3333, -659, 684, -1739, -1017, 33088, -620, 1405, 9722, 61825, 3241, 7586, -66, 11906, -2104, 13530, 1175, 6473, 10413, 171, 2362, -10182, 8649, 1072, 6238, 11834, -1773, -332, -10224, 9688, 3360, 29, -1086, 6577, -8299, 20827, -1823, 18323, -418, -1577, 7912, 3359, 1572, -420, 2516, -233, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.4654661400709301e-05, 0.00010245624434901401, 0.0001637749228393659, 0.0001998041698243469, 0.00074371276423335075, 0.00016804954793769866, 0.00021790499158669263, 9.8482370958663523e-05, 0.00014851760352030396, 9.432531805941835e-05, 5.7157249102601781e-05, 4.9956761358771473e-05, 7.7334167144726962e-05, 5.6221040722448379e-05, 0.00025470819673500955, 0.00014327907410915941, 0.00012771371984854341, 0.00032337682205252349, 0.00013484715600498021, 0.00013387901708483696, 0.00011028775770682842, 0.00046308629680424929, 0.0001299727737205103, 0.00028424646006897092, 0.00015389257168862969, 0.00012407959729898721, 4.6447195927612484e-05, 8.4857492765877396e-05, 0.00020097928063478321, 0.00090903823729604483, 0.00027677006437443197, 7.6698423072230071e-05, 9.7117801487911493e-05, 0.00013665287406183779, 0.00018492748495191336, 5.976095053483732e-05, 7.8671750088687986e-05, 3.1494575523538515e-05, 0.00016079080523923039, 6.7833978391718119e-05, 0.00014675778220407665, 0.00017460266826674342, 6.1860831920057535e-05, 8.4196297393646091e-05, 7.5457450293470174e-05, 0.0004703367012552917, 6.6381566284690052e-05, 0.00027413119096308947, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -54,-101,-20,-22,127,-52,73,-67,-89,-80,-15,-43,118,40,70,-124,64,-26,5,-43,-73,109,2,16,-18,88,61,-37,92,-74,16,-43,-98,-84,50,73,23,82,119,-74,-126,-13,38,66,46,-127,90,75, -71,-127,-75,48,-79,105,63,-77,-68,44,86,-111,127,89,117,-77,-74,-86,32,-51,-64,90,-58,117,-85,116,87,-126,108,-53,11,-120,-41,-84,82,127,112,112,127,-67,-127,-64,70,89,78,109,88,67, -3,-56,-68,94,-42,-25,32,-10,85,23,64,-88,20,57,-34,1,-75,-20,30,-43,-23,11,-66,5,-71,53,24,-89,45,55,126,-66,20,14,-8,47,72,68,50,-5,-22,93,69,31,37,26,14,-123, 
  /* [0][1][][] */ -118,-85,-21,-71,-79,-68,99,-121,-127,-127,84,-71,93,49,-127,-83,127,-127,-63,-83,-91,122,-43,10,-17,94,100,-49,-104,-82,1,-53,-98,-127,-127,66,43,91,7,-98,56,-12,79,113,81,109,125,-127, -127,-124,-127,-101,-27,127,127,-127,90,68,127,-127,108,127,68,-127,59,-95,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-9,-127,-127,-103,55,118,127,127,-10,-127,93,-90,127,127,127,-2,127,117, -51,-58,-120,127,71,-41,50,-28,66,29,20,-68,17,66,79,-54,-14,1,-18,-78,-51,19,-73,-10,-117,50,33,-85,-47,37,127,-79,-59,11,67,71,81,69,-23,-38,37,127,82,23,54,-50,17,20, 
  /* [0][2][][] */ -118,-24,14,24,-46,-22,25,-49,33,-48,17,-48,10,21,-42,-20,-81,-21,87,-37,-8,49,-56,-13,-4,69,77,-19,44,54,-7,-7,1,-80,-39,39,17,2,-54,-39,17,-2,35,37,30,56,10,-71, -97,-32,-33,-64,84,45,61,-59,102,24,-38,-74,5,42,-123,-84,37,9,42,-64,-39,42,-55,58,-64,73,80,-43,47,3,-24,-38,-61,-20,-62,58,33,9,-98,-66,18,-37,76,69,45,-107,18,6, -35,-30,-49,-14,-27,-9,23,-19,-62,15,-12,-26,-3,14,40,-33,34,36,-4,-52,-31,3,-18,-21,-61,15,26,-27,16,-66,59,-26,-76,19,27,49,20,12,-48,-29,-4,52,25,24,22,-6,1,40, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0027478230185806751, 0.0043543903157114983, 0.0069604343734681606, 0.0084916772320866585, 0.031607791781425476, 0.0071421056054532528, 0.0092609617859125137, 0.0041855005547404289, 0.0063119977712631226, 0.0040088258683681488, 0.0024291831068694592, 0.0021231623832136393, 0.0032867020927369595, 0.0023893942125141621, 0.010825098492205143, 0.0060893604531884193, 0.0054278331808745861, 0.013743515126407146, 0.0057310042902827263, 0.0056898579932749271, 0.0046872296370565891, 0.019681166857481003, 0.0055238427594304085, 0.012080473825335503, 0.0065404339693486691, 0.0052733826451003551, 0.0019740057177841663, 0.0036064432933926582, 0.0085416194051504135, 0.038634125143289566, 0.011762727051973343, 0.0032596830278635025, 0.0041275066323578358, 0.0058077471330761909, 0.0078594181686639786, 0.0025398402940481901, 0.0033435493241995573, 0.0013385193888098001, 0.0068336091935634613, 0.0028829439543187618, 0.00623720558360219, 0.0074206134304404259, 0.002629085211083293, 0.0035783424973487854, 0.003206941531971097, 0.019989309832453728, 0.0028212165925651789, 0.011650575324892998, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1352, -561, -643, 1419, 14594, 2256, -613, 4736, 1724, 1456, 310, 3719, 1256, 545, -1109, 491, 4531, 14564, 4410, -881, 1201, -1641, -99, 2516, -306, -693, 2251, -22, 4383, 21016, 2478, -35, 511, -186, 3943, -26, 419, -187, 1221, 1507, 2334, 2460, 259, -381, 861, 3170, 1644, -211, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00036058481782674789, 0.00034486048389226198, 0.00022797273413743824, 0.00026380713097751141, 6.6443586547393352e-05, 0.00027436439995653927, 0.00039859313983470201, 0.00018397122039459646, 0.0002610954106785357, 0.00045844551641494036, 0.00027659055194817483, 0.00024859697441570461, 0.00019620879902504385, 0.00032753599225543439, 0.00025827006902545691, 0.00025152694433927536, 0.00016396417049691081, 6.3792998844292015e-05, 0.0001793975243344903, 0.00029910227749496698, 0.00035366223892197013, 0.00015192922728601843, 0.00038596155354753137, 0.00030372841865755618, 0.00042273581493645906, 0.00077248876914381981, 0.00024091821978799999, 0.00094766489928588271, 0.00018763449043035507, 4.6575376472901553e-05, 0.00029903830727562308, 0.00068081641802564263, 0.00034445957862772048, 0.00032848661066964269, 0.00019229893223382533, 0.00030005356529727578, 0.00045481551205739379, 0.00062495458405464888, 0.0003452333330642432, 0.00040018709842115641, 0.00023830143618397415, 0.00026899541262537241, 0.0002886815054807812, 0.00038388743996620178, 0.00035048631252720952, 0.00016013729327823967, 0.00021060598373878747, 0.00025987607659772038, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -41,26,2,-12,-85,-32,-127,36, 
  /* [1][0][][] */ 83,-77,-58,-57,127,-92,100,26, 
  /* [2][0][][] */ -110,123,-55,-127,52,-17,-29,49, 
  /* [3][0][][] */ 57,17,89,12,91,119,127,-16, 
  /* [4][0][][] */ -69,-127,68,8,-52,-110,3,-35, 
  /* [5][0][][] */ 127,-29,68,67,-76,-9,2,-24, 
  /* [6][0][][] */ 28,33,127,-25,42,-36,-39,26, 
  /* [7][0][][] */ 31,11,-127,-35,-37,104,96,-73, 
  /* [8][0][][] */ 3,127,-30,13,67,100,45,54, 
  /* [9][0][][] */ -3,127,-63,97,11,-121,38,122, 
  /* [10][0][][] */ -1,-127,-4,-28,-81,-125,-55,-81, 
  /* [11][0][][] */ -127,-79,99,46,-8,-63,98,65, 
  /* [12][0][][] */ -31,36,-127,75,31,-54,-66,93, 
  /* [13][0][][] */ 89,-127,86,77,8,32,35,-57, 
  /* [14][0][][] */ -29,90,-37,-127,-24,-109,-23,-59, 
  /* [15][0][][] */ 38,112,33,-13,33,-69,96,-127, 
  /* [16][0][][] */ -113,-127,-55,95,-53,24,-16,77, 
  /* [17][0][][] */ -30,-117,-127,90,-66,74,-51,74, 
  /* [18][0][][] */ -92,-74,-48,82,-2,65,-5,127, 
  /* [19][0][][] */ 60,-124,95,-127,11,-65,30,-29, 
  /* [20][0][][] */ -4,66,30,16,37,127,74,-8, 
  /* [21][0][][] */ 28,110,46,-32,37,-67,92,-127, 
  /* [22][0][][] */ 26,14,107,18,-8,127,30,-37, 
  /* [23][0][][] */ -101,-63,35,-73,92,95,-61,-127, 
  /* [24][0][][] */ -100,-96,36,-86,113,116,-47,-127, 
  /* [25][0][][] */ 127,8,-58,-12,12,29,-62,-10, 
  /* [26][0][][] */ -125,-35,-127,-23,-50,-26,20,2, 
  /* [27][0][][] */ 82,37,-4,-62,-127,-21,91,95, 
  /* [28][0][][] */ -127,-87,6,52,-70,-99,4,8, 
  /* [29][0][][] */ 118,107,43,-127,28,17,-70,-92, 
  /* [30][0][][] */ -91,-68,43,-71,77,89,-55,-127, 
  /* [31][0][][] */ 48,46,-8,127,7,-72,7,13, 
  /* [32][0][][] */ -30,127,-7,35,23,67,-17,50, 
  /* [33][0][][] */ -38,127,-79,29,20,-29,-28,4, 
  /* [34][0][][] */ -127,-121,-55,105,-12,12,27,101, 
  /* [35][0][][] */ -53,127,-31,-7,68,104,52,71, 
  /* [36][0][][] */ 72,29,-1,-43,-127,-29,102,111, 
  /* [37][0][][] */ -67,103,27,24,-127,102,-23,-92, 
  /* [38][0][][] */ 30,38,31,18,127,69,100,50, 
  /* [39][0][][] */ -26,-72,41,-19,9,36,-97,127, 
  /* [40][0][][] */ -67,-57,-73,127,-30,-2,13,64, 
  /* [41][0][][] */ 127,11,53,109,-52,-10,-3,-21, 
  /* [42][0][][] */ -45,6,-66,-127,52,-108,4,80, 
  /* [43][0][][] */ 24,-8,87,-3,34,127,93,7, 
  /* [44][0][][] */ -27,-25,-70,127,49,13,-39,-38, 
  /* [45][0][][] */ 67,125,117,-123,51,-61,24,-127, 
  /* [46][0][][] */ -35,-127,-38,34,-10,39,-65,122, 
  /* [47][0][][] */ 41,41,123,4,92,122,127,-25, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0043764319270849228, 0.0041855853050947189, 0.0027669139672070742, 0.0032018376514315605, 0.00080642837565392256, 0.0033299713395535946, 0.0048377406783401966, 0.002232865896075964, 0.0031689251773059368, 0.0055641713552176952, 0.0033569904044270515, 0.003017231123521924, 0.0023813939187675714, 0.0039753173477947712, 0.0031346338801085949, 0.0030527922790497541, 0.0019900396000593901, 0.00077425810741260648, 0.0021773548796772957, 0.0036302162334322929, 0.0042924126610159874, 0.0018439710838720202, 0.0046844305470585823, 0.0036863635759800673, 0.0051307613030076027, 0.0093757268041372299, 0.0029240339063107967, 0.01150184590369463, 0.0022773272357881069, 0.00056528719142079353, 0.0036294395104050636, 0.0082630952820181847, 0.0041807196103036404, 0.0039868550375103951, 0.0023339397739619017, 0.0036417620722204447, 0.0055201137438416481, 0.0075850985012948513, 0.0041901106014847755, 0.0048570865765213966, 0.0028922739438712597, 0.0032648078631609678, 0.0035037389025092125, 0.0046592568978667259, 0.0042538661509752274, 0.0019435925642028451, 0.002556133083999157, 0.0031541262287646532, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -8021, -3234, 11866, -9714, 22633, 7941, -9130, 11552, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017281931650359184, 0.00021889126219321042, 0.00017584717716090381, 0.00024219095939770341, 0.00019119003263767809, 0.00017427443526685238, 0.0001811725232983008, 0.00027501315344125032, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -11,-14,-21,-62,-23,-33,20,-17,37,11,-31,-5,107,127,-21,-102, 
  /* [1][0][][] */ 127,-60,-43,18,-43,72,-69,-42,-37,86,-31,-52,-7,6,-65,-15, 
  /* [2][0][][] */ -38,-96,40,45,49,-58,-76,-19,31,-91,25,-127,46,-19,-75,26, 
  /* [3][0][][] */ 36,15,16,14,-12,71,-51,-20,127,46,9,24,4,-16,13,21, 
  /* [4][0][][] */ -99,-40,-28,-127,-7,38,58,-117,34,-20,-52,-41,-122,34,-43,-21, 
  /* [5][0][][] */ 86,49,71,-30,46,-47,-127,-124,-15,-76,66,49,-55,47,62,-47, 
  /* [6][0][][] */ 109,42,-124,-79,26,-73,2,-93,-44,23,-127,97,88,-89,8,69, 
  /* [7][0][][] */ -127,-3,96,-29,-65,3,-1,-62,-53,61,85,-33,61,-27,30,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0073448210023343563, 0.0093028787523508072, 0.0074735051020979881, 0.010293115861713886, 0.0081255761906504631, 0.0074066636152565479, 0.0076998323202133179, 0.011688059195876122, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 18199, -544, 256, 2561, -809, -2, 11020, 1739, -1201, 264, -2627, 3101, 1087, -731, -91, -1618, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0001261993165826425, 0.00020458444487303495, 0.00015359411190729588, 0.00016521297220606357, 0.0011548034381121397, 0.000882687047123909, 0.00014966384333092719, 0.00081253581447526813, 0.00037053381674923003, 0.001263711485080421, 0.00027606304502114654, 0.00019838781736325473, 0.00010055177699541673, 0.00027019178378395736, 0.00020954258798155934, 0.00037849668296985328, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-3,6,6,-19,12,5,15,-6,-11,3,-9,-3,-8,-1,0, 5,-4,2,5,13,-1,9,-27,-7,9,-2,85,-8,21,4,1, 1,-4,-4,4,2,-13,-4,10,3,2,-1,-10,1,-5,-5,0, 
  /* [0][1][][] */ 12,-8,1,3,127,-23,-127,-23,127,127,2,-5,107,-25,-2,-18, -127,127,127,-1,-87,-90,-17,-104,16,-106,127,127,127,127,127,127, 18,-3,-8,0,-10,127,2,-11,0,-13,-3,-5,10,-4,-11,-7, 
  /* [0][2][][] */ 1,-3,0,-14,-19,16,53,6,-9,-8,1,1,-4,1,-6,-10, 22,-12,-5,-127,6,-15,-11,127,-5,1,4,-12,-8,-55,-9,-35, 2,-3,-3,-3,1,-4,0,-3,2,2,-1,2,1,-4,-7,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053634708747267723, 0.0086948387324810028, 0.0065277498215436935, 0.0070215510204434395, 0.049079146236181259, 0.037514198571443558, 0.006360713392496109, 0.03453277051448822, 0.015747686848044395, 0.053707737475633621, 0.011732678860425949, 0.0084314821287989616, 0.0042734504677355289, 0.011483150534331799, 0.008905559778213501, 0.016086108982563019, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 2422, 627, 835, 606, 82237, 64071, 4869, 4499, 7785, 1341, 2085, 125, 5865, -26675, 544, 60713, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0001566557475598529, 0.00075492594623938203, 0.00016823118494357914, 0.00011638136493274942, 2.0047937141498551e-05, 2.7615706130745821e-05, 0.00010648979514371604, 1.9553115635062568e-05, 0.00011195566912647337, 2.6765497750602663e-05, 0.0003755715733859688, 0.00062700692797079682, 0.00028231117175891995, 1.2887152479379438e-05, 0.00057044491404667497, 3.0654424335807562e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -37, 17, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -95, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 30, -53, 3, 
  /* [4][1][][] */ 28, -127, 3, 
  /* [4][2][][] */ 16, -87, -13, 
  /* [5][0][][] */ -61, 34, -1, 
  /* [5][1][][] */ -127, 40, 4, 
  /* [5][2][][] */ -86, 30, 1, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 56, -15, 
  /* [6][2][][] */ -36, -51, -87, 
  /* [7][0][][] */ 39, 29, -16, 
  /* [7][1][][] */ 127, 71, -6, 
  /* [7][2][][] */ 34, 6, -23, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -21, 52, -8, 
  /* [9][1][][] */ -15, 127, -10, 
  /* [9][2][][] */ -6, 88, -5, 
  /* [10][0][][] */ 24, 86, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 17, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 88, 27, -18, 
  /* [13][1][][] */ 127, 104, -18, 
  /* [13][2][][] */ 84, 116, 34, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -86, -29, 19, 
  /* [15][1][][] */ -127, -118, 17, 
  /* [15][2][][] */ -17, -65, -1, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.043399058282375336, 0.2091405838727951, 0.046605855226516724, 0.032241661101579666, 0.0055539715103805065, 0.0076505052857100964, 0.029501354321837425, 0.0054168892093002796, 0.031015591695904732, 0.0074149682186543941, 0.10404631495475769, 0.17370259761810303, 0.078209951519966125, 0.0035701869055628777, 0.15803296864032745, 0.0084923356771469116, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.082392416894435883, } };
const TfArray<1, int> quant46_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.063525713980197906, } };
const TfArray<1, int> quant50_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.053404491394758224, } };
const TfArray<1, int> quant53_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.074460469186306, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.019531158730387688, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.045693140476942062, } };
const TfArray<1, int> quant58_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.020129015669226646, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.039167940616607666, } };
const TfArray<1, int> quant61_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.066818155348300934, } };
const TfArray<1, int> quant62_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019936801865696907, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.030679056420922279, } };
const TfArray<1, int> quant65_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.081846319139003754, } };
const TfArray<1, int> quant66_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.020552115514874458, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.027970312163233757, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.055997692048549652, } };
const TfArray<1, int> quant69_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
